import{_ as e,o as t,c as s,U as i}from"./chunks/framework.AM0-35oE.js";const u=JSON.parse('{"title":"Redis 自学笔记","description":"Redis 是一个开源（BSD许可）的，内存中的数据结构存储系统，它可以用作数据库、缓存和消息中间件。","frontmatter":{"description":"Redis 是一个开源（BSD许可）的，内存中的数据结构存储系统，它可以用作数据库、缓存和消息中间件。","categories":["技术笔记分享"],"tags":["Redis"]},"headers":[],"relativePath":"full-stack/other/redis.md","filePath":"full-stack/other/redis.md","lastUpdated":1710839652000}'),a={name:"full-stack/other/redis.md"},d=i(`<h1 id="redis-自学笔记" tabindex="-1">Redis 自学笔记 <a class="header-anchor" href="#redis-自学笔记" aria-label="Permalink to &quot;Redis 自学笔记&quot;">​</a></h1><h2 id="一、redis" tabindex="-1">一、Redis <a class="header-anchor" href="#一、redis" aria-label="Permalink to &quot;一、Redis&quot;">​</a></h2><blockquote><p>Redis官方网站：<a href="https://redis.io/" target="_blank" rel="noreferrer">https://redis.io/</a></p></blockquote><h3 id="_1-1-redis简介" tabindex="-1">1.1 Redis简介 <a class="header-anchor" href="#_1-1-redis简介" aria-label="Permalink to &quot;1.1 Redis简介&quot;">​</a></h3><p>Redis 是一个开源（BSD许可）的，内存中的数据结构存储系统，它可以用作数据库、缓存和消息中间件。 它支持多种类型的数据结构，如 字符串（strings）， 散列（hashes）， 列表（lists）， 集合（sets）， 有序集合（sorted sets） 与范围查询， bitmaps， hyperloglogs 和 地理空间（geospatial） 索引半径查询。 Redis 内置了 复制（replication），LUA脚本（Lua scripting）， LRU驱动事件（LRU eviction），事务（transactions） 和不同级别的 磁盘持久化（persistence）， 并通过 Redis哨兵（Sentinel）和自动分区（Cluster）提供高可用性（high availability）。</p><h3 id="_1-2、redis下载" tabindex="-1">1.2、Redis下载 <a class="header-anchor" href="#_1-2、redis下载" aria-label="Permalink to &quot;1.2、Redis下载&quot;">​</a></h3><blockquote><p>下载地址：<a href="https://download.redis.io/releases/redis-6.2.5.tar.gz" target="_blank" rel="noreferrer">https://download.redis.io/releases/redis-6.2.5.tar.gz</a></p></blockquote><p>Linux端下载：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">wget</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> https://download.redis.io/releases/redis-6.2.5.tar.gz</span></span></code></pre></div><h2 id="二、redis安装" tabindex="-1">二、Redis安装 <a class="header-anchor" href="#二、redis安装" aria-label="Permalink to &quot;二、Redis安装&quot;">​</a></h2><ol><li><p>解压</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">tar</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -zxvf</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> redis-6.2.5.tar.gz</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -C</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /usr/src</span></span></code></pre></div><ul><li>tar：Linux打包为tar的命令（-zxvf为解压tar.gz文件）</li><li>-C：指定解压目录（编译安装时习惯上源码都解压到<code>/usr/src</code>）</li></ul></li><li><p>编译安装</p><blockquote><p>在源码编译过程中，需要用到make命令，还需要安装c语言环境</p></blockquote><p>安装make和c语言环境：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">yum</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -y</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> gcc</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> gcc-c++</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> make</span></span></code></pre></div><p>转到源码所在的目录</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /usr/src/redis-6.2.5</span></span></code></pre></div><p>编译安装</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">make</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> PREFIX=/usr/local/redis</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span></span></code></pre></div><ul><li>make：编译</li><li>PREFIX：指定安装目录（编译安装过程中，一般将软件安装到<code>/usr/local</code>目录下）</li><li>install：安装</li></ul></li></ol><blockquote><p>编译安装完成后，源码在<code>/usr/src/redis-6.2.5</code>目录下，安装在<code>/usr/local/redis</code>目录下 如果安装过程中出错，显示找不到某某某.h的文件，可能是你的环境缺少，这时在你安装了环境后重新编译时，可能会报错。</p><p>你需要使用<code>make distclean</code>清除之前编译安装生成的文件的重新开始编译安装</p></blockquote><h2 id="三、配置redis" tabindex="-1">三、配置Redis <a class="header-anchor" href="#三、配置redis" aria-label="Permalink to &quot;三、配置Redis&quot;">​</a></h2><ol><li><p>在<code>/usr/local/redis</code>目录下，新建一个etc目录用于存放配置文件<code>redis.conf</code></p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /usr/local/redis/</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mkdir</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> etc</span></span></code></pre></div></li><li><p>将<code>redis.conf</code>拷贝到刚才新建的目录下</p><blockquote><p>这里可以将原配置文件中的注释和空行全都过滤掉</p></blockquote><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cat</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /usr/src/redis-6.2.5/redis.conf</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> grep</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -v</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;#&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> grep</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -v</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;^$&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /usr/local/redis/etc/redis.conf</span></span></code></pre></div></li><li><p>配置Redis使其在启动后后台运行</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">vim</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> etc/redis.conf</span></span></code></pre></div><p>找到<code>daemonize</code>选项将其设置为yes</p></li></ol><h2 id="四、测试redis" tabindex="-1">四、测试Redis <a class="header-anchor" href="#四、测试redis" aria-label="Permalink to &quot;四、测试Redis&quot;">​</a></h2><h3 id="_4-1-启动redis" tabindex="-1">4.1 启动Redis <a class="header-anchor" href="#_4-1-启动redis" aria-label="Permalink to &quot;4.1 启动Redis&quot;">​</a></h3><p>在目录下输入./bin/redis-server来使用默认配置启动</p><p>如果报错端口被占用</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>Could not create server TCP listening socket *:6379: bind: Address already in use</span></span></code></pre></div><p>可以使用<code>lsof -i:6379</code>来查看6379端口的占用情况，在得到程序相关的<code>PID号</code>之后，可以使用<code>kill -9 PID</code>来杀死进程</p><p>使用配置文件启动</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">./bin/redis-server</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ./etc/redis.conf</span></span></code></pre></div><h3 id="_4-2-连接redis" tabindex="-1">4.2 连接Redis <a class="header-anchor" href="#_4-2-连接redis" aria-label="Permalink to &quot;4.2 连接Redis&quot;">​</a></h3><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">./bin/redis-cli</span></span></code></pre></div><p>测试：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">127.0.0.1:6379&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ping</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">PONG</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">127.0.0.1:6379&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ping</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> mufeng</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">&quot;mufeng&quot;</span></span></code></pre></div><blockquote><p>至此，Redis的基础安装结束</p></blockquote><h2 id="五、redis特性" tabindex="-1">五、Redis特性 <a class="header-anchor" href="#五、redis特性" aria-label="Permalink to &quot;五、Redis特性&quot;">​</a></h2><h3 id="_5-1-redis远程管理软件" tabindex="-1">5.1 Redis远程管理软件 <a class="header-anchor" href="#_5-1-redis远程管理软件" aria-label="Permalink to &quot;5.1 Redis远程管理软件&quot;">​</a></h3><p>链接地址：<a href="https://github.com/qishibo/AnotherRedisDesktopManager/releases" target="_blank" rel="noreferrer">https://github.com/qishibo/AnotherRedisDesktopManager/releases</a></p><p>配置文件修改：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>bind 0.0.0.0		#允许所有网段远程访问，如需多个网段访问，可以用空格隔开</span></span>
<span class="line"><span>protected-mode no	#关闭安全模式</span></span></code></pre></div><blockquote><p>需要开放防火墙端口</p></blockquote><h3 id="_5-2-redis配置文件解析" tabindex="-1">5.2 Redis配置文件解析 <a class="header-anchor" href="#_5-2-redis配置文件解析" aria-label="Permalink to &quot;5.2 Redis配置文件解析&quot;">​</a></h3><p>配置文件解析：<a href="https://www.runoob.com/redis/redis-conf.html" target="_blank" rel="noreferrer">https://www.runoob.com/redis/redis-conf.html</a></p><p>基础配置：</p><ul><li><code>bind 0.0.0.0</code> 允许访问的地址</li><li><code>protected-mode no</code> 安全模式，默认打开</li><li><code>daemonize yes</code> 是否后台启动，默认为no，为前台启动</li><li><code>loglevel notice</code> 日志等级，有四个等级</li><li><code>logfile &quot;&quot;</code> 日志文件存储位置，默认在前台运行会输出到控制台，在后台运行会输出到<code>/dev/null</code></li><li><code>databases 16</code> 默认有16个数据库，在Redis中，数据库并非严格隔离</li><li><code>port 6379</code> Redis服务的默认端口号为6379</li><li><code>requirepass</code></li></ul><p>tail -f</p><h3 id="_5-3-redis持久化策略" tabindex="-1">5.3 Redis持久化策略 <a class="header-anchor" href="#_5-3-redis持久化策略" aria-label="Permalink to &quot;5.3 Redis持久化策略&quot;">​</a></h3><p>Redis持久化策略可以分为两种</p><ul><li>RDB快照</li><li>AOF策略</li></ul><h4 id="_5-3-1-rdb内存快照" tabindex="-1">5.3.1 RDB内存快照 <a class="header-anchor" href="#_5-3-1-rdb内存快照" aria-label="Permalink to &quot;5.3.1 RDB内存快照&quot;">​</a></h4><p>全量快照 会备份全部的数据，但是比较费时</p><p>触发方式：</p><ol><li><p><code>save</code>命令 在主线程中使用，不建议使用，会造成阻塞</p><p>save会生成一个<code>dump.rdb</code>，下次启动会调取该文件</p></li><li><p><code>bgsave</code>命令 后台创建（folk）一个子进程，专门用于写入rdb文件，避免主线程的阻塞</p><p>一般情况下，该命令较快，但是有可能会造成save一样的问题</p></li><li><p>自动触发</p><div class="language-conf vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">conf</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>save 3600 1		#在3600秒内有一个key发生变化，则触发一次快照</span></span>
<span class="line"><span>save 300 100	#在300秒内有100个key发生变化，则触发一次快照</span></span>
<span class="line"><span>save 60 1000	#在60秒内有1000个key发生变化，则触发一次快照</span></span></code></pre></div><p><code>rdbcompression yes</code> 改配置一定要打开，代表生成RDB文件的时候，会压缩</p></li></ol><h4 id="_5-3-2-aof-append-only-file-策略" tabindex="-1">5.3.2 AOF（Append-only-file）策略 <a class="header-anchor" href="#_5-3-2-aof-append-only-file-策略" aria-label="Permalink to &quot;5.3.2 AOF（Append-only-file）策略&quot;">​</a></h4><p>这个持久化策略类似于实时日志 在Redis写入数据到数据区之后，会同步将日志（执行的命令）写入到磁盘文件中，生成一个AOF文件 如果服务器挂掉，就会读取这些日志文件，执行所有的历史命令，还原数据</p><blockquote><p>拓展：传统的数据库（mysql等）生成的日志都是redo（重做）日志</p></blockquote><p>好处：不会造成阻塞</p><p>坏处：</p><ol><li>在写入数据之后如果服务器挂掉，最后一条执行的命令会丢失</li><li>如果一个命令非常长，可能会造成下一个操作阻塞的风险</li></ol><p>配置：</p><ul><li><p><code>appendonly no</code> AOF策略，默认为关闭</p></li><li><p><code>appendfilename</code> AOF存储路径</p></li><li><p><code>appendfsync everysec</code> 写回策略，默认每一秒写回一次缓冲区的数据</p><p>Redis提供了三种写回策略<code>fsync</code>：always，eyerysec，no</p><ul><li>always 同步写回，每次命令执行完立刻同步。慢速的落盘操作</li><li>eyerysec 每一秒写回一次，每个命令执行完毕会将执行的命令写入内存缓冲区</li><li>no 并非不写回，而是由操作系统来决定什么时候将缓冲区的内容写回</li></ul><blockquote><p>同步写回可以基本不丢失，但它是慢速的落盘操作，会很大的影响Redis的性能</p><p>每秒写回避免了性能开销，但是如果宕机，会造成一秒内的数据丢失</p><p>操作系统写回落盘的时机不归Redis的管理，存在极端的情况</p></blockquote><p><code>综上，一般会选择每秒写回，平衡性能和风险</code></p></li></ul><p><strong>AOF重写机制</strong>（rewrite）：</p><p>重写机制可以通过优化，将一些闭环的操作和批量的操作，进行删除和‘多变一’</p><p>AOF的重写机制和RDB的写回策略不同，重写机制实际是由主线程folk出的<code>bgrewriteaof</code>子进程进行的</p><p><code>“一个拷贝、两处日志”</code></p><p><strong>一个拷贝</strong>：每次执行重写时，主线程会folk出子进程，此时folk会把主线程的内存拷贝一份给子进程。然后该子进程就可以在不阻塞主线程的情况下逐一写入重写的日志中</p><p><strong>两处日志</strong>：一个是主线程正在操作的AOF文件；另一个是子进程重写的日志文件</p><h4 id="_5-3-3-两种持久化策略对比" tabindex="-1">5.3.3 两种持久化策略对比 <a class="header-anchor" href="#_5-3-3-两种持久化策略对比" aria-label="Permalink to &quot;5.3.3 两种持久化策略对比&quot;">​</a></h4><ol><li><p>如果同时开启RDB和AOF，那么AOF的<strong>优先级</strong>比较高</p></li><li><p>如果关闭了RDB，在单体的Redis环境中，只会按照AOF的策略进行持久化，但是在集群环境中，哪怕关闭了RDB，在第一次主从数据复制的时候，实际上主从节点会通过一次BGSAVE的全量复制来生成RDB给从节点复制</p></li><li><p>RGB和AOF<strong>优劣对比</strong></p><ul><li><p>恢复速度：RDB存储数据并且经过压缩，所以快于AOF</p></li><li><p>数据安全：</p><p>RDB可能会丢失这一次的数据，数据量不一定</p><p>AOF是根据写回策略来定义的</p></li><li><p>量级：RDB是一刀切，比较重；AOF是一个追加日志的操作，较为轻量</p></li></ul></li></ol><h3 id="_5-4-redis的内存回收-淘汰机制" tabindex="-1">5.4 Redis的内存回收/淘汰机制 <a class="header-anchor" href="#_5-4-redis的内存回收-淘汰机制" aria-label="Permalink to &quot;5.4 Redis的内存回收/淘汰机制&quot;">​</a></h3><h4 id="_5-4-1-内存回收策略" tabindex="-1">5.4.1 内存回收策略 <a class="header-anchor" href="#_5-4-1-内存回收策略" aria-label="Permalink to &quot;5.4.1 内存回收策略&quot;">​</a></h4><table><thead><tr><th>策略名</th><th>说明</th></tr></thead><tbody><tr><td>noevication</td><td>默认开启，当内存的使用量达到阈值时，所有的关于内存申请的命令都会直接报错</td></tr><tr><td>allkeys-lru</td><td>一种lru算法，从所有的数据集中选取最近最少使用的进行淘汰</td></tr><tr><td>allkeys-random</td><td>从所有的数据集中随机选取key删除</td></tr><tr><td>volatile-random</td><td>从设置了过期时间的数据集中随机删除一个key</td></tr><tr><td>volatile-ttl</td><td>从即将过期的数据中淘汰</td></tr><tr><td>volatile-lru</td><td>从已经设置了过期时间的数据集中选取最近最少使用的KV进行淘汰</td></tr></tbody></table><h2 id="六、redis常用命令" tabindex="-1">六、Redis常用命令 <a class="header-anchor" href="#六、redis常用命令" aria-label="Permalink to &quot;六、Redis常用命令&quot;">​</a></h2><p><a href="https://redis.io/commands" target="_blank" rel="noreferrer">https://redis.io/commands</a></p><p>Redis主要支持五种数据类型</p><ul><li>string</li><li>list</li><li>hash</li><li>set</li><li>sorted set (zset)</li></ul><h3 id="_6-1-redis通用指令" tabindex="-1">6.1 Redis通用指令 <a class="header-anchor" href="#_6-1-redis通用指令" aria-label="Permalink to &quot;6.1 Redis通用指令&quot;">​</a></h3><table><thead><tr><th style="text-align:left;">指令</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:left;">DBSIZE</td><td style="text-align:left;">返回当前库KV数量</td></tr><tr><td style="text-align:left;">SET key value</td><td style="text-align:left;">添加或修改KV</td></tr><tr><td style="text-align:left;">GET key</td><td style="text-align:left;">获取key对应的value</td></tr><tr><td style="text-align:left;">DEL key <em>[key ...]</em></td><td style="text-align:left;">批量删除key</td></tr><tr><td style="text-align:left;">TYPE key</td><td style="text-align:left;">获取key的类型</td></tr><tr><td style="text-align:left;">EXISTS key <em>[key ...]</em></td><td style="text-align:left;">判断key是否存在</td></tr><tr><td style="text-align:left;">EXPIRE key seconds</td><td style="text-align:left;">设置过期时间（单位：秒）</td></tr><tr><td style="text-align:left;">TTL key</td><td style="text-align:left;">查看指定key的过期时间</td></tr><tr><td style="text-align:left;">SETNX key value</td><td style="text-align:left;">典型的<code>乐观锁</code> 将key设置为value<br> 如果key不存在，等用于SET，返回1<br> 如果key存在，就不做操作，返回0</td></tr><tr><td style="text-align:left;">SELECT index(0-15)</td><td style="text-align:left;">选择数据库</td></tr><tr><td style="text-align:left;">FLUSHDB <em>[ASYNC/SYNC]</em></td><td style="text-align:left;">清空本数据库所有的key，选择同步和异步</td></tr><tr><td style="text-align:left;">FLUSHALL <em>[ASYNC/SYNC]</em></td><td style="text-align:left;">清空所有数据库的所有的key，可选同步或异步，默认异步</td></tr><tr><td style="text-align:left;">MOVE key db</td><td style="text-align:left;">移动key到其他DB，如果有相同的key就不会移动</td></tr><tr><td style="text-align:left;">RENAME key newkey</td><td style="text-align:left;">重命名key，如果新key存在，则会删除之前的key</td></tr><tr><td style="text-align:left;">RENAMENX key newkey</td><td style="text-align:left;">重命名，如果存在，则不作操作</td></tr><tr><td style="text-align:left;">KEYS pattern</td><td style="text-align:left;">使用通配符匹配key</td></tr></tbody></table><h3 id="_6-2-string类型" tabindex="-1">6.2 String类型 <a class="header-anchor" href="#_6-2-string类型" aria-label="Permalink to &quot;6.2 String类型&quot;">​</a></h3><p>String类型在Redis中有两种存储方式</p><p>String通过int，SDS（Simple Dynamic Static）作为数据结构（支持自增自减）</p><p>redis在上<code>sds.h</code>里定义了五种string类型，目的为了节约内存。</p><pre><code>sdshdr5（没有被使用），sdshdr8（默认），sdshdr16等
</code></pre><p>建议：单个K-V虽然可以支持64位的长度（512M），但是实际项目中最好不要超过100k</p><h4 id="相关命令" tabindex="-1">相关命令 <a class="header-anchor" href="#相关命令" aria-label="Permalink to &quot;相关命令&quot;">​</a></h4><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td>APPEND key value</td><td>追加到key，返回追加后的长度</td></tr><tr><td>MSET key value <em>[key value ...]</em></td><td>通过Redis管道批量写入数据</td></tr><tr><td>MGET key <em>[key ...]</em></td><td>通过Redis管道批量读取数据</td></tr><tr><td>INCR key</td><td>自增</td></tr><tr><td>DECR key</td><td>自减</td></tr><tr><td>INCRBY key increment</td><td>以指定步长自增</td></tr><tr><td>DECRBY key increment</td><td>以指定步长自减</td></tr><tr><td>INCRBYFLOAT key increment</td><td>以指定步长（可以为浮点数）自增 <code>不存在以浮点数自减</code></td></tr><tr><td>STRLEN key</td><td>获取key对应的字符串长度</td></tr><tr><td>GETRANGE key start end</td><td>以闭区间截取key对应的字符串</td></tr><tr><td>SETRANGE key offset value</td><td>把某个区间内的值替换</td></tr><tr><td>SETEX key seconds value</td><td>设置key、过期时间、value</td></tr></tbody></table><h3 id="_6-3-list类型" tabindex="-1">6.3 List类型 <a class="header-anchor" href="#_6-3-list类型" aria-label="Permalink to &quot;6.3 List类型&quot;">​</a></h3><p>有序、可重复的列表 <code>QuickList</code> 是一种双向链表，每一个元素都是压缩列表类型</p><pre><code>在3.X版本之前使用双向链表\`LinkedList\`、\`ZipList\`存数据
</code></pre><p>当列表元素个数比较多或单个值比较大时，就不用zipList</p><h4 id="相关命令-1" tabindex="-1">相关命令 <a class="header-anchor" href="#相关命令-1" aria-label="Permalink to &quot;相关命令&quot;">​</a></h4><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td>LPUSH key element <em>[element ...]</em></td><td>从左压入list，后进的id更小</td></tr><tr><td>RPUSH key element <em>[element ...]</em></td><td>从右压入list，先入的di更小</td></tr><tr><td>LPOP key <em>[count]</em></td><td>从左弹出list元素，count指定弹出的元素个数</td></tr><tr><td>RPOP key <em>[count]</em></td><td>从右弹出list元素，count指定弹出的元素个数</td></tr><tr><td>LINDEX key index</td><td>通过索引获取key的值（Lindex代表list的索引，并非left）</td></tr><tr><td>LLEN key</td><td>获取list长度</td></tr><tr><td>LRANGE key start stop</td><td>区间遍历list（-1代表最后一个元素）</td></tr><tr><td>LSET key index element</td><td>通过下标修改元素</td></tr></tbody></table><h3 id="_6-4-hash类型" tabindex="-1">6.4 Hash类型 <a class="header-anchor" href="#_6-4-hash类型" aria-label="Permalink to &quot;6.4 Hash类型&quot;">​</a></h3><p>Filed-value相当于对象的属性名和属性值</p><p>在数据结构上Redis提供了两种数据结构</p><ol><li>数据量较小：ZibList</li><li>HashTable</li></ol><p>在Redis中，Hash表分为三层：<code>dictEntry</code>，<code>dictht</code>，<code>dict</code></p><p>先通过<code>murmur</code>算法计算key对应的<code>HashCode</code>，然后根据HashCode取模得到值，对应应该插入到哈希表（Hash Bucket）的位置</p><h4 id="相关命令-2" tabindex="-1">相关命令 <a class="header-anchor" href="#相关命令-2" aria-label="Permalink to &quot;相关命令&quot;">​</a></h4><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td>HSET key field value <em>[field value ...]</em></td><td>设置hash表中的属性和值，返回新增的个数，如果是修改返回0</td></tr><tr><td>HMSET key field value <em>[field value ...]</em></td><td>同上（4.0版本之前不同）</td></tr><tr><td>HGET key field <em>[field ...]</em></td><td>获取hash表中属性对应的值</td></tr><tr><td>HMGET key field <em>[field ...]</em></td><td>获取hash表中多个属性对应的值</td></tr><tr><td>HLEN key</td><td>获取属性的个数</td></tr><tr><td>HGETALL key</td><td>获取所有的属性名</td></tr><tr><td>HEXISTS key field</td><td>判断某属性是否存在</td></tr><tr><td>HDEL key field <em>[field ...]</em></td><td>删除某一个（些）属性，删除所有的属性会删除key</td></tr><tr><td>HKEYS key</td><td>返回所有的属性名</td></tr><tr><td>HVALS key</td><td>返回所有的属性值</td></tr><tr><td>HINCRBY key field increment</td><td>自增某一个属性值（给负数则为自减）</td></tr><tr><td>HSETNX key field value</td><td>类比SETNX</td></tr></tbody></table><p>如果存储的对象需要经常修改，则建议存储为hash</p><p>如果只是存储，建议存储json字符串String</p><h3 id="_6-5-set类型" tabindex="-1">6.5 Set类型 <a class="header-anchor" href="#_6-5-set类型" aria-label="Permalink to &quot;6.5 Set类型&quot;">​</a></h3><p><strong>set</strong>：无序、不重复的集合</p><p>单个set最多存储值的上限为2^32-1，在Redis内部使用散列表（hashtable）和intset（数值类型）</p><p><strong>散列表中的key永远都是null</strong></p><h4 id="相关命令-3" tabindex="-1">相关命令 <a class="header-anchor" href="#相关命令-3" aria-label="Permalink to &quot;相关命令&quot;">​</a></h4><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td>SADD key member <em>[member ...]</em></td><td>向集合中批量添加成员</td></tr><tr><td>SREM key member <em>[member ...]</em></td><td>批量删除成员</td></tr><tr><td>SMEMBERS key</td><td>获取所有的成员</td></tr><tr><td>SPOP key <em>[count]</em></td><td>弹出一个成员</td></tr><tr><td>SMOVE source destination member</td><td>移动一个成员到其他集合</td></tr><tr><td></td><td></td></tr></tbody></table><h3 id="_6-6-sorted-set-zset-类型" tabindex="-1">6.6 sorted set (zset)类型 <a class="header-anchor" href="#_6-6-sorted-set-zset-类型" aria-label="Permalink to &quot;6.6 sorted set (zset)类型&quot;">​</a></h3><p>底层数据结构：ziplist或者skipList+HashTable</p><p>有序集合（ZSet）没有下标，不能重复。它和set区别只是将无序变成了有序。</p><h4 id="相关命令-4" tabindex="-1">相关命令 <a class="header-anchor" href="#相关命令-4" aria-label="Permalink to &quot;相关命令&quot;">​</a></h4><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td>ZADD key score member <em>[score member ...]</em></td><td>将具有指定分数的所有指定成员添加到一个zset中，也可以修改分数值，返回新增的成员个数</td></tr><tr><td>ZRANGE key min max</td><td>返回存储在 的有序集合中指定范围的元素。<br><code>&lt;min&gt;</code>和<code>&lt;max&gt;</code>参数表示基于零的索引，-1代表最后一个<br><code>-inf</code>和<code>+inf</code>，分别表示负无穷大和正无穷大</td></tr><tr><td>ZRANGEBYSCORE key min max</td><td>这里的<code>&lt;min&gt;</code>和<code>&lt;max&gt;</code>参数表示分数值<br>需使用<code>-inf</code>和<code>+inf</code><br>后边如果跟<code>[WITHSCORES]</code>可以返回分数值</td></tr><tr><td>ZREVRANGE key start stop <em>[WITHSCORES]</em></td><td>从大到小排列，rev表示翻转<br>Redis中默认都是从小到大排序，rev表示从大到小排序</td></tr><tr><td>ZREVRANGEBYScore key max min <em>[WITHSCORES]</em></td><td>从大到小排序，类比<code>ZRANGEBYSCORE</code>，注意这里是max-min</td></tr><tr><td>ZCARD key</td><td>获取有序集合中的成员数量</td></tr><tr><td>ZCOUNT key min max</td><td>获取有序集合介于某一范围的成员数量</td></tr><tr><td>ZREM key member <em>[member ...]</em></td><td>根据成员名删除成员</td></tr></tbody></table><h3 id="其他" tabindex="-1">其他 <a class="header-anchor" href="#其他" aria-label="Permalink to &quot;其他&quot;">​</a></h3><ul><li><p>redis事务</p></li><li><p>发布订阅：不支持消息积累</p><p>PUBLISH channel message 发布消息</p><p>SUBSCRIBE channel [channel ...] 订阅频道</p></li><li><p>GEO</p></li></ul>`,107),l=[d];function r(n,o,h,p,c,k){return t(),s("div",null,l)}const g=e(a,[["render",r]]);export{u as __pageData,g as default};
