import{_ as a,o as t,c as e,U as r}from"./chunks/framework.BybONTeF.js";const u=JSON.parse('{"title":"重学 JAVA 设计模式","description":"设计模式（Design Patterns），是一套被反复使用、多数人知晓的、经过分类的、代码设计经验的总结。使用设计模式是为了重用代码、让代码更容易被他人理解、保证代码可靠性。","frontmatter":{"description":"设计模式（Design Patterns），是一套被反复使用、多数人知晓的、经过分类的、代码设计经验的总结。使用设计模式是为了重用代码、让代码更容易被他人理解、保证代码可靠性。","categories":["Java 学习笔记"],"tags":["Java","设计模式"],"sticky":4},"headers":[],"relativePath":"full-stack/java/design-patterns/index.md","filePath":"full-stack/java/design-patterns/index.md","lastUpdated":1711423779000}'),n={name:"full-stack/java/design-patterns/index.md"},o=r('<h1 id="重学-java-设计模式" tabindex="-1">重学 JAVA 设计模式 <a class="header-anchor" href="#重学-java-设计模式" aria-label="Permalink to &quot;重学 JAVA 设计模式&quot;">​</a></h1><h2 id="简介" tabindex="-1">简介 <a class="header-anchor" href="#简介" aria-label="Permalink to &quot;简介&quot;">​</a></h2><p>为了尽量复用代码，降低代码的耦合度，基于面向对象编程（OOP）的设计模式应运而生。</p><p>设计模式（Design Patterns）代表了最佳的实践，是一套被反复使用、多数人知晓的、经过分类的、代码设计经验的总结。使用设计模式是为了重用代码、让代码更容易被他人理解、保证代码可靠性。</p><h2 id="设计模式的原则" tabindex="-1">设计模式的原则 <a class="header-anchor" href="#设计模式的原则" aria-label="Permalink to &quot;设计模式的原则&quot;">​</a></h2><p>设计模式主要有以下原则：</p><ul><li><strong>开闭原则</strong></li><li><strong>里氏替换原则</strong></li><li><strong>依赖倒置原则</strong></li><li><strong>接口隔离原则</strong></li><li><strong>迪米特法则</strong></li><li><strong>合成复用原则</strong></li><li><strong>单一职责原则</strong></li></ul><p>设计模式的七大原则及实例详见： <a href="./principle.html">设计模式七大原则</a></p><h2 id="设计模式的分类" tabindex="-1">设计模式的分类 <a class="header-anchor" href="#设计模式的分类" aria-label="Permalink to &quot;设计模式的分类&quot;">​</a></h2><p>设计模式主要分为三大类：<strong>创建型模式</strong>、<strong>结构型模式</strong>、<strong>行为型模式</strong>。受到<a href="https://www.liaoxuefeng.com/wiki/1252599548343744/1264742167474528" target="_blank" rel="noreferrer">廖雪峰老师的教程</a>启发， 这一系列的博客将从这三个方面来学习设计模式，并做以记录。</p><h3 id="创建型模式" tabindex="-1">创建型模式 <a class="header-anchor" href="#创建型模式" aria-label="Permalink to &quot;创建型模式&quot;">​</a></h3><ul><li><a href="./creation-mode/factory-pattern.html">工厂模式</a></li></ul><h3 id="结构型模式" tabindex="-1">结构型模式 <a class="header-anchor" href="#结构型模式" aria-label="Permalink to &quot;结构型模式&quot;">​</a></h3><h3 id="行为型模式" tabindex="-1">行为型模式 <a class="header-anchor" href="#行为型模式" aria-label="Permalink to &quot;行为型模式&quot;">​</a></h3>',14),i=[o];function s(l,h,d,c,g,p){return t(),e("div",null,i)}const f=a(n,[["render",s]]);export{u as __pageData,f as default};
