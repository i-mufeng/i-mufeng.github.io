import{_ as e,o as a,c as t,Q as r}from"./chunks/framework.6a38f59a.js";const p=JSON.parse('{"title":"","description":"","frontmatter":{"readingTime":false,"hidden":true},"headers":[],"relativePath":"question-by-day/2023/11.md","filePath":"question-by-day/2023/11.md","lastUpdated":1699347096000}'),o={name:"question-by-day/2023/11.md"},l=r('<h2 id="_11-7" tabindex="-1">11-7 <a class="header-anchor" href="#_11-7" aria-label="Permalink to &quot;11-7&quot;">​</a></h2><h3 id="创建线程有哪几种方式" tabindex="-1">创建线程有哪几种方式？ <a class="header-anchor" href="#创建线程有哪几种方式" aria-label="Permalink to &quot;创建线程有哪几种方式？&quot;">​</a></h3><ol><li>继承 Thread 类，重写 run() 方法，调用 start() 方法启动线程。</li><li>实现 Runnable 接口，重写 run() 方法，创建 Thread 对象，调用 start() 方法启动线程。</li><li>实现 Callable 接口，重写 call() 方法，创建 FutureTask 对象，创建 Thread 对象，调用 start() 方法启动线程。</li><li>使用线程池创建线程。</li></ol><h2 id="_11-6" tabindex="-1">11-6 <a class="header-anchor" href="#_11-6" aria-label="Permalink to &quot;11-6&quot;">​</a></h2><h3 id="都有哪些原子类-请举例说明。" tabindex="-1">都有哪些原子类？请举例说明。 <a class="header-anchor" href="#都有哪些原子类-请举例说明。" aria-label="Permalink to &quot;都有哪些原子类？请举例说明。&quot;">​</a></h3><p><code>java.util.concurrent </code>这个包里面提供了一组原子类。其基本的特性就是在多线程环境下，当有多个线程同时执行这些类的实例包含的方法时，具有排他性。</p><ul><li>原子类：AtomicBoolean，AtomicInteger，AtomicLong，AtomicReference</li><li>原子数组：AtomicIntegerArray，AtomicLongArray，AtomicReferenceArray</li><li>原子属性更新器：AtomicLongFieldUpdater，AtomicIntegerFieldUpdater，AtomicReferenceFieldUpdater</li><li>解决ABA问题的原子类：AtomicMarkableReference（通过引入一个boolean来反映中间有没有变过），AtomicStampedReference（通过引入一个int来累加来反映中间有没有变过）</li></ul><h2 id="_11-5" tabindex="-1">11-5 <a class="header-anchor" href="#_11-5" aria-label="Permalink to &quot;11-5&quot;">​</a></h2><h3 id="什么是原子操作" tabindex="-1">什么是原子操作? <a class="header-anchor" href="#什么是原子操作" aria-label="Permalink to &quot;什么是原子操作?&quot;">​</a></h3><p>原子操作（atomic operation）意为”不可被中断的一个或一系列操作” 。处理器使用基于对缓存加锁或总线加锁的方式来实现多处理器之间的原子操作。 在Java中可以通过锁和循环CAS的方式来实现原子操作。CAS操作——Compare &amp; Set，或是 Compare &amp; Swap，现在几乎所有的CPU指令都支持CAS的原子操作。</p><p>原子操作是指一个不受其他操作影响的操作任务单元。原子操作是在多线程环境下避免数据不一致必须的手段。 <code>int++</code> 并不是一个原子操作，所以当一个线程读取它的值并加1时，另外一个线程有可能会读到之前的值，这就会引发错误。</p><p>为了解决这个问题，必须保证增加操作是原子的，在JDK1.5之前我们可以使用同步技术来做到这一点。 到JDK1.5，java.util.concurrent.atomic包提供了int和long类型的原子包装类，它们可以自动的保证对于他们的操作是原子的并且不需要使用同步。</p><h2 id="_11-4" tabindex="-1">11-4 <a class="header-anchor" href="#_11-4" aria-label="Permalink to &quot;11-4&quot;">​</a></h2><h3 id="execute-与-submit-的用法与区别。" tabindex="-1">execute 与 submit 的用法与区别。 <a class="header-anchor" href="#execute-与-submit-的用法与区别。" aria-label="Permalink to &quot;execute 与 submit 的用法与区别。&quot;">​</a></h3><p>execute 执行后<strong>没有返回结果</strong>，只有1种用法</p><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td><code>void execute(Runnable command)</code></td><td>常规使用方法，用没有返回值的 execute 执行没有返回值的 Runnable 任务</td></tr></tbody></table><p>submit 执行后<strong>有返回结果</strong>，有3种用法</p><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td><code>Future submit(Callable task)</code></td><td>常规使用方法，传入有返回值的 callable 任务，最终返回 task 的返回值</td></tr><tr><td><code>Future submit(Runnable task, T result)</code></td><td>由于 Runnable 没有返回值，但是可以自定义一个返回值用于返回</td></tr><tr><td><code>Future submit(Runnable task)</code></td><td>强行使用 submit 执行 Runnable 方法，忽略返回值</td></tr></tbody></table><h2 id="_11-3" tabindex="-1">11-3 <a class="header-anchor" href="#_11-3" aria-label="Permalink to &quot;11-3&quot;">​</a></h2><h3 id="runnable-与-callable-的区别。" tabindex="-1">Runnable 与 Callable 的区别。 <a class="header-anchor" href="#runnable-与-callable-的区别。" aria-label="Permalink to &quot;Runnable 与 Callable 的区别。&quot;">​</a></h3><p>Runnable 没有返回结果，即没有 return 语句；Callable 有返回结果。</p><p>可以通过 Executors 工厂类将 Runnable 封装为一个 Callable 对象。</p><h2 id="_11-2" tabindex="-1">11-2 <a class="header-anchor" href="#_11-2" aria-label="Permalink to &quot;11-2&quot;">​</a></h2><h3 id="请描述-executor-框架的执行过程。" tabindex="-1">请描述 Executor 框架的执行过程。 <a class="header-anchor" href="#请描述-executor-框架的执行过程。" aria-label="Permalink to &quot;请描述 Executor 框架的执行过程。&quot;">​</a></h3><p>1、通过实现 Runnable 接口或 Callable 接口创建任务。</p><p>2、通过Executors的工厂方法创建线程池。</p><p>3、通过 <code>ExecutorService.submit()</code> 提交一个有返回结果的任务，返回类型为一个实现Future接口的对象；或通过ExecutorService.execute()方法执行一个没有返回结果的任务。</p><p>4、通过 <code>FutureTask.get()</code> 获取返回结果（如果有）。</p><h2 id="_11-1" tabindex="-1">11-1 <a class="header-anchor" href="#_11-1" aria-label="Permalink to &quot;11-1&quot;">​</a></h2><h3 id="说一说你理解的-executor-框架。" tabindex="-1">说一说你理解的 Executor 框架。 <a class="header-anchor" href="#说一说你理解的-executor-框架。" aria-label="Permalink to &quot;说一说你理解的 Executor 框架。&quot;">​</a></h3><p>Executor 是线程池的调度工具，线程池是 Executor 的一部分。</p><p>Executor 框架由三大部分组成</p><p>1、<strong>任务</strong>：即被执行任务需要实现的接口：<strong>Runnable</strong> 接口或 <strong>Callable</strong> 接口。</p><p>2、<strong>线程池</strong>：主要通过 <strong>ExecutorService</strong> 接口调用线程池，有2个关键实现类 <strong>ThreadPoolExecutor</strong> 和 * <em>ScheduledThreadPoolExecutor</em>*。</p><p>3、<strong>异步计算的结果</strong>：<strong>Future</strong> 接口及其实现类 <strong>FutureTask</strong>。</p>',35),n=[l];function i(c,d,u,s,h,b){return a(),t("div",null,n)}const x=e(o,[["render",i]]);export{p as __pageData,x as default};
