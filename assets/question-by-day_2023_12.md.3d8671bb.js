import{_ as s,o as a,c as n,Q as o}from"./chunks/framework.22684875.js";const u=JSON.parse('{"title":"","description":"","frontmatter":{"readingTime":false,"hidden":true},"headers":[],"relativePath":"question-by-day/2023/12.md","filePath":"question-by-day/2023/12.md","lastUpdated":1703128439000}'),l={name:"question-by-day/2023/12.md"},p=o(`<h2 id="_12-20" tabindex="-1">12-20 <a class="header-anchor" href="#_12-20" aria-label="Permalink to &quot;12-20&quot;">​</a></h2><h3 id="springboot-怎么解决跨域问题" tabindex="-1">SpringBoot 怎么解决跨域问题？ <a class="header-anchor" href="#springboot-怎么解决跨域问题" aria-label="Permalink to &quot;SpringBoot 怎么解决跨域问题？&quot;">​</a></h3><p>可以通过<code>@CrossOrigin</code> 注解来解决跨域问题，该注解可以用在类上，也可以用在方法上。也可以通过 <code>WebMvcConfigurer</code> 接口来配置跨域。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">RestController</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">CrossOrigin</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">MyController</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">GetMapping</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;/hello&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> String </span><span style="color:#B392F0;">hello</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;hello&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">RestController</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">CrossOrigin</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MyController</span><span style="color:#24292E;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">GetMapping</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;/hello&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> String </span><span style="color:#6F42C1;">hello</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;hello&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Configuration</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">MyConfig</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">implements</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">WebMvcConfigurer</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">addCorsMappings</span><span style="color:#E1E4E8;">(CorsRegistry </span><span style="color:#FFAB70;">registry</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        registry.</span><span style="color:#B392F0;">addMapping</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;/**&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">                .</span><span style="color:#B392F0;">allowedHeaders</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;*&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">                .</span><span style="color:#B392F0;">allowedMethods</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;*&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">                .</span><span style="color:#B392F0;">allowedOrigins</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;*&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Configuration</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MyConfig</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">implements</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">WebMvcConfigurer</span><span style="color:#24292E;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">addCorsMappings</span><span style="color:#24292E;">(CorsRegistry </span><span style="color:#E36209;">registry</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        registry.</span><span style="color:#6F42C1;">addMapping</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;/**&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">                .</span><span style="color:#6F42C1;">allowedHeaders</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;*&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">                .</span><span style="color:#6F42C1;">allowedMethods</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;*&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">                .</span><span style="color:#6F42C1;">allowedOrigins</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;*&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h2 id="_12-19" tabindex="-1">12-19 <a class="header-anchor" href="#_12-19" aria-label="Permalink to &quot;12-19&quot;">​</a></h2><h3 id="springboot-怎么根据指定条件注册-bean" tabindex="-1">SpringBoot 怎么根据指定条件注册 bean？ <a class="header-anchor" href="#springboot-怎么根据指定条件注册-bean" aria-label="Permalink to &quot;SpringBoot 怎么根据指定条件注册 bean？&quot;">​</a></h3><p>SpringBoot 可以通过 <code>@Conditional</code> 注解来根据指定条件注册 bean，该注解可以用在类上，也可以用在方法上。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Configuration</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">MyConfig</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Bean</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Conditional</span><span style="color:#E1E4E8;">(MyCondition.class)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> MyBean </span><span style="color:#B392F0;">myBean</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">MyBean</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Configuration</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MyConfig</span><span style="color:#24292E;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Bean</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Conditional</span><span style="color:#24292E;">(MyCondition.class)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> MyBean </span><span style="color:#6F42C1;">myBean</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MyBean</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">MyCondition</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">implements</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Condition</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">matches</span><span style="color:#E1E4E8;">(ConditionContext </span><span style="color:#FFAB70;">context</span><span style="color:#E1E4E8;">, AnnotatedTypeMetadata </span><span style="color:#FFAB70;">metadata</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MyCondition</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">implements</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Condition</span><span style="color:#24292E;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">matches</span><span style="color:#24292E;">(ConditionContext </span><span style="color:#E36209;">context</span><span style="color:#24292E;">, AnnotatedTypeMetadata </span><span style="color:#E36209;">metadata</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h2 id="_12-18" tabindex="-1">12-18 <a class="header-anchor" href="#_12-18" aria-label="Permalink to &quot;12-18&quot;">​</a></h2><h3 id="什么是模板引擎" tabindex="-1">什么是模板引擎？ <a class="header-anchor" href="#什么是模板引擎" aria-label="Permalink to &quot;什么是模板引擎？&quot;">​</a></h3><p>模板引擎是一种将模板和数据结合起来生成 html 文档的工具，模板引擎可以将模板和数据结合起来生成 html 文档，然后将 html 文档返回给浏览器。</p><p>常见的模板引擎有：Freemarker、Thymeleaf、Velocity 等。</p><h2 id="_12-18-1" tabindex="-1">12-18 <a class="header-anchor" href="#_12-18-1" aria-label="Permalink to &quot;12-18&quot;">​</a></h2><h3 id="spring-boot-如何配置随机端口" tabindex="-1">Spring Boot 如何配置随机端口？ <a class="header-anchor" href="#spring-boot-如何配置随机端口" aria-label="Permalink to &quot;Spring Boot 如何配置随机端口？&quot;">​</a></h3><p>SpringBoot 可以通过 <code>server.port=0</code> 来配置随机端口，也可以通过 <code>server.port=\${random.int(1024,65535)}</code> 来配置随机端口。</p><h2 id="_12-17" tabindex="-1">12-17 <a class="header-anchor" href="#_12-17" aria-label="Permalink to &quot;12-17&quot;">​</a></h2><h3 id="spring-boot-有哪几种运行方式" tabindex="-1">Spring Boot 有哪几种运行方式？ <a class="header-anchor" href="#spring-boot-有哪几种运行方式" aria-label="Permalink to &quot;Spring Boot 有哪几种运行方式？&quot;">​</a></h3><p>SpringBoot 有三种运行方式，分别是打包运行、命令行运行和 Maven 插件运行。</p><h2 id="_12-16" tabindex="-1">12-16 <a class="header-anchor" href="#_12-16" aria-label="Permalink to &quot;12-16&quot;">​</a></h2><h3 id="为什么要用-springboot" tabindex="-1">为什么要用 SpringBoot？ <a class="header-anchor" href="#为什么要用-springboot" aria-label="Permalink to &quot;为什么要用 SpringBoot？&quot;">​</a></h3><p>SpringBoot 可以快速构建 Spring 应用程序，快速整合其他框架。并实现了对 Spring 的自动配置，且内置 Tomcat 应用服务器，能够简化 Spring 应用程序的初始搭建和开发过程。</p><h2 id="_12-15" tabindex="-1">12-15 <a class="header-anchor" href="#_12-15" aria-label="Permalink to &quot;12-15&quot;">​</a></h2><h3 id="spring-boot-支持哪些日志框架" tabindex="-1">Spring Boot 支持哪些日志框架？ <a class="header-anchor" href="#spring-boot-支持哪些日志框架" aria-label="Permalink to &quot;Spring Boot 支持哪些日志框架？&quot;">​</a></h3><p>SpringBoot 默认日志框架为 Logback，但是也支持其他日志框架，比如 Log4j、Log4j2、JUL（java.util.logging）和 Logback。</p><h2 id="_12-14" tabindex="-1">12-14 <a class="header-anchor" href="#_12-14" aria-label="Permalink to &quot;12-14&quot;">​</a></h2><h3 id="springbootapplication-由哪些注解组成" tabindex="-1">SpringBootApplication 由哪些注解组成？ <a class="header-anchor" href="#springbootapplication-由哪些注解组成" aria-label="Permalink to &quot;SpringBootApplication 由哪些注解组成？&quot;">​</a></h3><p><code>@SpringBootApplication</code> 注解源码如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Target</span><span style="color:#E1E4E8;">(ElementType.TYPE)</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Retention</span><span style="color:#E1E4E8;">(RetentionPolicy.RUNTIME)</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Documented</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Inherited</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">SpringBootConfiguration</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">EnableAutoConfiguration</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">ComponentScan</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">excludeFilters</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> { @</span><span style="color:#F97583;">Filter</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">type</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> FilterType.CUSTOM, </span><span style="color:#79B8FF;">classes</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> TypeExcludeFilter.class),</span></span>
<span class="line"><span style="color:#E1E4E8;">		@</span><span style="color:#F97583;">Filter</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">type</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> FilterType.CUSTOM, </span><span style="color:#79B8FF;">classes</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> AutoConfigurationExcludeFilter.class) })</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> @</span><span style="color:#F97583;">interface</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">SpringBootApplication</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    ......</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Target</span><span style="color:#24292E;">(ElementType.TYPE)</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Retention</span><span style="color:#24292E;">(RetentionPolicy.RUNTIME)</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Documented</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Inherited</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">SpringBootConfiguration</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">EnableAutoConfiguration</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">ComponentScan</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">excludeFilters</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> { @</span><span style="color:#D73A49;">Filter</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">type</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> FilterType.CUSTOM, </span><span style="color:#005CC5;">classes</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> TypeExcludeFilter.class),</span></span>
<span class="line"><span style="color:#24292E;">		@</span><span style="color:#D73A49;">Filter</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">type</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> FilterType.CUSTOM, </span><span style="color:#005CC5;">classes</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> AutoConfigurationExcludeFilter.class) })</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> @</span><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">SpringBootApplication</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    ......</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>该注解由 <code>@SpringBootConfiguration</code>、<code>@EnableAutoConfiguration</code> 和 <code>@ComponentScan</code> 注解组成。</p><ul><li><code>@SpringBootConfiguration</code> 注解标识一个配置类，该注解继承自 <code>@Configuration</code> 注解，用于定义配置类。</li><li><code>@EnableAutoConfiguration</code> 注解用于启用 SpringBoot 的自动配置特性。</li><li><code>@ComponentScan</code> 注解用于启用组件扫描，该注解继承自 <code>@ComponentScans</code> 注解，用于定义多个 <code>@ComponentScan</code> 注解。</li></ul><h2 id="_12-13" tabindex="-1">12-13 <a class="header-anchor" href="#_12-13" aria-label="Permalink to &quot;12-13&quot;">​</a></h2><h3 id="spring-boot-的核心注解是什么" tabindex="-1">Spring Boot 的核心注解是什么？ <a class="header-anchor" href="#spring-boot-的核心注解是什么" aria-label="Permalink to &quot;Spring Boot 的核心注解是什么？&quot;">​</a></h3><p>SpringBoot 核心注解是 <code>@SpringBootApplication</code>，该注解标识一个配置类，并同步启用自动配置以及组件扫描。是 SpringBoot 自动配置特性的核心。</p><h2 id="_12-12" tabindex="-1">12-12 <a class="header-anchor" href="#_12-12" aria-label="Permalink to &quot;12-12&quot;">​</a></h2><h3 id="spring-boot-是什么" tabindex="-1">Spring Boot 是什么？ <a class="header-anchor" href="#spring-boot-是什么" aria-label="Permalink to &quot;Spring Boot 是什么？&quot;">​</a></h3><p>根据 Spring 官网简介，SpringBoot 提供了丰富的 Spring 模块化支持，可以基于 SpringBoot 开发单个微服务，SpringBoot 可以快速构建基于 Spring 的应用程序。</p><p>它实现了自动配置，可以基于约定俗成的配置快速构建独立的 Spring 应用程序，简化了 Spring 应用程序的初始搭建和开发过程。</p><h2 id="_12-11" tabindex="-1">12-11 <a class="header-anchor" href="#_12-11" aria-label="Permalink to &quot;12-11&quot;">​</a></h2><h3 id="spring-mvc-框架有什么用" tabindex="-1">Spring MVC 框架有什么用？ <a class="header-anchor" href="#spring-mvc-框架有什么用" aria-label="Permalink to &quot;Spring MVC 框架有什么用？&quot;">​</a></h3><p>SpringMVC 解决了 V-C 交互的问题，即 V(View:视图) 和 C(Controller:控制器) 之间的交互问题。</p><p>用户可以通过视图将请求数据提交给服务器端的控制器，而控制器可以接收到相关数据后进行处理，最终，给予客户端某个视图，使得客户端得到响应结果。</p><h2 id="_12-10" tabindex="-1">12-10 <a class="header-anchor" href="#_12-10" aria-label="Permalink to &quot;12-10&quot;">​</a></h2><h3 id="spring-框架用到了哪些设计模式" tabindex="-1">Spring 框架用到了哪些设计模式？ <a class="header-anchor" href="#spring-框架用到了哪些设计模式" aria-label="Permalink to &quot;Spring 框架用到了哪些设计模式？&quot;">​</a></h3><ol><li>工厂方法：Spring 使用工厂方法模式通过 <code>BeanFactory</code>、<code>ApplicationContext</code> 创建 bean 实例。</li><li>单例模式：Spring 中的 bean 默认都是单例的。</li><li>代理模式：Spring AOP 功能的实现就是基于动态代理。</li><li>模板方法：Spring 中很多类都使用了模板方法模式，比如 <code>JdbcTemplate</code>、<code>RestTemplate</code> 等。</li><li>观察者模式：Spring 事件驱动模型就是观察者模式的一种实现。</li><li>适配器模式：Spring MVC 中的 <code>HandlerAdapter</code> 就是适配器模式的一种应用。</li><li>装饰器模式：Spring 中的 <code>BeanWrapperImpl</code> 就是装饰器模式的一种应用。</li><li>策略模式：Spring 中的 <code>InstantiationStrategy</code> 就是策略模式的一种应用。</li></ol><h2 id="_12-09" tabindex="-1">12-09 <a class="header-anchor" href="#_12-09" aria-label="Permalink to &quot;12-09&quot;">​</a></h2><h3 id="spring-支持哪些事务管理类型" tabindex="-1">Spring 支持哪些事务管理类型？ <a class="header-anchor" href="#spring-支持哪些事务管理类型" aria-label="Permalink to &quot;Spring 支持哪些事务管理类型？&quot;">​</a></h3><p>Spring 支持编程式事务管理和声明式事务管理。</p><ul><li>编程式事务可以满足在代码中显示的调用开启事务、提交事务、回滚事务的相关方法。</li><li>声明式事务是建立在 AOP 的基础之上，本质是对方法进行拦截，在目标方法之前创建或加入一个事务，在之后根据执行情况提交或回滚事务。</li></ul><h2 id="_12-08" tabindex="-1">12-08 <a class="header-anchor" href="#_12-08" aria-label="Permalink to &quot;12-08&quot;">​</a></h2><h3 id="为什么不推荐使用-autowired-注解注入-bean" tabindex="-1">为什么不推荐使用 <code>@Autowired</code> 注解注入 bean？ <a class="header-anchor" href="#为什么不推荐使用-autowired-注解注入-bean" aria-label="Permalink to &quot;为什么不推荐使用 \`@Autowired\` 注解注入 bean？&quot;">​</a></h3><p><code>@Autowired</code> 注解是 Spring 提供的，如果使用了这个注解，那么就会和 Spring 框架产生了耦合，不利于代码的解耦。</p><h2 id="_12-07" tabindex="-1">12-07 <a class="header-anchor" href="#_12-07" aria-label="Permalink to &quot;12-07&quot;">​</a></h2><h3 id="spring-自动装配有哪些方式" tabindex="-1">Spring 自动装配有哪些方式？ <a class="header-anchor" href="#spring-自动装配有哪些方式" aria-label="Permalink to &quot;Spring 自动装配有哪些方式？&quot;">​</a></h3><p>Spring 自动装配有三种方式，分别是 <code>byName</code>、<code>byType</code> 和 <code>constructor</code>。</p><ul><li><code>byName</code>：根据 bean 的名称进行装配，如果 bean 的名称和属性名称一致，那么就会进行装配。</li><li><code>byType</code>：根据 bean 的类型进行装配，如果 bean 的类型和属性类型一致，那么就会进行装配。</li><li><code>constructor</code>：根据构造器进行装配，如果 bean 的构造器参数类型和属性类型一致，那么就会进行装配。</li></ul><h2 id="_12-6" tabindex="-1">12-6 <a class="header-anchor" href="#_12-6" aria-label="Permalink to &quot;12-6&quot;">​</a></h2><h3 id="spring-装配是指什么" tabindex="-1">Spring 装配是指什么？ <a class="header-anchor" href="#spring-装配是指什么" aria-label="Permalink to &quot;Spring 装配是指什么？&quot;">​</a></h3><p>Spring 装配是指创建应用对象之间协作关系的行为，Spring 通过依赖注入（DI）来进行装配。</p><h2 id="_12-5" tabindex="-1">12-5 <a class="header-anchor" href="#_12-5" aria-label="Permalink to &quot;12-5&quot;">​</a></h2><h3 id="spring-怎么注入-java-集合类型" tabindex="-1">Spring 怎么注入 Java 集合类型？ <a class="header-anchor" href="#spring-怎么注入-java-集合类型" aria-label="Permalink to &quot;Spring 怎么注入 Java 集合类型？&quot;">​</a></h3><p>Spring 可以通过 <code>util</code> 命名空间注入集合类型，比如 <code>List</code>、<code>Set</code>、<code>Map</code> 等。</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">util:list</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">id</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;list&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">value</span><span style="color:#E1E4E8;">&gt;1&lt;/</span><span style="color:#85E89D;">value</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">value</span><span style="color:#E1E4E8;">&gt;2&lt;/</span><span style="color:#85E89D;">value</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">value</span><span style="color:#E1E4E8;">&gt;3&lt;/</span><span style="color:#85E89D;">value</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">util:list</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">util:list</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">id</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;list&quot;</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">value</span><span style="color:#24292E;">&gt;1&lt;/</span><span style="color:#22863A;">value</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">value</span><span style="color:#24292E;">&gt;2&lt;/</span><span style="color:#22863A;">value</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">value</span><span style="color:#24292E;">&gt;3&lt;/</span><span style="color:#22863A;">value</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">util:list</span><span style="color:#24292E;">&gt;</span></span></code></pre></div><h2 id="_12-4" tabindex="-1">12-4 <a class="header-anchor" href="#_12-4" aria-label="Permalink to &quot;12-4&quot;">​</a></h2><h3 id="spring-required-注解有什么用" tabindex="-1">Spring @Required 注解有什么用？ <a class="header-anchor" href="#spring-required-注解有什么用" aria-label="Permalink to &quot;Spring @Required 注解有什么用？&quot;">​</a></h3><p><code>@Required</code> 注解可以用在字段、方法和构造器上，用来检查 bean 的必需属性是否已经被设置。</p><p>如果设置了 required 属性为 true，那么当检查到 bean 的属性没有被设置时，会抛出 <code>BeanInitializationException</code> 异常。</p><h2 id="_12-3" tabindex="-1">12-3 <a class="header-anchor" href="#_12-3" aria-label="Permalink to &quot;12-3&quot;">​</a></h2><h3 id="spring-autowired-注解有什么用" tabindex="-1">Spring @Autowired 注解有什么用？ <a class="header-anchor" href="#spring-autowired-注解有什么用" aria-label="Permalink to &quot;Spring @Autowired 注解有什么用？&quot;">​</a></h3><p><code>@Autowired</code> 注解可以用在字段、构造器、方法和参数上，让 Spring 完成 bean 的自动装配工作。</p><p>默认按照类匹配的方式进行装配，如果匹配到多个 bean，那么会按照字段名或者参数名进行匹配。 使用 <code>@Qualifier</code> 注解可以指定 bean 的名称，从而避免歧义。</p><h2 id="_12-2" tabindex="-1">12-2 <a class="header-anchor" href="#_12-2" aria-label="Permalink to &quot;12-2&quot;">​</a></h2><h3 id="spring-bean-为什么默认为单例" tabindex="-1">Spring bean 为什么默认为单例？ <a class="header-anchor" href="#spring-bean-为什么默认为单例" aria-label="Permalink to &quot;Spring bean 为什么默认为单例？&quot;">​</a></h3><p>Spring bean 默认为单例，这是因为 Spring 容器中的 bean 默认都是单例的，这样做的好处是减少了创建 bean 的开销，节省了内存资源。</p><p>但是单例的 bean 也有一些缺点，比如线程安全问题，如果一个单例的 bean 中有一个成员变量，如果这个成员变量是可变的，那么就会出现线程安全问题。</p><h2 id="_12-1" tabindex="-1">12-1 <a class="header-anchor" href="#_12-1" aria-label="Permalink to &quot;12-1&quot;">​</a></h2><h3 id="请描述-bean-的作用域。" tabindex="-1">请描述 bean 的作用域。 <a class="header-anchor" href="#请描述-bean-的作用域。" aria-label="Permalink to &quot;请描述 bean 的作用域。&quot;">​</a></h3><p>Spring 创建的 Bean 默认是单利的，每一个实例只会被创建一次，通过 <code>getBean()</code> 方法获取的是同一个实例。可以直接通过 scope 来制定一个 Bean 的作用域。</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">&lt;!-- 作用域：prototype --&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">bean</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">name</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;accountDao&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">scope</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;prototype&quot;</span><span style="color:#E1E4E8;">     </span><span style="color:#B392F0;">class</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;com.zejian.spring.springIoc.dao.impl.AccountDaoImpl&quot;</span><span style="color:#E1E4E8;">/&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">&lt;!-- 作用域：prototype --&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">bean</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">name</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;accountDao&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">scope</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;prototype&quot;</span><span style="color:#24292E;">     </span><span style="color:#6F42C1;">class</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;com.zejian.spring.springIoc.dao.impl.AccountDaoImpl&quot;</span><span style="color:#24292E;">/&gt;</span></span></code></pre></div>`,80),e=[p];function t(r,c,i,E,y,d){return a(),n("div",null,e)}const g=s(l,[["render",t]]);export{u as __pageData,g as default};
