import{_ as a,o as s,c as e,Q as n}from"./chunks/framework.66ebbe0f.js";const h=JSON.parse('{"title":"","description":"","frontmatter":{"readingTime":false,"hidden":true},"headers":[],"relativePath":"question-by-day/2023/12.md","filePath":"question-by-day/2023/12.md","lastUpdated":1701940036000}'),o={name:"question-by-day/2023/12.md"},l=n(`<h2 id="_12-08" tabindex="-1">12-08 <a class="header-anchor" href="#_12-08" aria-label="Permalink to &quot;12-08&quot;">​</a></h2><h3 id="为什么不推荐使用-autowired-注解注入-bean" tabindex="-1">为什么不推荐使用 <code>@Autowired</code> 注解注入 bean？ <a class="header-anchor" href="#为什么不推荐使用-autowired-注解注入-bean" aria-label="Permalink to &quot;为什么不推荐使用 \`@Autowired\` 注解注入 bean？&quot;">​</a></h3><p><code>@Autowired</code> 注解是 Spring 提供的，如果使用了这个注解，那么就会和 Spring 框架产生了耦合，不利于代码的解耦。</p><h2 id="_12-07" tabindex="-1">12-07 <a class="header-anchor" href="#_12-07" aria-label="Permalink to &quot;12-07&quot;">​</a></h2><h3 id="spring-自动装配有哪些方式" tabindex="-1">Spring 自动装配有哪些方式？ <a class="header-anchor" href="#spring-自动装配有哪些方式" aria-label="Permalink to &quot;Spring 自动装配有哪些方式？&quot;">​</a></h3><p>Spring 自动装配有三种方式，分别是 <code>byName</code>、<code>byType</code> 和 <code>constructor</code>。</p><ul><li><code>byName</code>：根据 bean 的名称进行装配，如果 bean 的名称和属性名称一致，那么就会进行装配。</li><li><code>byType</code>：根据 bean 的类型进行装配，如果 bean 的类型和属性类型一致，那么就会进行装配。</li><li><code>constructor</code>：根据构造器进行装配，如果 bean 的构造器参数类型和属性类型一致，那么就会进行装配。</li></ul><h2 id="_12-6" tabindex="-1">12-6 <a class="header-anchor" href="#_12-6" aria-label="Permalink to &quot;12-6&quot;">​</a></h2><h3 id="spring-装配是指什么" tabindex="-1">Spring 装配是指什么？ <a class="header-anchor" href="#spring-装配是指什么" aria-label="Permalink to &quot;Spring 装配是指什么？&quot;">​</a></h3><p>Spring 装配是指创建应用对象之间协作关系的行为，Spring 通过依赖注入（DI）来进行装配。</p><h2 id="_12-5" tabindex="-1">12-5 <a class="header-anchor" href="#_12-5" aria-label="Permalink to &quot;12-5&quot;">​</a></h2><h3 id="spring-怎么注入-java-集合类型" tabindex="-1">Spring 怎么注入 Java 集合类型？ <a class="header-anchor" href="#spring-怎么注入-java-集合类型" aria-label="Permalink to &quot;Spring 怎么注入 Java 集合类型？&quot;">​</a></h3><p>Spring 可以通过 <code>util</code> 命名空间注入集合类型，比如 <code>List</code>、<code>Set</code>、<code>Map</code> 等。</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">util:list</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">id</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;list&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">value</span><span style="color:#E1E4E8;">&gt;1&lt;/</span><span style="color:#85E89D;">value</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">value</span><span style="color:#E1E4E8;">&gt;2&lt;/</span><span style="color:#85E89D;">value</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">value</span><span style="color:#E1E4E8;">&gt;3&lt;/</span><span style="color:#85E89D;">value</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">util:list</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">util:list</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">id</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;list&quot;</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">value</span><span style="color:#24292E;">&gt;1&lt;/</span><span style="color:#22863A;">value</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">value</span><span style="color:#24292E;">&gt;2&lt;/</span><span style="color:#22863A;">value</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">value</span><span style="color:#24292E;">&gt;3&lt;/</span><span style="color:#22863A;">value</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">util:list</span><span style="color:#24292E;">&gt;</span></span></code></pre></div><h2 id="_12-4" tabindex="-1">12-4 <a class="header-anchor" href="#_12-4" aria-label="Permalink to &quot;12-4&quot;">​</a></h2><h3 id="spring-required-注解有什么用" tabindex="-1">Spring @Required 注解有什么用？ <a class="header-anchor" href="#spring-required-注解有什么用" aria-label="Permalink to &quot;Spring @Required 注解有什么用？&quot;">​</a></h3><p><code>@Required</code> 注解可以用在字段、方法和构造器上，用来检查 bean 的必需属性是否已经被设置。</p><p>如果设置了 required 属性为 true，那么当检查到 bean 的属性没有被设置时，会抛出 <code>BeanInitializationException</code> 异常。</p><h2 id="_12-3" tabindex="-1">12-3 <a class="header-anchor" href="#_12-3" aria-label="Permalink to &quot;12-3&quot;">​</a></h2><h3 id="spring-autowired-注解有什么用" tabindex="-1">Spring @Autowired 注解有什么用？ <a class="header-anchor" href="#spring-autowired-注解有什么用" aria-label="Permalink to &quot;Spring @Autowired 注解有什么用？&quot;">​</a></h3><p><code>@Autowired</code> 注解可以用在字段、构造器、方法和参数上，让 Spring 完成 bean 的自动装配工作。</p><p>默认按照类匹配的方式进行装配，如果匹配到多个 bean，那么会按照字段名或者参数名进行匹配。 使用 <code>@Qualifier</code> 注解可以指定 bean 的名称，从而避免歧义。</p><h2 id="_12-2" tabindex="-1">12-2 <a class="header-anchor" href="#_12-2" aria-label="Permalink to &quot;12-2&quot;">​</a></h2><h3 id="spring-bean-为什么默认为单例" tabindex="-1">Spring bean 为什么默认为单例？ <a class="header-anchor" href="#spring-bean-为什么默认为单例" aria-label="Permalink to &quot;Spring bean 为什么默认为单例？&quot;">​</a></h3><p>Spring bean 默认为单例，这是因为 Spring 容器中的 bean 默认都是单例的，这样做的好处是减少了创建 bean 的开销，节省了内存资源。</p><p>但是单例的 bean 也有一些缺点，比如线程安全问题，如果一个单例的 bean 中有一个成员变量，如果这个成员变量是可变的，那么就会出现线程安全问题。</p><h2 id="_12-1" tabindex="-1">12-1 <a class="header-anchor" href="#_12-1" aria-label="Permalink to &quot;12-1&quot;">​</a></h2><h3 id="请描述-bean-的作用域。" tabindex="-1">请描述 bean 的作用域。 <a class="header-anchor" href="#请描述-bean-的作用域。" aria-label="Permalink to &quot;请描述 bean 的作用域。&quot;">​</a></h3><p>Spring 创建的 Bean 默认是单利的，每一个实例只会被创建一次，通过 <code>getBean()</code> 方法获取的是同一个实例。可以直接通过 scope 来制定一个 Bean 的作用域。</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">&lt;!-- 作用域：prototype --&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">bean</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">name</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;accountDao&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">scope</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;prototype&quot;</span><span style="color:#E1E4E8;">     </span><span style="color:#B392F0;">class</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;com.zejian.spring.springIoc.dao.impl.AccountDaoImpl&quot;</span><span style="color:#E1E4E8;">/&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">&lt;!-- 作用域：prototype --&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">bean</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">name</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;accountDao&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">scope</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;prototype&quot;</span><span style="color:#24292E;">     </span><span style="color:#6F42C1;">class</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;com.zejian.spring.springIoc.dao.impl.AccountDaoImpl&quot;</span><span style="color:#24292E;">/&gt;</span></span></code></pre></div>`,30),t=[l];function p(r,c,i,d,u,E){return s(),e("div",null,t)}const b=a(o,[["render",p]]);export{h as __pageData,b as default};
