import{_ as a,o as s,c as n,Q as l}from"./chunks/framework.85e28f7f.js";const u=JSON.parse('{"title":"","description":"","frontmatter":{"readingTime":false,"hidden":true},"headers":[],"relativePath":"question-by-day/2023/10.md","filePath":"question-by-day/2023/10.md","lastUpdated":1699435557000}'),o={name:"question-by-day/2023/10.md"},p=l(`<h2 id="_10-31" tabindex="-1">10-31 <a class="header-anchor" href="#_10-31" aria-label="Permalink to &quot;10-31&quot;">​</a></h2><h3 id="什么是原子操作" tabindex="-1">什么是原子操作？ <a class="header-anchor" href="#什么是原子操作" aria-label="Permalink to &quot;什么是原子操作？&quot;">​</a></h3><p>原子操作（atomic operation）意为”不可被中断的一个或一系列操作” 。处理器使用基于对缓存加锁或总线加锁的方式来实现多处理器之间的原子操作。 在Java中可以通过锁和循环CAS的方式来实现原子操作。CAS操作—— <code>Compare &amp; Set</code>，或是 <code>Compare &amp; Swap</code>，现在几乎所有的CPU指令都支持CAS的原子操作。</p><p>原子操作是指一个不受其他操作影响的操作任务单元。原子操作是在多线程环境下避免数据不一致必须的手段。 int++并不是一个原子操作，所以当一个线程读取它的值并加1时，另外一个线程有可能会读到之前的值，这就会引发错误。</p><p>为了解决这个问题，必须保证增加操作是原子的，在JDK1.5之前我们可以使用同步技术来做到这一点。 到JDK1.5，<code>java.util.concurrent.atomic</code> 包提供了 int 和 long 类型的原子包装类，它们可以自动的保证对于他们的操作是原子的并且不需要使用同步。</p><h2 id="_10-30" tabindex="-1">10-30 <a class="header-anchor" href="#_10-30" aria-label="Permalink to &quot;10-30&quot;">​</a></h2><h3 id="为什么使用executor框架" tabindex="-1">为什么使用Executor框架？ <a class="header-anchor" href="#为什么使用executor框架" aria-label="Permalink to &quot;为什么使用Executor框架？&quot;">​</a></h3><ol><li>能复用已存在并空闲的线程从而减少线程对象的创建从而减少了消亡线程的开销。</li><li>可有效控制最大并发线程数，提高系统资源使用率，同时避免过多资源竞争。</li><li>框架中已经有定时、定期、单线程、并发数控制等功能。</li></ol><blockquote><p>综上所述使用线程池框架 Executor 能更好的管理线程、提供系统资源使用率。</p></blockquote><h2 id="_10-29" tabindex="-1">10-29 <a class="header-anchor" href="#_10-29" aria-label="Permalink to &quot;10-29&quot;">​</a></h2><h3 id="什么是-executor-框架" tabindex="-1">什么是 Executor 框架？ <a class="header-anchor" href="#什么是-executor-框架" aria-label="Permalink to &quot;什么是 Executor 框架？&quot;">​</a></h3><p>线程池就是线程的集合，线程池集中管理线程，以实现线程的重用，降低资源消耗，提高响应速度等。线程用于执行异步任务， 单个的线程既是工作单元也是执行机制，从JDK1.5开始，为了把工作单元与执行机制分离开，Executor框架诞生了，他是一个用于统一创建与运行的接口。 Executor框架实现的就是线程池的功能。</p><p>Executor框架包括3大部分：</p><ul><li>任务。也就是工作单元，包括被执行任务需要实现的接口：Runnable接口或者Callable接口；</li><li>任务的执行。也就是把任务分派给多个线程的执行机制，包括Executor接口及继承自Executor接口的ExecutorService接口。</li><li>异步计算的结果。包括Future接口及实现了Future接口的FutureTask类。</li></ul><h2 id="_10-28" tabindex="-1">10-28 <a class="header-anchor" href="#_10-28" aria-label="Permalink to &quot;10-28&quot;">​</a></h2><h3 id="什么是线程组" tabindex="-1">什么是线程组？ <a class="header-anchor" href="#什么是线程组" aria-label="Permalink to &quot;什么是线程组？&quot;">​</a></h3><p>线程组，顾名思义，就是线程的组，逻辑类似项目组，用于管理项目成员，线程组就是用来管理线程的。线程组中可以有线程对象， 也可以有线程组，组中还可以有线程，这样的组织结构有点类似于树的形式。 每个线程都会有一个线程组，如果没有设置将会有些默认的初始化设置。</p><p>虽然线程组看上去很有用处，实际上现在的程序开发中已经不推荐使用它了，主要有两个原因：</p><ol><li><p>线程组ThreadGroup对象中比较有用的方法是stop、resume、suspend等方法，由于这几个方法会导致线程的安全问题（主要是死锁问题）， 已经被官方废弃掉了，所以线程组本身的应用价值就大打折扣了。</p></li><li><p>线程组ThreadGroup不是线程安全的，这在使用过程中获取的信息并不全是及时有效的，这就降低了它的统计使用价值。</p></li></ol><blockquote><p>虽然线程组现在已经不被推荐使用了（推荐使用线程池），但是它在线程的异常处理方面还是做出了一定的贡献。当线程运行过程中出现异常情况时， 在某些情况下JVM会把线程的控制权交到线程关联的线程组对象上来进行处理。所以对线程组的了解还是有一定必要的。</p></blockquote><h2 id="_10-27" tabindex="-1">10-27 <a class="header-anchor" href="#_10-27" aria-label="Permalink to &quot;10-27&quot;">​</a></h2><h3 id="产生死锁的必要条件。" tabindex="-1">产生死锁的必要条件。 <a class="header-anchor" href="#产生死锁的必要条件。" aria-label="Permalink to &quot;产生死锁的必要条件。&quot;">​</a></h3><ul><li>互斥条件：共享资源被一个线程占用</li><li>请求与保持条件（占有且等待）：一个进程因请求资源而阻塞时，对已获得的资源保持不释放</li><li>不剥夺条件：进程已获得资源，在未使用完之前，不能强行剥夺</li><li>循环等待条件：多个线程之前循环等待资源，必须是循环的互相等待</li></ul><h2 id="_10-26" tabindex="-1">10-26 <a class="header-anchor" href="#_10-26" aria-label="Permalink to &quot;10-26&quot;">​</a></h2><h3 id="什么是上下文切换" tabindex="-1">什么是上下文切换？ <a class="header-anchor" href="#什么是上下文切换" aria-label="Permalink to &quot;什么是上下文切换？&quot;">​</a></h3><p>由于时分复用的存在，CPU 为每个线程分配时间片并轮转，从一个线程切换到另一个线程，这个过程需要先保存当前线程的状态， 然后加载新线程的状态，这就是上下文切换。</p><p>上下文切换通常是计算密集型的，会消耗大量 CPU 的时间。而 Linux 的一个特性就是上下文切换和模式切换的消耗非常少。</p><h2 id="_10-25" tabindex="-1">10-25 <a class="header-anchor" href="#_10-25" aria-label="Permalink to &quot;10-25&quot;">​</a></h2><h3 id="如何停止一个正在运行的线程" tabindex="-1">如何停止一个正在运行的线程？ <a class="header-anchor" href="#如何停止一个正在运行的线程" aria-label="Permalink to &quot;如何停止一个正在运行的线程？&quot;">​</a></h3><p>要停止一个正在运行的线程，可以使用 <code>Thread.interrupt()</code> 方法来中断线程，或者使用 <code>Thread.stop()</code> 方法来停止线程。</p><h2 id="_10-24" tabindex="-1">10-24 <a class="header-anchor" href="#_10-24" aria-label="Permalink to &quot;10-24&quot;">​</a></h2><h3 id="线程不安全的本质什么" tabindex="-1">线程不安全的本质什么? <a class="header-anchor" href="#线程不安全的本质什么" aria-label="Permalink to &quot;线程不安全的本质什么?&quot;">​</a></h3><p>由于各个硬件设备的数据处理速度有极大差异，为了处理 CPU、内存、I/O 设备之间的速度差异，计算机体系结构、操作系统以及程序编译过程都做出了相应的优化。</p><ul><li>CPU 增加了缓存，以均衡与内存之间的速度差异，这导致了 <code>可见性问题</code>。</li><li>操作系统增加了进程、线程，以分时复用 CPU，这导致了 <code>原子性问题</code>。</li><li>编译器优化指令执行次序，使得缓存能够得到更加合理的利用，这导致了 <code>有序性问题</code>。</li></ul><h2 id="_10-23" tabindex="-1">10-23 <a class="header-anchor" href="#_10-23" aria-label="Permalink to &quot;10-23&quot;">​</a></h2><h3 id="aop-的实现方式" tabindex="-1">AOP 的实现方式？ <a class="header-anchor" href="#aop-的实现方式" aria-label="Permalink to &quot;AOP 的实现方式？&quot;">​</a></h3><ul><li><strong>静态代理：</strong> 代理类在编译阶段生成，在编译阶段将通知织入Java字节码中，也称编译时增强。AspectJ使用的是静态代理。</li><li><strong>动态代理：</strong> 代理类在程序运行时创建，AOP框架不会去修改字节码，而是在内存中临时生成一个代理对象，在运行期间对业务方法进行增强，不会生成新类。</li></ul><h2 id="_10-22" tabindex="-1">10-22 <a class="header-anchor" href="#_10-22" aria-label="Permalink to &quot;10-22&quot;">​</a></h2><h3 id="什么是-aop" tabindex="-1">什么是 AOP？ <a class="header-anchor" href="#什么是-aop" aria-label="Permalink to &quot;什么是 AOP？&quot;">​</a></h3><p>AOP （Aspect oriented programming）区别于OOP （面向对象编程），是对 OOP 的一种补充。 它会将事务管理、日志记录等公共业务逻辑封装为切面单独处理，与业务代码分割。减少重复性代码，降低系统耦合性。</p><h2 id="_10-21" tabindex="-1">10-21 <a class="header-anchor" href="#_10-21" aria-label="Permalink to &quot;10-21&quot;">​</a></h2><h3 id="什么是-ioc" tabindex="-1">什么是 IOC？ <a class="header-anchor" href="#什么是-ioc" aria-label="Permalink to &quot;什么是 IOC？&quot;">​</a></h3><p>IOC （Inversion of Control）控制反转。指对象的生命周期控制通过反射由 <code>Spring 容器</code> 处理，包括对象的初始化、创建、销毁等。 能够降低类之间的耦合。</p><p>IOC 又称为 DI（依赖注入），是指在 Spring 创建对象的过程中，把对象依赖的属性注入到对象中。有两种方式：构造器注入和属性注入。</p><h2 id="_10-20" tabindex="-1">10-20 <a class="header-anchor" href="#_10-20" aria-label="Permalink to &quot;10-20&quot;">​</a></h2><h3 id="请简单介绍java8新特性" tabindex="-1">请简单介绍JAVA8新特性？ <a class="header-anchor" href="#请简单介绍java8新特性" aria-label="Permalink to &quot;请简单介绍JAVA8新特性？&quot;">​</a></h3><blockquote><p>JAVA8 已经名义上停止维护了，但是 JAVA8 新特性还是面试经常会问到的点。就是为了考察 <code>函数式编程</code> 以及 <code>stream 流</code> 的掌握情况。</p></blockquote><ul><li><p><strong>Lambda 表达式：</strong> JAVA8 之后允许使用更简洁的箭头函数创建函数式接口的实例，在功能上与匿名内部类类似，但是更加简洁。</p></li><li><p><strong>Stream 流操作：</strong> Stream 流允许开发者对集合或数组进行链状流式操作，基于函数式编程模型。分为中间操作及终结操作。</p></li><li><p><strong>Optional 类：</strong> 使用 Optional 可以写出更优雅的代码来避免空指针异常。 Optional 类似于包装类，将具体的数据封装到Optional对象内部。我们可以使用 Optional 中封装好的方法操作封装的数据。优雅的避免空指针异常。</p></li></ul><h2 id="_10-19" tabindex="-1">10-19 <a class="header-anchor" href="#_10-19" aria-label="Permalink to &quot;10-19&quot;">​</a></h2><h3 id="integer和int的区别" tabindex="-1">Integer和int的区别？ <a class="header-anchor" href="#integer和int的区别" aria-label="Permalink to &quot;Integer和int的区别？&quot;">​</a></h3><p>Java 虽然宣称一切都是对象，但原始数据类型是例外。 int 是整形数字，是 java 的8个原始数据类型（Primitive Types）（char、boolean、byte、short、int、long、float、double）之一。 在 java API 中有对应的包装类，分别是Character、Boolean、Byte、Short、Integer、Long、Float、Double。</p><p>Integer 是 int 对应的包装类，它有一个int类型的字段存储数据，并且提供了基本操作，比如数学运算、int和字符串之间转换等。 在 java 5 中引入了自动装箱和自动拆箱功能（boxing/unboxing），java 可以根据上下文，自动进行转换，极大地简化了相关编程。 javac自动把装箱转换为Integer.valueOf(),把拆箱替换为Integer.intValue()。</p><p>自动装箱实际上算是一种语法糖。什么是语法糖？可以简单理解为java平台为我们自动进行了一些转换，保证不同的写法在运行时等价， 他们发生在编译阶段，也就是生产的字节码是一致的。</p><p>原始数据类型和 java 泛型并不能配合使用。因为 java 的泛型某种程度上可以算作伪泛型，它完全是一种编译期的技巧， java 编译期会自动将类型转换为对应的特定类型。这就决定了使用泛型，必须保证相应类型可以转换为 Object。</p><h2 id="_10-18" tabindex="-1">10-18 <a class="header-anchor" href="#_10-18" aria-label="Permalink to &quot;10-18&quot;">​</a></h2><h3 id="抽象类和接口的区别" tabindex="-1">抽象类和接口的区别？ <a class="header-anchor" href="#抽象类和接口的区别" aria-label="Permalink to &quot;抽象类和接口的区别？&quot;">​</a></h3><ol><li><p>一个类可以实现多个接口，但只能继承一个抽象类。接口本身可以通过 extends 关键字扩展多个接口。</p></li><li><p>抽象类可以有构造方法，接口中不能有构造方法。</p></li><li><p>抽象类中不一定都是抽象方法，也可以全是具体方法（非抽象方法）。在 Java8 之前，接口中的所有方法必须是抽象的。但Java8的时候，接口可以有默认方法和静态方法。</p></li><li><p>接口中只能有 static、final 变量，不能有其他变量，而抽象类中不一定。</p></li><li><p>接口中的方法和变量默认修饰符为 public（写不写都是public）， 而抽象类中的方法可以是 public，protected 和默认类型（抽象方法就是为了被重写所以不能是 private 修饰）</p></li></ol><h2 id="_10-17" tabindex="-1">10-17 <a class="header-anchor" href="#_10-17" aria-label="Permalink to &quot;10-17&quot;">​</a></h2><h3 id="构造器是否可被重写" tabindex="-1">构造器是否可被重写？ <a class="header-anchor" href="#构造器是否可被重写" aria-label="Permalink to &quot;构造器是否可被重写？&quot;">​</a></h3><p>重写是子类覆盖父类的方法，而构造器名称与类名相同，不可能存在重写的概念。</p><p>但是在一个类中，是可以存在多个参数不同的构造器的，这是构造器的重载。</p><h2 id="_10-16" tabindex="-1">10-16 <a class="header-anchor" href="#_10-16" aria-label="Permalink to &quot;10-16&quot;">​</a></h2><h3 id="请描述-和-的区别。" tabindex="-1">请描述 &amp; 和 &amp;&amp; 的区别。 <a class="header-anchor" href="#请描述-和-的区别。" aria-label="Permalink to &quot;请描述 &amp; 和 &amp;&amp; 的区别。&quot;">​</a></h3><p><strong>相同点：</strong><code>&amp;</code> 和 <code>&amp;&amp;</code> 都可以用作逻辑与的运算符，表示逻辑与（and）。</p><p><strong>不同点：</strong></p><p>1、<code>&amp;&amp;</code> 具有短路的功能，而 <code>&amp;</code> 不具备短路功能。</p><p>2、当 <code>&amp;</code> 运算符两边的表达式的结果都为 true 时，整个运算结果才为 true。而&amp;&amp;运算符第一个表达式为 false 时，则结果为 false，不再计算第二个表达式。</p><p>3、<code>&amp;</code> 还可以用作位运算符，当 <code>&amp;</code> 操作符两边的表达式不是boolean类型时，<code>&amp;</code> 表示按位与操作， 我们通常使用 0x0f 来与一个整数进行&amp;运算，来获取该整数的最低4个 bit 位，例如：0x31 &amp; 0x0f 的结果为 0x01。</p><h2 id="_10-15" tabindex="-1">10-15 <a class="header-anchor" href="#_10-15" aria-label="Permalink to &quot;10-15&quot;">​</a></h2><h3 id="请描述面向对象的特征。" tabindex="-1">请描述面向对象的特征。 <a class="header-anchor" href="#请描述面向对象的特征。" aria-label="Permalink to &quot;请描述面向对象的特征。&quot;">​</a></h3><p>面向对象有三大特征：<code>继承</code>、<code>封装</code>、<code>多态</code></p><p>如果是四大特征：<code>继承</code>、<code>封装</code>、<code>多态</code>、<code>抽象</code></p><p><strong>继承：</strong> 在定义和实现一个类的时候，可以在一个已经存在的类的基础之上来进行，把这个已经存在的类所定义的内容作为自己的内容， 并可以加入若干新的内容，或修改原来的方法使之更适合特殊的需要，这就是继承。比如，遗产的继承。 <strong>封装：</strong> 面向对象的封装性指的是将对象封装成一个高度自治和相对封闭的个体，对象状态（属性）由这个对象自己的行为（方法）来读取和改变 <strong>多态：</strong> 多态指的是程序中定义的引用变量所指向的具体类型和通过该引用变量发出的方法调用在编程时并不确定，而是在程序运行期间才确定， 即一个引用变量到底会指向哪个类的实例对象，该引用变量发出的方法调用到底在哪个类中实现的方法，必须在由程序运营期间才能决定。 <strong>抽象：</strong> 抽象就是找出一些事物的相似和共性之处，然后将这些事物归为一个类，这个类只考虑这些事物的相似和共性之处， 并且会忽略与当前主题和目标无关的那些方面，将注意力集中在与当前目标有关的方面。就是把现实生活的对象，抽象为类。</p><h2 id="_10-14" tabindex="-1">10-14 <a class="header-anchor" href="#_10-14" aria-label="Permalink to &quot;10-14&quot;">​</a></h2><h3 id="java-中-throw-和-throws-区别" tabindex="-1">Java 中 throw 和 throws 区别？ <a class="header-anchor" href="#java-中-throw-和-throws-区别" aria-label="Permalink to &quot;Java 中 throw 和 throws 区别？&quot;">​</a></h3><ul><li><code>throw</code> 是语句抛出的一个异常。</li><li><code>throws</code> 是方法可能抛出异常的声明。</li></ul><p>两者都是“消极处理异常”的方式（指抛出或可能抛出异常）。</p><h2 id="_10-13" tabindex="-1">10-13 <a class="header-anchor" href="#_10-13" aria-label="Permalink to &quot;10-13&quot;">​</a></h2><h3 id="运行时异常与受检异常有何异同" tabindex="-1">运行时异常与受检异常有何异同？ <a class="header-anchor" href="#运行时异常与受检异常有何异同" aria-label="Permalink to &quot;运行时异常与受检异常有何异同？&quot;">​</a></h3><p>所有异常都继承自 <code>java.lang.Throwable</code>，它有两个直接的子类 Error 与 Exception。</p><p>Java Compiler 要求所有的 Exception 要么被 catch ，要么被 throw，除非这是一个 RuntimeExeption。</p><p>**受检异常（Checked Exception）**是在编译时期有编译器检测的异常，该异常必须要被处理。受检异常继承于Exception。</p><p>**非受检异常（Unchecked Exception）**是在运行时期的异常，即编译器不会检测异常，需要时也可以捕获异常。非受检异常继承于RuntimeException。</p><h2 id="_10-12" tabindex="-1">10-12 <a class="header-anchor" href="#_10-12" aria-label="Permalink to &quot;10-12&quot;">​</a></h2><h3 id="是否可以继承string类" tabindex="-1">是否可以继承String类？ <a class="header-anchor" href="#是否可以继承string类" aria-label="Permalink to &quot;是否可以继承String类？&quot;">​</a></h3><p>String 类是不能被继承的，因为他是被final关键字修饰的。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">String</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">implements</span><span style="color:#E1E4E8;"> java.io.</span><span style="color:#B392F0;">Serializable</span><span style="color:#E1E4E8;">, </span><span style="color:#B392F0;">Comparable</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">&gt;, </span><span style="color:#B392F0;">CharSequence</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">               </span><span style="color:#B392F0;">Constable</span><span style="color:#E1E4E8;">, </span><span style="color:#B392F0;">ConstantDesc</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  ......</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">String</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">implements</span><span style="color:#24292E;"> java.io.</span><span style="color:#6F42C1;">Serializable</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">Comparable</span><span style="color:#24292E;">&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt;, </span><span style="color:#6F42C1;">CharSequence</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">               </span><span style="color:#6F42C1;">Constable</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">ConstantDesc</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  ......</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h2 id="_10-11" tabindex="-1">10-11 <a class="header-anchor" href="#_10-11" aria-label="Permalink to &quot;10-11&quot;">​</a></h2><h3 id="string-类的长度有限制吗" tabindex="-1">String 类的长度有限制吗？ <a class="header-anchor" href="#string-类的长度有限制吗" aria-label="Permalink to &quot;String 类的长度有限制吗？&quot;">​</a></h3><p>String 是由一个字符数组 <code>char[]</code> 来存储的，由于数组的长度及索引是整数且 String 类中返回字符串长度的方法 <code>length()</code> 的返回值也是 int ， 所以通过查看 java 源码中的类 Integer 我们可以看到 Integer 的最大范围是<code>2^31 -1</code>, 由于数组是从0开始的，所以数组的最大长度可以使【0~2^31】通过计算是大概4GB。</p><p>但是通过翻阅 java 虚拟机手册对 class 文件格式的定义以及常量池中对 String 类型的结构体定义我们可以知道对于索引定义了 u2，就是无符号占2个字节， 2个字节可以表示的最大范围是 <code>2^16 -1 = 65535</code>。 但是由于JVM需要1个字节表示结束指令，所以这个范围就为65534了。 超出这个范围在编译时期是会报错的，但是运行时拼接或者赋值的话范围是在整形的最大范围。</p><h2 id="_10-10" tabindex="-1">10-10 <a class="header-anchor" href="#_10-10" aria-label="Permalink to &quot;10-10&quot;">​</a></h2><h3 id="什么是节流和防抖-应用场景有哪些" tabindex="-1">什么是节流和防抖？应用场景有哪些？ <a class="header-anchor" href="#什么是节流和防抖-应用场景有哪些" aria-label="Permalink to &quot;什么是节流和防抖？应用场景有哪些？&quot;">​</a></h3><p>在前端开发过程中，当函数绑定到某些可能会持续触发的事件中时， 可能会造成性能和资源的浪费。如鼠标的移动、提交按钮可能被用户快速重复的点击等。 <strong>节流</strong>和<strong>防抖</strong>就是为了解决这一问题。</p><ul><li><strong>防抖（debounce）：</strong> 防抖指事件触发时，它将在指定时间后执行，如果这段时间内再次被调用，则重新计算执行时间。 通常用于滚动事件、调整窗口大小、鼠标移动、窗口搜索建议等。</li></ul><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">debounce</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">func</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">delay</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> timeoutId;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">...</span><span style="color:#FFAB70;">args</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">clearTimeout</span><span style="color:#E1E4E8;">(timeoutId);</span></span>
<span class="line"><span style="color:#E1E4E8;">        timeoutId </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">setTimeout</span><span style="color:#E1E4E8;">(() </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#B392F0;">func</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">...</span><span style="color:#E1E4E8;">args);</span></span>
<span class="line"><span style="color:#E1E4E8;">        }, delay);</span></span>
<span class="line"><span style="color:#E1E4E8;">    };</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 使用防抖函数</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">debouncedFunction</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">debounce</span><span style="color:#E1E4E8;">(() </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;Debounced function called.&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">}, </span><span style="color:#79B8FF;">1000</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 模拟事件触发</span></span>
<span class="line"><span style="color:#B392F0;">setInterval</span><span style="color:#E1E4E8;">(() </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">debouncedFunction</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">}, </span><span style="color:#79B8FF;">200</span><span style="color:#E1E4E8;">);  </span><span style="color:#6A737D;">// 防抖后，该函数触发后会等待1秒，如果1秒内再次触发，则重新计时</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">debounce</span><span style="color:#24292E;">(</span><span style="color:#E36209;">func</span><span style="color:#24292E;">, </span><span style="color:#E36209;">delay</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> timeoutId;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">...</span><span style="color:#E36209;">args</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">clearTimeout</span><span style="color:#24292E;">(timeoutId);</span></span>
<span class="line"><span style="color:#24292E;">        timeoutId </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">setTimeout</span><span style="color:#24292E;">(() </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6F42C1;">func</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">...</span><span style="color:#24292E;">args);</span></span>
<span class="line"><span style="color:#24292E;">        }, delay);</span></span>
<span class="line"><span style="color:#24292E;">    };</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 使用防抖函数</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">debouncedFunction</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">debounce</span><span style="color:#24292E;">(() </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;Debounced function called.&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">}, </span><span style="color:#005CC5;">1000</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 模拟事件触发</span></span>
<span class="line"><span style="color:#6F42C1;">setInterval</span><span style="color:#24292E;">(() </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">debouncedFunction</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">}, </span><span style="color:#005CC5;">200</span><span style="color:#24292E;">);  </span><span style="color:#6A737D;">// 防抖后，该函数触发后会等待1秒，如果1秒内再次触发，则重新计时</span></span></code></pre></div><ul><li><strong>节流（throttle）：</strong> 节流指连续触发多次的事件在指定时间范围内只执行一次，进而限制函数的执行频率。 通常用于自动保存、延时执行等。</li></ul><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">throttle</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">func</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">delay</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> lastCall </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">...</span><span style="color:#FFAB70;">args</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">now</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Date</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">getTime</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (now </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> lastCall </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> delay) </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    lastCall </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> now;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">func</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">...</span><span style="color:#E1E4E8;">args);</span></span>
<span class="line"><span style="color:#E1E4E8;">  };</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 使用节流函数</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">throttledFunction</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">throttle</span><span style="color:#E1E4E8;">(() </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;Throttled function called.&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">}, </span><span style="color:#79B8FF;">1000</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 模拟事件触发</span></span>
<span class="line"><span style="color:#B392F0;">setInterval</span><span style="color:#E1E4E8;">(throttledFunction, </span><span style="color:#79B8FF;">200</span><span style="color:#E1E4E8;">);  </span><span style="color:#6A737D;">// 节流后，该函数每秒最多执行一次</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">throttle</span><span style="color:#24292E;">(</span><span style="color:#E36209;">func</span><span style="color:#24292E;">, </span><span style="color:#E36209;">delay</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> lastCall </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">...</span><span style="color:#E36209;">args</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">now</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Date</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">getTime</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (now </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> lastCall </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> delay) </span><span style="color:#D73A49;">return</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    lastCall </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> now;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">func</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">...</span><span style="color:#24292E;">args);</span></span>
<span class="line"><span style="color:#24292E;">  };</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 使用节流函数</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">throttledFunction</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">throttle</span><span style="color:#24292E;">(() </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;Throttled function called.&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">}, </span><span style="color:#005CC5;">1000</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 模拟事件触发</span></span>
<span class="line"><span style="color:#6F42C1;">setInterval</span><span style="color:#24292E;">(throttledFunction, </span><span style="color:#005CC5;">200</span><span style="color:#24292E;">);  </span><span style="color:#6A737D;">// 节流后，该函数每秒最多执行一次</span></span></code></pre></div><blockquote><p>总的来说，节流和防抖都是为了限制函数执行的频率，以优化性能、减少不必要的计算或请求，提高用户体验。选择使用哪种取决于具体的需求和事件特性。</p></blockquote><h2 id="_10-9" tabindex="-1">10-9 <a class="header-anchor" href="#_10-9" aria-label="Permalink to &quot;10-9&quot;">​</a></h2><h3 id="请描述-static-修饰符。" tabindex="-1">请描述 static 修饰符。 <a class="header-anchor" href="#请描述-static-修饰符。" aria-label="Permalink to &quot;请描述 static 修饰符。&quot;">​</a></h3><p><code>static</code> 关键字可以用于类、方法、属性等。</p><p><strong>静态字段</strong></p><p>如果将一个字段定义为static，那么这个字段并不会出现在每个类的对象中。每个静态字段只有一个副本。可以认为静态字段属于类，而不属于单个对象。</p><p><strong>静态常量</strong></p><p>JAVA中没有用于修饰常量的关键字，所以常量的修饰通常使用 <code>public static final</code> 三个关键字共同修饰。使其静态加载且不允许修改。</p><p><strong>静态方法</strong></p><p>静态方法是不操作对象的方法。例如 <code>Math.pow(x,a)</code>会计算 x 的 a 次幂。它不会使用任何 Math 对象来完成该方法调用。它没有隐式参数。</p><p><strong>工厂方法</strong></p><p>类似于 <code>LocalDate</code> 和 <code>NumberFormat</code> 的类使用静态工厂方法来构造对象，就是静态方法：</p><div class="language-Java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">Java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">LocalDate localdate </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> LocalDate.</span><span style="color:#B392F0;">now</span><span style="color:#E1E4E8;">(); </span></span>
<span class="line"><span style="color:#E1E4E8;">LocalDate localdate </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> LocalDate.</span><span style="color:#B392F0;">of</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">2020</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">13</span><span style="color:#E1E4E8;">);  </span></span>
<span class="line"><span style="color:#E1E4E8;">System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(NumberFormat.</span><span style="color:#B392F0;">format</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0.1</span><span style="color:#E1E4E8;">));</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">LocalDate localdate </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> LocalDate.</span><span style="color:#6F42C1;">now</span><span style="color:#24292E;">(); </span></span>
<span class="line"><span style="color:#24292E;">LocalDate localdate </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> LocalDate.</span><span style="color:#6F42C1;">of</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">2020</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">5</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">13</span><span style="color:#24292E;">);  </span></span>
<span class="line"><span style="color:#24292E;">System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(NumberFormat.</span><span style="color:#6F42C1;">format</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">0.1</span><span style="color:#24292E;">));</span></span></code></pre></div><p><strong>main 方法</strong></p><p>调用静态方法不需要任何对象，与 <code>Math.pow</code> 同理，main 方法也是一个静态方法，启动程序时没有任何对象，将执行 main 方法并构造程序所需要的对象。</p><h2 id="_10-8" tabindex="-1">10-8 <a class="header-anchor" href="#_10-8" aria-label="Permalink to &quot;10-8&quot;">​</a></h2><h3 id="请描述修饰符、访问修饰符-非访问修饰符。" tabindex="-1">请描述修饰符、访问修饰符，非访问修饰符。 <a class="header-anchor" href="#请描述修饰符、访问修饰符-非访问修饰符。" aria-label="Permalink to &quot;请描述修饰符、访问修饰符，非访问修饰符。&quot;">​</a></h3><ul><li><p><strong>修饰符</strong>（Modifiers）：指用于修饰类、方法。变量等的关键字，用于置顶元素的访问类型。作用域、权限、继承性、抽象性等。修饰符分为访问修饰符和非访问修饰符。</p></li><li><p><strong>访问修饰符（Access Modifiers）</strong>: 访问修饰符控制类、方法、变量等的访问权限，共有以下四中：</p><table><thead><tr><th>Name</th><th>Description</th></tr></thead><tbody><tr><td>public</td><td>能被任何类访问。</td></tr><tr><td>protected</td><td>同一包课件，其他包的子类可见。</td></tr><tr><td>default</td><td>默认，只能在同一包中被访问。</td></tr><tr><td>private</td><td>只能在同一类中访问。</td></tr></tbody></table></li><li><p><strong>非访问修饰符（Non-Access Modifiers）</strong>: 非访问修饰符用于实现其他功能，包括以下几种类型：</p></li></ul><table><thead><tr><th>Name</th><th>Description</th></tr></thead><tbody><tr><td>final</td><td>表示不可继承的类、不可重写的方法或不可修改的变量。</td></tr><tr><td>abstract</td><td>表示抽象类或抽象方法，不能直接实例化抽象类。</td></tr><tr><td>static</td><td>静态资源关键字，用于创建类级别的变量或方法，而非实例级别。</td></tr><tr><td>synchronize</td><td>用于同步代码块，保证多线程环境下的同步访问。</td></tr><tr><td>transient</td><td>用于表示不需要序列化的变量。</td></tr><tr><td>volatile</td><td>用于表示多线程共享变量，保证可见性但不保证原子性。</td></tr><tr><td>strictfp</td><td>用于强制浮点运算遵循IEEE 764 标准，确保跨平台的浮点计算结果一致。</td></tr><tr><td>sealed</td><td>密封类。用于控制哪些类可以对该类进行拓展。</td></tr><tr><td>record</td><td>用于创建不可变的数据类。</td></tr></tbody></table><h2 id="_10-7" tabindex="-1">10-7 <a class="header-anchor" href="#_10-7" aria-label="Permalink to &quot;10-7&quot;">​</a></h2><h3 id="什么是方法签名" tabindex="-1">什么是方法签名？ <a class="header-anchor" href="#什么是方法签名" aria-label="Permalink to &quot;什么是方法签名？&quot;">​</a></h3><p>在上一篇中说到，重写必须要求方法签名相同，这里的<strong>方法签名</strong>（Method Signature），指的是方法名称及参数类型列表。如：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">sum</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> a, </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> b){</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> a </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> b;}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">sum</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> a, </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> b){</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> a </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> b;}</span></span></code></pre></div><p>该方法的方法签名为： <code>sum(int, int)</code></p><h2 id="_10-6" tabindex="-1">10-6 <a class="header-anchor" href="#_10-6" aria-label="Permalink to &quot;10-6&quot;">​</a></h2><h3 id="重载和重写是什么意思-有什么区别" tabindex="-1">重载和重写是什么意思？有什么区别？ <a class="header-anchor" href="#重载和重写是什么意思-有什么区别" aria-label="Permalink to &quot;重载和重写是什么意思？有什么区别？&quot;">​</a></h3><p><code>重载</code>（Overloading）指在同一个类中可以定义多个参数列表不同的同名方法，其互相的关系是重载。它是编译时多态（静态绑定），根据参数列表选择调用对应的方法。</p><p><code>重写</code>（Overriding）指子类可以重新定义父类中非私有的方法，方法签名必须相同。子类可以通过重写父类的方法来实现自己的特定行为。 它是运行时多态（动态绑定），在运行时根据对象的实际类型选择调用对应的方法。</p><h2 id="_10-5" tabindex="-1">10-5 <a class="header-anchor" href="#_10-5" aria-label="Permalink to &quot;10-5&quot;">​</a></h2><h3 id="string、stringbuilder、stringbuffer-的区别及使用场景" tabindex="-1">String、StringBuilder、StringBuffer 的区别及使用场景 <a class="header-anchor" href="#string、stringbuilder、stringbuffer-的区别及使用场景" aria-label="Permalink to &quot;String、StringBuilder、StringBuffer 的区别及使用场景&quot;">​</a></h3><p><code>String</code> 由 final 关键字修饰，一旦定义就不可改变。可以在操作少量数据时使用。</p><p><code>StringBuilder</code> 可变，但是线程不安全。操作单线程大量数据时使用。</p><p><code>StringBuffer</code> 可变，线程安全。操作多线程大数据时使用。</p><h2 id="_10-4" tabindex="-1">10-4 <a class="header-anchor" href="#_10-4" aria-label="Permalink to &quot;10-4&quot;">​</a></h2><h3 id="请描述-instanceof-关键字" tabindex="-1">请描述 instanceof 关键字 <a class="header-anchor" href="#请描述-instanceof-关键字" aria-label="Permalink to &quot;请描述 instanceof 关键字&quot;">​</a></h3><p><code>instanceof</code> 是 JAVA 的一个二元操作符，类似于大于小于号，用于测试其左边的对象是否是它右边对象的实例， 返回 Boolean 类型。在下方的 <a href="#_10-3">10-3</a> 的示例中，String 类的 equals 方法中使用了 <code>instanceof</code> 关键字对比较的对象进行实例检查，并转换为 String 类型。</p><h2 id="_10-3" tabindex="-1">10-3 <a class="header-anchor" href="#_10-3" aria-label="Permalink to &quot;10-3&quot;">​</a></h2><h3 id="与-equals-的区别" tabindex="-1"><code>==</code> 与 <code>equals</code> 的区别 <a class="header-anchor" href="#与-equals-的区别" aria-label="Permalink to &quot;\`==\` 与 \`equals\` 的区别&quot;">​</a></h3><p>两者的作用都是判断是否相等。但是 <code>==</code> 是运算符，<code>equals</code> 是继承于 Object 类的一个方法。</p><p>对于 <code>==</code> 来讲，如果比较<strong>基本数据类型</strong>，则比较其存储的值。如果比较<strong>引用数据类型</strong>，则比较其对象的地址值是否相等。</p><p>对于 <code>equals</code> 方法来讲，其本身并不提供<strong>基本数据类型</strong>的比较， 但是可以使用 Objects 类提供的静态 equals 进行比较，如果是基本数据类型，其实现也是使用 <code>==</code>：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">equals</span><span style="color:#E1E4E8;">(Object a, Object b) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> (a </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> b) </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> (a </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> a.</span><span style="color:#B392F0;">equals</span><span style="color:#E1E4E8;">(b));</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">equals</span><span style="color:#24292E;">(Object a, Object b) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> (a </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> b) </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> (a </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> a.</span><span style="color:#6F42C1;">equals</span><span style="color:#24292E;">(b));</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>继承于 Object 类的 <code>equals</code> 方法也是使用 <code>==</code> 进行比较：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">equals</span><span style="color:#E1E4E8;">(Object obj) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> (</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> obj);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">equals</span><span style="color:#24292E;">(Object obj) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> (</span><span style="color:#005CC5;">this</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> obj);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>所以要比较两个引用数据类型，必须重写其 equals 方法才能实现对于特定条件的比较，这里以常用的 String 类进行举例，其重写的 equals 方法如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">equals</span><span style="color:#E1E4E8;">(Object anObject) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 判断其地址值相同，直接返回 TRUE</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> anObject) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">; </span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 类型检查，判断是否为 String 的实例，如果是，anObject 会被转化为 aString 表示的 String 类型</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> (anObject </span><span style="color:#F97583;">instanceof</span><span style="color:#E1E4E8;"> String aString)</span></span>
<span class="line"><span style="color:#E1E4E8;">        	</span><span style="color:#6A737D;">// 是否压缩（紧凑表示方式），如果压缩则检查其编码是否相同</span></span>
<span class="line"><span style="color:#E1E4E8;">        	</span><span style="color:#6A737D;">// 这里 aString 是规范的命名方式。。。</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">COMPACT_STRINGS </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.coder </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> aString.coder)</span></span>
<span class="line"><span style="color:#E1E4E8;">        	</span><span style="color:#6A737D;">// 遍历比较字符数组</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> StringLatin1.</span><span style="color:#B392F0;">equals</span><span style="color:#E1E4E8;">(value, aString.value);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">equals</span><span style="color:#24292E;">(Object anObject) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 判断其地址值相同，直接返回 TRUE</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#005CC5;">this</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> anObject) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">; </span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 类型检查，判断是否为 String 的实例，如果是，anObject 会被转化为 aString 表示的 String 类型</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> (anObject </span><span style="color:#D73A49;">instanceof</span><span style="color:#24292E;"> String aString)</span></span>
<span class="line"><span style="color:#24292E;">        	</span><span style="color:#6A737D;">// 是否压缩（紧凑表示方式），如果压缩则检查其编码是否相同</span></span>
<span class="line"><span style="color:#24292E;">        	</span><span style="color:#6A737D;">// 这里 aString 是规范的命名方式。。。</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">COMPACT_STRINGS </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.coder </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> aString.coder)</span></span>
<span class="line"><span style="color:#24292E;">        	</span><span style="color:#6A737D;">// 遍历比较字符数组</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> StringLatin1.</span><span style="color:#6F42C1;">equals</span><span style="color:#24292E;">(value, aString.value);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h2 id="_10-2" tabindex="-1">10-2 <a class="header-anchor" href="#_10-2" aria-label="Permalink to &quot;10-2&quot;">​</a></h2><h3 id="_3-0-1-0-3-将会返回什么-true-还是-false" tabindex="-1"><code>3 * 0.1 == 0.3</code> 将会返回什么? true 还是 false? <a class="header-anchor" href="#_3-0-1-0-3-将会返回什么-true-还是-false" aria-label="Permalink to &quot;\`3 * 0.1 == 0.3\` 将会返回什么? true 还是 false?&quot;">​</a></h3><p><strong>答案：</strong><code>FALSE</code></p><p>这道题跟 <code>01+0.2 != 0.3</code> 是一样的，由于在计算机系统中使用二进制浮点数无法精确的表示诸如 <code>10/3</code> 等无限循环的十进制分数的值， Java中的<code>double</code>和<code>float</code>类型使用IEEE 754标准来表示浮点数，这种表示方式会导致一些十进制分数无法精确地表示。 因此，当你尝试在Java中表示0.3时，可能会得到一个非常接近 0.3 的值，但不会是精确的 0.3。</p><p>要想精确的表示十进制小数，可以使用 <code>BigDecimal</code> 类进行精确的十进制数学运算，但是会更为复杂并造成额外的开销。</p><h2 id="_10-1" tabindex="-1">10-1 <a class="header-anchor" href="#_10-1" aria-label="Permalink to &quot;10-1&quot;">​</a></h2><h3 id="请详述-jdk-jre-jvm-等的关系" tabindex="-1">请详述 <code>JDK</code> <code>JRE</code> <code>JVM</code> 等的关系 <a class="header-anchor" href="#请详述-jdk-jre-jvm-等的关系" aria-label="Permalink to &quot;请详述 \`JDK\` \`JRE\` \`JVM\` 等的关系&quot;">​</a></h3><div class="tip custom-block"><p class="custom-block-title">声明</p><p>该内容由 <code>CHATGPT</code> 生成</p></div><ol><li><p><strong><code>JDK</code>（Java Development Kit）</strong>：</p><p><code>JDK</code> 是Java开发工具包，它是Java开发人员用来编写、编译、调试和运行Java程序的核心工具。</p></li><li><p>JDK包括了Java编译器（javac）、Java解释器（java）、Java文档生成器（javadoc）等工具，以及Java开发所需的库和资源文件。</p></li><li><p><strong><code>JRE</code>（Java Runtime Environment）</strong>：</p><p>JRE是Java运行时环境，是Java程序的运行环境，用于执行已经编译好的Java字节码。 <code>JRE</code>包括了Java虚拟机（<code>JVM</code>）、Java类库（Java API）和运行时所需的其他组件。JRE提供了在特定平台上运行Java程序所需的基本功能。</p></li><li><p><strong><code>JVM</code>（Java Virtual Machine）</strong>：</p><p><code>JVM</code> 是Java虚拟机，是Java程序的运行引擎，负责将Java字节码解释或编译成特定平台的本地机器代码，并执行程序。 <code>JVM</code> 是 <code>JRE</code> 的一部分，它是一个虚拟的计算机，可以在不同的硬件和操作系统上运行Java程序。</p></li></ol><p><strong>关系总结</strong>：</p><ul><li>JDK包括JRE，JRE包括JVM。</li><li>JDK提供了开发、编译、调试等工具，以及JRE所需的库和资源。</li><li>JRE提供了JVM和Java API，用于运行Java程序。</li><li>JVM是Java程序的运行引擎，它执行Java字节码并负责内存管理、垃圾回收等。</li><li>Java程序首先由JDK编译生成Java字节码，然后JRE中的JVM解释或编译Java字节码并执行。</li></ul>`,155),e=[p];function t(r,c,i,E,y,d){return s(),n("div",null,e)}const b=a(o,[["render",t]]);export{u as __pageData,b as default};
