import{_ as s,o as i,c as a,U as h}from"./chunks/framework.c8sqUf1u.js";const c=JSON.parse('{"title":"","description":"","frontmatter":{"readingTime":false,"hidden":true},"headers":[],"relativePath":"question-by-day/2024/2.md","filePath":"question-by-day/2024/2.md","lastUpdated":1708420109000}'),n={name:"question-by-day/2024/2.md"},l=h(`<h2 id="_2-20" tabindex="-1">2-20 <a class="header-anchor" href="#_2-20" aria-label="Permalink to &quot;2-20&quot;">​</a></h2><h3 id="hashmap-是怎么解决-hash-冲突的" tabindex="-1">HashMap 是怎么解决 hash 冲突的？ <a class="header-anchor" href="#hashmap-是怎么解决-hash-冲突的" aria-label="Permalink to &quot;HashMap 是怎么解决 hash 冲突的？&quot;">​</a></h3><p>HashMap 是基于哈希表实现的，哈希表是数组和链表的结合体，数组是 HashMap 的主体，链表则是主要为了解决哈希冲突而存在的。 HashMap 的做法是用链表和红黑树存储相同 hash 值的 value。当 hash 冲突的个数比较少时，使用链表否则使用红黑树。</p><h2 id="_2-19" tabindex="-1">2-19 <a class="header-anchor" href="#_2-19" aria-label="Permalink to &quot;2-19&quot;">​</a></h2><h3 id="简述快速排序的过程。" tabindex="-1">简述快速排序的过程。 <a class="header-anchor" href="#简述快速排序的过程。" aria-label="Permalink to &quot;简述快速排序的过程。&quot;">​</a></h3><ol><li>选择一个基准元素（第一个或最后一个）。</li><li>通过一趟排序将待排序的记录分割成独立的两个部分，其中一部分记录的元素值均比基准元素值小，另一部分记录的元素值比基准值大。</li><li>此时基准元素在其排好序后的正确位置。</li><li>然后分别对这两部分记录使用相同方法进行排序，直到整个序列有序。</li></ol><h2 id="_2-18" tabindex="-1">2-18 <a class="header-anchor" href="#_2-18" aria-label="Permalink to &quot;2-18&quot;">​</a></h2><h3 id="arraylist-和-linkedlist-的区别是什么" tabindex="-1">ArrayList 和 LinkedList 的区别是什么？ <a class="header-anchor" href="#arraylist-和-linkedlist-的区别是什么" aria-label="Permalink to &quot;ArrayList 和 LinkedList 的区别是什么？&quot;">​</a></h3><ul><li>ArrayList 是基于动态数组实现的，LinkedList 是基于双向链表实现的。</li><li>ArrayList 支持随机访问，LinkedList 只能顺序访问。</li><li>LinkedList 在插入和删除时效率较高，因为 ArrayList 增删操作可能要影响其他数据的下标。</li></ul><h2 id="_2-17" tabindex="-1">2-17 <a class="header-anchor" href="#_2-17" aria-label="Permalink to &quot;2-17&quot;">​</a></h2><h3 id="hashmap-的实现原理" tabindex="-1">HashMap 的实现原理？ <a class="header-anchor" href="#hashmap-的实现原理" aria-label="Permalink to &quot;HashMap 的实现原理？&quot;">​</a></h3><p>HashMap 是基于哈希表实现的，哈希表是数组和链表的结合体，数组是 HashMap 的主体，链表则是主要为了解决哈希冲突而存在的。HashMap 的做法是用链表和红黑树存储相同 hash 值的 value。当 hash 冲突的个数比较少时，使用链表否则使用红黑树。</p><h2 id="_2-16" tabindex="-1">2-16 <a class="header-anchor" href="#_2-16" aria-label="Permalink to &quot;2-16&quot;">​</a></h2><h3 id="hashset-的实现原理" tabindex="-1">HashSet 的实现原理？ <a class="header-anchor" href="#hashset-的实现原理" aria-label="Permalink to &quot;HashSet 的实现原理？&quot;">​</a></h3><p>HashSet 是基于 HashMap 实现的，HashSet 的元素存储在 HashMap 的 key 上，value 是一个固定的 Object 对象。</p><h2 id="_2-15" tabindex="-1">2-15 <a class="header-anchor" href="#_2-15" aria-label="Permalink to &quot;2-15&quot;">​</a></h2><h3 id="如何决定使用-hashmap-还是-treemap" tabindex="-1">如何决定使用 HashMap 还是 TreeMap？ <a class="header-anchor" href="#如何决定使用-hashmap-还是-treemap" aria-label="Permalink to &quot;如何决定使用 HashMap 还是 TreeMap？&quot;">​</a></h3><ul><li>如果需要按自然顺序或者自定义顺序遍历键，那么使用 TreeMap。</li><li>如果需要快速查找键或者值，那么使用 HashMap。</li></ul><h2 id="_2-14" tabindex="-1">2-14 <a class="header-anchor" href="#_2-14" aria-label="Permalink to &quot;2-14&quot;">​</a></h2><h3 id="hashmap-和-hashtable-的区别" tabindex="-1">HashMap 和 HashTable 的区别？ <a class="header-anchor" href="#hashmap-和-hashtable-的区别" aria-label="Permalink to &quot;HashMap 和 HashTable 的区别？&quot;">​</a></h3><ul><li>HashMap 是非线程安全的，HashTable 是线程安全的。</li><li>HashMap 允许 <code>null</code> 键和 <code>null</code> 值，HashTable 不允许 <code>null</code> 键和 <code>null</code> 值。</li></ul><h2 id="_2-13" tabindex="-1">2-13 <a class="header-anchor" href="#_2-13" aria-label="Permalink to &quot;2-13&quot;">​</a></h2><h3 id="hashmap-什么样的类适合作为键" tabindex="-1">HashMap 什么样的类适合作为键？ <a class="header-anchor" href="#hashmap-什么样的类适合作为键" aria-label="Permalink to &quot;HashMap 什么样的类适合作为键？&quot;">​</a></h3><ul><li>作为键的类必须重写 <code>hashCode()</code> 和 <code>equals()</code> 方法。</li><li>作为键的类应该是不可变的，不可变的类是指创建后不可改变的类，如 String、Integer、Long 等。</li><li>作为键的类应该是唯一的，如果两个键的 <code>hashCode()</code> 相同，那么它们的 <code>equals()</code> 方法也应该返回 <code>true</code>。</li></ul><h2 id="_2-12" tabindex="-1">2-12 <a class="header-anchor" href="#_2-12" aria-label="Permalink to &quot;2-12&quot;">​</a></h2><h3 id="list-和-map-的区别" tabindex="-1">List 和 Map 的区别？ <a class="header-anchor" href="#list-和-map-的区别" aria-label="Permalink to &quot;List 和 Map 的区别？&quot;">​</a></h3><ul><li>List 是有序的单列数据集合，可以有重复的元素。</li><li>Map 是无序的键值对集合，不允许重复的键，但是允许重复的值。</li></ul><h2 id="_2-11" tabindex="-1">2-11 <a class="header-anchor" href="#_2-11" aria-label="Permalink to &quot;2-11&quot;">​</a></h2><h3 id="力扣题库-计算数组最大连续-1-的个数。" tabindex="-1">（力扣题库）计算数组最大连续 1 的个数。 <a class="header-anchor" href="#力扣题库-计算数组最大连续-1-的个数。" aria-label="Permalink to &quot;（力扣题库）计算数组最大连续 1 的个数。&quot;">​</a></h3><p><strong>输入：</strong> <code>nums = [1,1,0,1,1,1]</code></p><p><strong>输出：</strong> <code>3</code></p><p><strong>输入：</strong> <code>nums = [1,0,1,1,0,1]</code></p><p><strong>输出：</strong> <code>2</code></p><blockquote><p>开头的两位和最后的三位都是连续 1 ，所以最大连续 1 的个数是 3.</p><p>1 &lt;= nums.length &lt;= 105</p><p>nums[i] 不是 0 就是 1.</p></blockquote><p><strong>题解：</strong></p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> findMaxConsecutiveOnes</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] nums) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> max </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, cur </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> nums) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    cur </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ?</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> :</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> cur </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    max </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Math.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">max</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(max, cur);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> max;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="_2-10" tabindex="-1">2-10 <a class="header-anchor" href="#_2-10" aria-label="Permalink to &quot;2-10&quot;">​</a></h2><h3 id="什么是栈-什么是队列" tabindex="-1">什么是栈，什么是队列？ <a class="header-anchor" href="#什么是栈-什么是队列" aria-label="Permalink to &quot;什么是栈，什么是队列？&quot;">​</a></h3><p><strong>栈（Stack）</strong> 是一种先进后出（FILO）的数据结构，只允许在栈顶进行插入和删除操作。</p><p><strong>队列（Queue）</strong> 是一种先进先出（FIFO）的数据结构，只允许在队列的两端进行插入和删除操作。</p><h2 id="_2-9" tabindex="-1">2-9 <a class="header-anchor" href="#_2-9" aria-label="Permalink to &quot;2-9&quot;">​</a></h2><h3 id="什么是快速失败和安全失败机制" tabindex="-1">什么是快速失败和安全失败机制？ <a class="header-anchor" href="#什么是快速失败和安全失败机制" aria-label="Permalink to &quot;什么是快速失败和安全失败机制？&quot;">​</a></h3><p><strong>快速失败（Fail-Fast）：</strong> 在用迭代器对集合对象进行遍历的时候，如果A线程正在对集合进行遍历，此时B线程或A线程对集合进行修改（增删改）操作， 都会导致A线程抛出 ConcurrentModificationException 异常。 这是因为迭代器在便利是直接访问集合中的内容， 并且使用一个 modCount 变量，集合在被遍历期间如果内容发生变化，modCount 也会发生变化，迭代器就会抛出异常。</p><p><strong>安全失败（Fail-Safe）：</strong> 安全失败机制的集合容器，在便利是不直接访问集合内容吗，而是先复制原有集合，并操作拷贝后的集合。</p><h2 id="_2-8" tabindex="-1">2-8 <a class="header-anchor" href="#_2-8" aria-label="Permalink to &quot;2-8&quot;">​</a></h2><h3 id="arraylist-底层是什么" tabindex="-1">ArrayList 底层是什么？ <a class="header-anchor" href="#arraylist-底层是什么" aria-label="Permalink to &quot;ArrayList 底层是什么？&quot;">​</a></h3><p>ArrayList 采用 List 数组作为底层实现，是顺序容器，允许放入 <code>null</code> 元素。 ArrayList 具有自动增加底层数组容量的能力，当数组容量不足时，会自动增加容量。</p><h2 id="_2-7" tabindex="-1">2-7 <a class="header-anchor" href="#_2-7" aria-label="Permalink to &quot;2-7&quot;">​</a></h2><h3 id="java-集合有哪些类" tabindex="-1">JAVA 集合有哪些类？ <a class="header-anchor" href="#java-集合有哪些类" aria-label="Permalink to &quot;JAVA 集合有哪些类？&quot;">​</a></h3><ul><li>Set <ul><li>TreeSet 基于红黑树实现，支持有序性操作。</li><li>HashSet 基于哈希表实现，支持快速查找。</li><li>LinkedHashSet 具有可预知迭代顺序的 Set 接口的哈希表和链接列表实现。</li></ul></li><li>List <ul><li>ArrayList 基于动态数组实现，支持随机访问。</li><li>Vector 和 ArrayList 类似，但是它是线程安全的。</li><li>LinkedList 基于双向链表实现，只能顺序访问，但是可以快速插入和删除，也可以用作堆栈、队列。</li></ul></li><li>Queue <ul><li>PriorityQueue 基于堆结构实现，可以用它来实现优先队列。</li><li>LinkedList 也可以实现双向队列。</li></ul></li></ul><h2 id="_2-6" tabindex="-1">2-6 <a class="header-anchor" href="#_2-6" aria-label="Permalink to &quot;2-6&quot;">​</a></h2><h3 id="所有的-final-修饰的字段都是编译期常量吗" tabindex="-1">所有的 final 修饰的字段都是编译期常量吗? <a class="header-anchor" href="#所有的-final-修饰的字段都是编译期常量吗" aria-label="Permalink to &quot;所有的 final 修饰的字段都是编译期常量吗?&quot;">​</a></h3><p>不是，final 修饰的字段，如果是基本数据类型或者是不可变对象，那么它是编译期常量，否则不是。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> FinalTest</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> final</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 6</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;     </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 编译期常量</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> final</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Random</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">nextInt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);     </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 运行期常量</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> final</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> c </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 6</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;      </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 编译期常量</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> final</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> d </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Random</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">nextInt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);      </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 运行期常量</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> final</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> String e </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;hello&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;      </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 运行期常量</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> final</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> String f </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;hello&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);      </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 运行期常量</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="_2-5" tabindex="-1">2-5 <a class="header-anchor" href="#_2-5" aria-label="Permalink to &quot;2-5&quot;">​</a></h2><h3 id="什么是重复注解" tabindex="-1">什么是重复注解？ <a class="header-anchor" href="#什么是重复注解" aria-label="Permalink to &quot;什么是重复注解？&quot;">​</a></h3><p>重复注解指允许在同一申明类型(类，属性，或方法)的多次使用同一个注解。</p><p>在 JAVA 之前，对于重复注解的解决方案如下，不是很友好：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">interface</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> Authority</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">     String </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">role</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">interface</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> Authorities</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    Authority</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> RepeatAnnotationUseOldVersion</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Authorities</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Authority</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">role</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Admin&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Authority</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">role</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Manager&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)})</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> doSomeThing</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(){</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>JAVA 8 之后：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Repeatable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Authorities.class)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">interface</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> Authority</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">String </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">role</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">interface</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> Authorities</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Authority</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> RepeatAnnotationUseNewVersion</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Authority</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">role</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Admin&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Authority</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">role</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Manager&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> doSomeThing</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(){ }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="_2-4" tabindex="-1">2-4 <a class="header-anchor" href="#_2-4" aria-label="Permalink to &quot;2-4&quot;">​</a></h2><h3 id="什么是类型注解" tabindex="-1">什么是类型注解？ <a class="header-anchor" href="#什么是类型注解" aria-label="Permalink to &quot;什么是类型注解？&quot;">​</a></h3><p>注解类型被用来支持在 JAVA 程序中做强类型检查。配合插件式的 <code>check framework</code>，可以在编译时检测出 runtime error，以提高代码质量。</p><p>创建类实例：<code>new @Interned MyObject();</code></p><p>类型映射：<code>myString = (@NonNull String) str;</code></p><p>implements 语句中：<code>class UnmodifiableList&lt;T&gt; implements @Readonly List&lt;@Readonly T&gt; { … }</code></p><p>throw exception 声明：<code>void monitorTemperature() throws @Critical TemperatureException { … }</code></p><blockquote><p>类型注解只是语法而不是语义，并不会影响 java 的编译时间，加载时间，以及运行时间，也就是说，编译成 class 文件的时候并不包含类型注解。</p></blockquote><h2 id="_2-3" tabindex="-1">2-3 <a class="header-anchor" href="#_2-3" aria-label="Permalink to &quot;2-3&quot;">​</a></h2><h3 id="optional-要解决什么问题" tabindex="-1">Optional 要解决什么问题？ <a class="header-anchor" href="#optional-要解决什么问题" aria-label="Permalink to &quot;Optional 要解决什么问题？&quot;">​</a></h3><p>在调用一个方法得到了返回值却不能直接将返回值作为参数去调用别的方法，我们首先要判断这个返回值是否为 null， 只有在非空的前提下才能将其作为其他方法的参数。Java 8 引入了一个新的 Optional 类：这是一个可以为 null 的容器对象， 如果值存在则 <code>isPresent()</code> 方法会返回 true，调用 <code>get()</code> 方法会返回该对象。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Optional.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">of</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Outer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">map</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Outer</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">getNested)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">map</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Nested</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">getInner)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">map</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Inner</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">getFoo)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ifPresent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(System.out</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">println);</span></span></code></pre></div><p>还有一种实现相同作用的方式就是通过利用一个 supplier 函数来解决嵌套路径的问题:</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Outer obj </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Outer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">resolve</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> obj.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getNested</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getInner</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getFoo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ifPresent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(System.out</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">println);</span></span></code></pre></div><h2 id="_2-2" tabindex="-1">2-2 <a class="header-anchor" href="#_2-2" aria-label="Permalink to &quot;2-2&quot;">​</a></h2><h3 id="什么是-functionalinterface" tabindex="-1">什么是 FunctionalInterface？ <a class="header-anchor" href="#什么是-functionalinterface" aria-label="Permalink to &quot;什么是 FunctionalInterface？&quot;">​</a></h3><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Documented</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Retention</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(RetentionPolicy.RUNTIME)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Target</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ElementType.TYPE)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">interface</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> FunctionalInterface</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{}</span></span></code></pre></div><p>FunctionalInterface 函数式接口，是 JAVA 8 中一类特殊类型接口的称呼，这种类只包含一个抽象方法（除了隐含的 Object 对象的公共方法）</p><ul><li>只能有一个抽象方法。</li><li>可以有多个静态方法和默认方法。</li><li>默认包含 Object 类的方法。</li></ul><h2 id="_2-1" tabindex="-1">2-1 <a class="header-anchor" href="#_2-1" aria-label="Permalink to &quot;2-1&quot;">​</a></h2><h3 id="类加载的生命周期" tabindex="-1">类加载的生命周期？ <a class="header-anchor" href="#类加载的生命周期" aria-label="Permalink to &quot;类加载的生命周期？&quot;">​</a></h3><p>了加载的过程包括了 加载、验证。准备。解析、初始化五个阶段， 除了解析之外，其余阶段的顺序是确定的，解析阶段可以在初始化之后进行。</p>`,83),t=[l];function e(k,p,r,d,E,o){return i(),a("div",null,t)}const y=s(n,[["render",e]]);export{c as __pageData,y as default};
