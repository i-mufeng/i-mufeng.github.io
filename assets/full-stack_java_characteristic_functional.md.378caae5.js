import{_ as s,o as a,c as n,Q as l}from"./chunks/framework.1b71a977.js";const h=JSON.parse('{"title":"Java8 新特性详解","description":"Lambda 表达式、Stream 流、Optional 类操作分享。","frontmatter":{"description":"Lambda 表达式、Stream 流、Optional 类操作分享。","tags":["Java"],"category":"JAVA 学习笔记","cover":false},"headers":[],"relativePath":"full-stack/java/characteristic/functional.md","filePath":"full-stack/java/characteristic/functional.md","lastUpdated":1697789639000}'),p={name:"full-stack/java/characteristic/functional.md"},o=l(`<h1 id="java8-新特性详解" tabindex="-1">Java8 新特性详解 <a class="header-anchor" href="#java8-新特性详解" aria-label="Permalink to &quot;Java8 新特性详解&quot;">​</a></h1><blockquote><p>Lambda 表达式、Stream 流、Optional 类操作分享。</p></blockquote><h2 id="一、lambda表达式" tabindex="-1">一、Lambda表达式 <a class="header-anchor" href="#一、lambda表达式" aria-label="Permalink to &quot;一、Lambda表达式&quot;">​</a></h2><p>Lambda表达式可以让你简洁的表示一个行为或传递代码。Lambda表达式可以理解为简洁的表示可传递匿名函数的一种方式：它没有名称，但是有参数列表、函数主体、返回类型</p><ul><li><strong>匿名：</strong> 没有名称</li><li><strong>函数：</strong> Lambda函数不像方法那样属于特定的类。但是和方法一样，有参数列表、函数体以及返回类型 。也可以抛出异常。</li><li><strong>传递：</strong> Lambda表达式可以作为参数传递给方法或存储在变量中。</li><li><strong>简介：</strong> 无需像匿名类那样写很多模板代码。</li></ul><p><strong>示例：</strong></p><div class="language-Java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">Java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 不使用Lambda</span></span>
<span class="line"><span style="color:#E1E4E8;">Comparator&lt;</span><span style="color:#F97583;">Apple</span><span style="color:#E1E4E8;">&gt; byWeight </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> Comparator&lt;</span><span style="color:#F97583;">Apple</span><span style="color:#E1E4E8;">&gt;(){</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">compare</span><span style="color:#E1E4E8;">(Apple </span><span style="color:#FFAB70;">a1</span><span style="color:#E1E4E8;">, Apple </span><span style="color:#FFAB70;">a2</span><span style="color:#E1E4E8;">){</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> a1.</span><span style="color:#B392F0;">getWeidht</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">compareTo</span><span style="color:#E1E4E8;">(a2.</span><span style="color:#B392F0;">getWeight</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"><span style="color:#E1E4E8;">}  </span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 使用Lambda表达式</span></span>
<span class="line"><span style="color:#E1E4E8;">Comparator&lt;Apple&gt; byWeight </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">    (Apple a1, Apple a2) </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> a1.</span><span style="color:#B392F0;">getWeight</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">compareTo</span><span style="color:#E1E4E8;">(a2.</span><span style="color:#B392F0;">getWeight</span><span style="color:#E1E4E8;">());</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 不使用Lambda</span></span>
<span class="line"><span style="color:#24292E;">Comparator&lt;</span><span style="color:#D73A49;">Apple</span><span style="color:#24292E;">&gt; byWeight </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> Comparator&lt;</span><span style="color:#D73A49;">Apple</span><span style="color:#24292E;">&gt;(){</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">compare</span><span style="color:#24292E;">(Apple </span><span style="color:#E36209;">a1</span><span style="color:#24292E;">, Apple </span><span style="color:#E36209;">a2</span><span style="color:#24292E;">){</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> a1.</span><span style="color:#6F42C1;">getWeidht</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">compareTo</span><span style="color:#24292E;">(a2.</span><span style="color:#6F42C1;">getWeight</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"><span style="color:#24292E;">}  </span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 使用Lambda表达式</span></span>
<span class="line"><span style="color:#24292E;">Comparator&lt;Apple&gt; byWeight </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">    (Apple a1, Apple a2) </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> a1.</span><span style="color:#6F42C1;">getWeight</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">compareTo</span><span style="color:#24292E;">(a2.</span><span style="color:#6F42C1;">getWeight</span><span style="color:#24292E;">());</span></span></code></pre></div><p><img src="https://cdn.imufeng.cn/imufeng/epub_26211813_42" alt="img"></p><h2 id="二、stream流" tabindex="-1">二、Stream流 <a class="header-anchor" href="#二、stream流" aria-label="Permalink to &quot;二、Stream流&quot;">​</a></h2><blockquote><p><code>Stream流</code> 是 Java8 提供对集合或数组进行链状流式操作的函数式编程模式。</p></blockquote><h3 id="_2-1-中间操作" tabindex="-1">2.1 中间操作 <a class="header-anchor" href="#_2-1-中间操作" aria-label="Permalink to &quot;2.1 中间操作&quot;">​</a></h3><ul><li><p><strong>filter：</strong> 过滤</p></li><li><p><strong>map：</strong> 计算或转换</p></li><li><p><strong>distinct：</strong> 去除重复对象（equals 方法）</p></li><li><p><strong>sorted：</strong> 排序，可以实现 Comparator 接口重写 compareTo 方法进行排序</p></li><li><p><strong>limit：</strong> 设置流的最大长度</p></li><li><p><strong>skip：</strong> 跳过前n个元素</p></li><li><p><strong>flatMap：</strong> 将一个对象转换为多个对象作为流中的元素</p></li></ul><h3 id="_2-2-终结操作" tabindex="-1">2.2 终结操作 <a class="header-anchor" href="#_2-2-终结操作" aria-label="Permalink to &quot;2.2 终结操作&quot;">​</a></h3><div class="danger custom-block"><p class="custom-block-title">注意</p><p>如果没有终结操作，中间操作不会执行</p></div><h4 id="常规操作" tabindex="-1">常规操作 <a class="header-anchor" href="#常规操作" aria-label="Permalink to &quot;常规操作&quot;">​</a></h4><ul><li><p><strong>forEach：</strong> 遍历</p></li><li><p><strong>count：</strong> 计数</p></li><li><p><strong>max&amp;min：</strong> 求最值 需要指定比较最大值的规则 返回 Optional</p></li><li><p><strong>collect：</strong> 将流转换为集合</p></li></ul><h4 id="查找与匹配" tabindex="-1">查找与匹配 <a class="header-anchor" href="#查找与匹配" aria-label="Permalink to &quot;查找与匹配&quot;">​</a></h4><ul><li><p><strong>anyMatch：</strong> 判断是否存在能够符合匹配条件的元素</p></li><li><p><strong>allMatch：</strong> 判断是否全部匹配条件</p></li><li><p><strong>noneMatch：</strong> 是否都不符合条件</p></li><li><p><strong>findAny：</strong> 获取任意一个符合条件元素（不一定是第一个）</p></li><li><p><strong>findFirst：</strong> 获取第一个符合条件的元素</p></li></ul><h4 id="reduce归并" tabindex="-1">reduce归并 <a class="header-anchor" href="#reduce归并" aria-label="Permalink to &quot;reduce归并&quot;">​</a></h4><p>对流中的数据按照你指定的计算方式计算出一个结果 （缩减操作）</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(people.</span><span style="color:#B392F0;">stream</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">        .</span><span style="color:#B392F0;">distinct</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">        .</span><span style="color:#B392F0;">map</span><span style="color:#E1E4E8;">(People</span><span style="color:#F97583;">::</span><span style="color:#E1E4E8;">getAge)</span></span>
<span class="line"><span style="color:#E1E4E8;">        .</span><span style="color:#B392F0;">reduce</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, (o1, o2) </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> o1 </span><span style="color:#F97583;">+=</span><span style="color:#E1E4E8;"> o2));</span></span>
<span class="line"><span style="color:#E1E4E8;">System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(people.</span><span style="color:#B392F0;">stream</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">        .</span><span style="color:#B392F0;">distinct</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">        .</span><span style="color:#B392F0;">map</span><span style="color:#E1E4E8;">(People</span><span style="color:#F97583;">::</span><span style="color:#E1E4E8;">getAge)</span></span>
<span class="line"><span style="color:#E1E4E8;">        .</span><span style="color:#B392F0;">reduce</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, Integer</span><span style="color:#F97583;">::</span><span style="color:#E1E4E8;">sum));</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(people.</span><span style="color:#6F42C1;">stream</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">        .</span><span style="color:#6F42C1;">distinct</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">        .</span><span style="color:#6F42C1;">map</span><span style="color:#24292E;">(People</span><span style="color:#D73A49;">::</span><span style="color:#24292E;">getAge)</span></span>
<span class="line"><span style="color:#24292E;">        .</span><span style="color:#6F42C1;">reduce</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, (o1, o2) </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> o1 </span><span style="color:#D73A49;">+=</span><span style="color:#24292E;"> o2));</span></span>
<span class="line"><span style="color:#24292E;">System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(people.</span><span style="color:#6F42C1;">stream</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">        .</span><span style="color:#6F42C1;">distinct</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">        .</span><span style="color:#6F42C1;">map</span><span style="color:#24292E;">(People</span><span style="color:#D73A49;">::</span><span style="color:#24292E;">getAge)</span></span>
<span class="line"><span style="color:#24292E;">        .</span><span style="color:#6F42C1;">reduce</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, Integer</span><span style="color:#D73A49;">::</span><span style="color:#24292E;">sum));</span></span></code></pre></div><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(people.</span><span style="color:#B392F0;">stream</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">        .</span><span style="color:#B392F0;">distinct</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">        .</span><span style="color:#B392F0;">map</span><span style="color:#E1E4E8;">(People</span><span style="color:#F97583;">::</span><span style="color:#E1E4E8;">getAge)</span></span>
<span class="line"><span style="color:#E1E4E8;">        .</span><span style="color:#B392F0;">reduce</span><span style="color:#E1E4E8;">(Integer.MIN_VALUE, Integer</span><span style="color:#F97583;">::</span><span style="color:#E1E4E8;">max));</span></span>
<span class="line"><span style="color:#E1E4E8;">System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(people.</span><span style="color:#B392F0;">stream</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">        .</span><span style="color:#B392F0;">distinct</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">        .</span><span style="color:#B392F0;">map</span><span style="color:#E1E4E8;">(People</span><span style="color:#F97583;">::</span><span style="color:#E1E4E8;">getAge)</span></span>
<span class="line"><span style="color:#E1E4E8;">        .</span><span style="color:#B392F0;">reduce</span><span style="color:#E1E4E8;">(Integer.MAX_VALUE, Integer</span><span style="color:#F97583;">::</span><span style="color:#E1E4E8;">min));</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(people.</span><span style="color:#6F42C1;">stream</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">        .</span><span style="color:#6F42C1;">distinct</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">        .</span><span style="color:#6F42C1;">map</span><span style="color:#24292E;">(People</span><span style="color:#D73A49;">::</span><span style="color:#24292E;">getAge)</span></span>
<span class="line"><span style="color:#24292E;">        .</span><span style="color:#6F42C1;">reduce</span><span style="color:#24292E;">(Integer.MIN_VALUE, Integer</span><span style="color:#D73A49;">::</span><span style="color:#24292E;">max));</span></span>
<span class="line"><span style="color:#24292E;">System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(people.</span><span style="color:#6F42C1;">stream</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">        .</span><span style="color:#6F42C1;">distinct</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">        .</span><span style="color:#6F42C1;">map</span><span style="color:#24292E;">(People</span><span style="color:#D73A49;">::</span><span style="color:#24292E;">getAge)</span></span>
<span class="line"><span style="color:#24292E;">        .</span><span style="color:#6F42C1;">reduce</span><span style="color:#24292E;">(Integer.MAX_VALUE, Integer</span><span style="color:#D73A49;">::</span><span style="color:#24292E;">min));</span></span></code></pre></div><h2 id="三、optional" tabindex="-1">三、Optional <a class="header-anchor" href="#三、optional" aria-label="Permalink to &quot;三、Optional&quot;">​</a></h2><blockquote><p>使用 Optional 可以写出更优雅的代码来避免空指针异常</p><p>Optional 类似于包装类，将具体的数据封装到Optional对象内部。我们可以使用Optional中封装好的方法操作封装的数据。优雅的避免空指针异常</p></blockquote><h3 id="创建对象" tabindex="-1">创建对象 <a class="header-anchor" href="#创建对象" aria-label="Permalink to &quot;创建对象&quot;">​</a></h3><p><code>ofNullAble()</code> 方法会将其封装为一个Optional对象</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">People people </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">People</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">Optional&lt;</span><span style="color:#F97583;">People</span><span style="color:#E1E4E8;">&gt; people1 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Optional.</span><span style="color:#B392F0;">ofNullable</span><span style="color:#E1E4E8;">(people);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">People people </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">People</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">Optional&lt;</span><span style="color:#D73A49;">People</span><span style="color:#24292E;">&gt; people1 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Optional.</span><span style="color:#6F42C1;">ofNullable</span><span style="color:#24292E;">(people);</span></span></code></pre></div><p>如果能够保证传入的对象非空，则可以使用of()方法封装</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">People people </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">People</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">people.</span><span style="color:#B392F0;">setName</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;mufeng&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">people.</span><span style="color:#B392F0;">setAge</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">13</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">Optional&lt;</span><span style="color:#F97583;">People</span><span style="color:#E1E4E8;">&gt; people1 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Optional.</span><span style="color:#B392F0;">of</span><span style="color:#E1E4E8;">(people);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">People people </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">People</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">people.</span><span style="color:#6F42C1;">setName</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;mufeng&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">people.</span><span style="color:#6F42C1;">setAge</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">13</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">Optional&lt;</span><span style="color:#D73A49;">People</span><span style="color:#24292E;">&gt; people1 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Optional.</span><span style="color:#6F42C1;">of</span><span style="color:#24292E;">(people);</span></span></code></pre></div><p>如果需要一个空值，使用 emepy() 方法</p><h3 id="安全获取值" tabindex="-1">安全获取值 <a class="header-anchor" href="#安全获取值" aria-label="Permalink to &quot;安全获取值&quot;">​</a></h3><p><code>orElseGet()</code> 如果非空则返回，如果为空则给默认值</p><p><code>orElseThrow()</code> 获取数据，为空则抛出异常</p><h3 id="其他方法" tabindex="-1">其他方法 <a class="header-anchor" href="#其他方法" aria-label="Permalink to &quot;其他方法&quot;">​</a></h3><p><code>filter()</code> 类似于Stream流中的filter方法</p><p><code>isPeresent（）</code> 进行是否存在值的判断（更推荐使用<code>ifPeresent()</code>方法）</p><p><code>map()</code> 数据转换。类似于Stream流中的map方法</p><h2 id="四、函数式接口" tabindex="-1">四、函数式接口 <a class="header-anchor" href="#四、函数式接口" aria-label="Permalink to &quot;四、函数式接口&quot;">​</a></h2><blockquote><p><strong>只有一个抽象方法的接口称为函数式接口</strong></p><p>JDK的函数式接口都加上了<code>@FunctionalInterface</code>进行标识。但是加不加都无所谓。</p></blockquote><h3 id="常用的函数式接口" tabindex="-1">常用的函数式接口 <a class="header-anchor" href="#常用的函数式接口" aria-label="Permalink to &quot;常用的函数式接口&quot;">​</a></h3><p><code>Consumer</code> 消费接口</p><p><code>Function</code> 计算转换接口</p><p><code>Predicate</code> 判断接口</p><p><code>Supplier</code> 生产型接口</p><h3 id="常用的默认方法" tabindex="-1">常用的默认方法 <a class="header-anchor" href="#常用的默认方法" aria-label="Permalink to &quot;常用的默认方法&quot;">​</a></h3><p><code>and</code> 判断条件的并集</p><p><code>or</code> 判断条件的交集</p><p><code>negate</code> 判断条件取反</p><h3 id="方法引用" tabindex="-1">方法引用 <a class="header-anchor" href="#方法引用" aria-label="Permalink to &quot;方法引用&quot;">​</a></h3><p><code>类名/对象名::方法名</code></p>`,50),e=[o];function t(c,r,E,y,i,d){return a(),n("div",null,e)}const u=s(p,[["render",t]]);export{h as __pageData,u as default};
