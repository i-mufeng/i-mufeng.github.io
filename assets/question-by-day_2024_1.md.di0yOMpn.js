import{_ as s,o as i,c as a,U as n}from"./chunks/framework.c8sqUf1u.js";const c=JSON.parse('{"title":"","description":"","frontmatter":{"readingTime":false,"hidden":true},"headers":[],"relativePath":"question-by-day/2024/1.md","filePath":"question-by-day/2024/1.md","lastUpdated":1706260982000}'),t={name:"question-by-day/2024/1.md"},l=n(`<h2 id="_1-26" tabindex="-1">1-26 <a class="header-anchor" href="#_1-26" aria-label="Permalink to &quot;1-26&quot;">​</a></h2><h3 id="java-throw-和-throws-的区别" tabindex="-1">JAVA throw 和 throws 的区别？ <a class="header-anchor" href="#java-throw-和-throws-的区别" aria-label="Permalink to &quot;JAVA throw 和 throws 的区别？&quot;">​</a></h3><ul><li>throw 用在方法体内，用来抛出一个异常对象，将这个异常对象传递到调用者处，并终止当前方法的执行。</li><li>throws 用在方法声明后面，跟的是异常类名，可以跟多个异常类名，用逗号隔开，表示当前方法不处理异常，而是提醒该方法的调用者来处理异常（将异常抛给调用者）， 如果调用者也不处理异常，那么继续往上抛，最终抛给 JVM 处理，JVM 会终止程序的运行。</li></ul><h2 id="_1-25" tabindex="-1">1-25 <a class="header-anchor" href="#_1-25" aria-label="Permalink to &quot;1-25&quot;">​</a></h2><h3 id="getname、getcanonicalname-与-getsimplename-的区别" tabindex="-1">getName、getCanonicalName 与 getSimpleName 的区别? <a class="header-anchor" href="#getname、getcanonicalname-与-getsimplename-的区别" aria-label="Permalink to &quot;getName、getCanonicalName 与 getSimpleName 的区别?&quot;">​</a></h3><ul><li>getName()：获取全限定类名，包含包名。</li><li>getCanonicalName()：获取全限定类名，不包含包名。</li><li>getSimpleName()：获取类名，不包含包名。</li></ul><h2 id="_1-24" tabindex="-1">1-24 <a class="header-anchor" href="#_1-24" aria-label="Permalink to &quot;1-24&quot;">​</a></h2><h3 id="什么是反射" tabindex="-1">什么是反射？ <a class="header-anchor" href="#什么是反射" aria-label="Permalink to &quot;什么是反射？&quot;">​</a></h3><p>反射是指程序可以访问、检测和修改它本身状态或行为的一种能力。 Java 反射机制是在运行状态中，对于任意一个类，都能够知道这个类的所有属性和方法； 对于任意一个对象，都能够调用它的任意一个方法和属性。</p><p>如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Test</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> classTest</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() throws Exception {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 获取Class对象的三种方式</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        logger.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">info</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;根据类名:  </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\t</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> User.class);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        logger.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">info</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;根据对象:  </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\t</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> User</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getClass</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">());</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        logger.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">info</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;根据全限定类名:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\t</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Class.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">forName</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;com.test.User&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">));</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 常用的方法</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        logger.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">info</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;获取全限定类名:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\t</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> userClass.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getName</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">());</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        logger.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">info</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;获取类名:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\t</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> userClass.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getSimpleName</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">());</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        logger.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">info</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;实例化:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\t</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> userClass.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">newInstance</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">());</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span></code></pre></div><h2 id="_1-23" tabindex="-1">1-23 <a class="header-anchor" href="#_1-23" aria-label="Permalink to &quot;1-23&quot;">​</a></h2><h3 id="quartz是做什么用的" tabindex="-1">Quartz是做什么用的？ <a class="header-anchor" href="#quartz是做什么用的" aria-label="Permalink to &quot;Quartz是做什么用的？&quot;">​</a></h3><p>Quartz 是开源的 JAVA 任务调度框架，能够灵活且简单的管理定时任务。支持数据库集成、集群、插件等。支持使用 <code>cron-like</code> 表达式。</p><h2 id="_1-22" tabindex="-1">1-22 <a class="header-anchor" href="#_1-22" aria-label="Permalink to &quot;1-22&quot;">​</a></h2><h3 id="如何限制规定泛型的范围" tabindex="-1">如何限制规定泛型的范围？ <a class="header-anchor" href="#如何限制规定泛型的范围" aria-label="Permalink to &quot;如何限制规定泛型的范围？&quot;">​</a></h3><p>可以使用 <code>extends</code> 关键字： <code>class Test&lt;T extends Number&gt;</code> 限制泛型的范围为 Number 及其子类。</p><p>也可以使用 <code>interface</code> 关键字： <code>class Test&lt;T implements Test&gt;</code> 限制泛型的范围为 Test 的实现方法。</p><h2 id="_1-21" tabindex="-1">1-21 <a class="header-anchor" href="#_1-21" aria-label="Permalink to &quot;1-21&quot;">​</a></h2><h3 id="泛型类如何定义使用" tabindex="-1">泛型类如何定义使用？ <a class="header-anchor" href="#泛型类如何定义使用" aria-label="Permalink to &quot;泛型类如何定义使用？&quot;">​</a></h3><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Test</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;{                  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 此处可以随便写标识符号，T是type的简称</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    private</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> T t;                </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 类型由T指定，即：由外部指定  </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> setT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(T </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">){</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.t </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> t;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> T </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(){</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> t;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> TestDemo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">args</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">){</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        Test&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; test </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Test&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        test.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;hello&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(test.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">());</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="_1-20" tabindex="-1">1-20 <a class="header-anchor" href="#_1-20" aria-label="Permalink to &quot;1-20&quot;">​</a></h2><h3 id="this-super-在构造方法中的区别" tabindex="-1">this() &amp; super() 在构造方法中的区别？ <a class="header-anchor" href="#this-super-在构造方法中的区别" aria-label="Permalink to &quot;this() &amp; super() 在构造方法中的区别？&quot;">​</a></h3><ul><li>调用super()必须写在子类构造方法的第一行, 否则编译不通过</li><li>super从子类调用父类构造, this在同一类中调用其他构造均需要放在第一行</li><li>尽管可以用this调用一个构造器, 却不能调用2个</li><li>this和super不能出现在同一个构造器中, 否则编译不通过</li><li>this()、super()都指的对象,不可以在static环境中使用</li><li>本质this指向本对象的指针。super是一个关键字</li></ul><h2 id="_1-19" tabindex="-1">1-19 <a class="header-anchor" href="#_1-19" aria-label="Permalink to &quot;1-19&quot;">​</a></h2><h3 id="什么是-java-移位运算符" tabindex="-1">什么是 Java 移位运算符？ <a class="header-anchor" href="#什么是-java-移位运算符" aria-label="Permalink to &quot;什么是 Java 移位运算符？&quot;">​</a></h3><ul><li><code>&lt;&lt;</code> 左移运算符，num &lt;&lt; 1，相当于 num 乘以 2</li><li><code>&gt;&gt;</code> 右移运算符，num &gt;&gt; 1，相当于 num 除以 2</li><li><code>&gt;&gt;&gt;</code> 无符号右移运算符，忽略符号位，空位都以0补齐</li></ul><h2 id="_1-18" tabindex="-1">1-18 <a class="header-anchor" href="#_1-18" aria-label="Permalink to &quot;1-18&quot;">​</a></h2><h3 id="java-能在-switch-中使用-string-吗" tabindex="-1">JAVA 能在 Switch 中使用 String 吗? <a class="header-anchor" href="#java-能在-switch-中使用-string-吗" aria-label="Permalink to &quot;JAVA 能在 Switch 中使用 String 吗?&quot;">​</a></h3><p>在 Java 7 之前，switch 只能支持 byte、short、char、int、enum 类型，Java 7 之后，可以支持 String 类型。</p><h2 id="_1-17" tabindex="-1">1-17 <a class="header-anchor" href="#_1-17" aria-label="Permalink to &quot;1-17&quot;">​</a></h2><h3 id="为什么dns通常基于-udp" tabindex="-1">为什么DNS通常基于 UDP？ <a class="header-anchor" href="#为什么dns通常基于-udp" aria-label="Permalink to &quot;为什么DNS通常基于 UDP？&quot;">​</a></h3><p>DNS 通常基于 UDP，因为 UDP 没有连接的开销，而且 DNS 服务需要尽可能快地响应请求，而不是等待连接建立。但当数据长度大于512字节时，为保证传输质量，就会使用基于TCP的实现形式。</p><h2 id="_1-16" tabindex="-1">1-16 <a class="header-anchor" href="#_1-16" aria-label="Permalink to &quot;1-16&quot;">​</a></h2><h3 id="tcp-三次握手中-最后一次回复丢失-会发生什么" tabindex="-1">TCP 三次握手中，最后一次回复丢失，会发生什么？ <a class="header-anchor" href="#tcp-三次握手中-最后一次回复丢失-会发生什么" aria-label="Permalink to &quot;TCP 三次握手中，最后一次回复丢失，会发生什么？&quot;">​</a></h3><p>如果最后一次回复丢失，客户端会认为服务端没有收到确认信息，会再次发送确认信息，服务端收到确认信息后，会再次发送确认信息，客户端收到确认信息后，会再次发送确认信息，如此循环，直到连接超时。</p><h2 id="_1-15" tabindex="-1">1-15 <a class="header-anchor" href="#_1-15" aria-label="Permalink to &quot;1-15&quot;">​</a></h2><h3 id="什么是-tcp-三次握手" tabindex="-1">什么是 TCP 三次握手？ <a class="header-anchor" href="#什么是-tcp-三次握手" aria-label="Permalink to &quot;什么是 TCP 三次握手？&quot;">​</a></h3><p>TCP 三次握手是指建立 TCP 连接时，客户端和服务端需要进行三次通信，以确认双方的接收能力和发送能力是否正常。</p><ol><li>发送端首先发送一个带SYN（synchronize）标志的数据包给接收方【第一次的seq序列号是随机产生的，这样是为了网络安全，如果不是随机产生初始序列号，黑客将会以很容易的方式获取到你与其他主机之间的初始化序列号，并且伪造序列号进行攻击】</li><li>接收端收到后，回传一个带有SYN/ACK（acknowledgement）标志的数据包以示传达确认信息【SYN 是为了告诉发送端，发送方到接收方的通道没问题；ACK 用来验证接收方到发送方的通道没问题】</li><li>最后，发送端再回传一个带ACK标志的数据包，代表握手结束若在握手某个过程中某个阶段莫名中断，TCP协议会再次以相同的顺序发送相同的数据包</li></ol><h2 id="_1-14" tabindex="-1">1-14 <a class="header-anchor" href="#_1-14" aria-label="Permalink to &quot;1-14&quot;">​</a></h2><h3 id="什么是754层网络模型" tabindex="-1">什么是754层网络模型？ <a class="header-anchor" href="#什么是754层网络模型" aria-label="Permalink to &quot;什么是754层网络模型？&quot;">​</a></h3><p><img src="https://www.pdai.tech/images/develop/network/dev-network-protocol-1.png" alt="754网络模型及对应" title="754网络模型"></p><p>OSI依层次结构来划分：应用层（Application）、表示层（Presentation）、会话层（Session）、传输层（Transport）、网络层（Network）、数据链路层（Data Link）、物理层（Physical）</p><h2 id="_1-13" tabindex="-1">1-13 <a class="header-anchor" href="#_1-13" aria-label="Permalink to &quot;1-13&quot;">​</a></h2><h3 id="什么是日志系统和日志门面" tabindex="-1">什么是日志系统和日志门面？ <a class="header-anchor" href="#什么是日志系统和日志门面" aria-label="Permalink to &quot;什么是日志系统和日志门面？&quot;">​</a></h3><p><strong>日志系统</strong>是用来记录应用程序运行时的状态信息，比如错误日志、警告日志、调试日志等。</p><ul><li>Log4j</li><li>Logback</li><li>Log4j2</li></ul><p><strong>日志门面</strong>是一种日志系统的抽象，它定义了一组日志系统的公共接口，以便于应用程序通过这组公共接口来记录日志，而不用关心具体的日志系统实现。</p><ul><li>SLF4J</li><li>Commons Logging</li><li>Log4j-to-SLF4J</li></ul><h2 id="_1-12" tabindex="-1">1-12 <a class="header-anchor" href="#_1-12" aria-label="Permalink to &quot;1-12&quot;">​</a></h2><h3 id="什么是-jwt" tabindex="-1">什么是 JWT? <a class="header-anchor" href="#什么是-jwt" aria-label="Permalink to &quot;什么是 JWT?&quot;">​</a></h3><p>JWT（JSON Web Token）是一个开放标准（RFC 7519），它定义了一种紧凑且自包含的方式，用于作为 JSON 对象在各方之间安全地传输信息。</p><p>通过非对称加密算法，可以对 JWT 进行签名，从而保证 JWT 的真实性和完整性。</p><h2 id="_1-11" tabindex="-1">1-11 <a class="header-anchor" href="#_1-11" aria-label="Permalink to &quot;1-11&quot;">​</a></h2><h3 id="spring-security-的原理" tabindex="-1">Spring Security 的原理? <a class="header-anchor" href="#spring-security-的原理" aria-label="Permalink to &quot;Spring Security 的原理?&quot;">​</a></h3><p>SpringSecurity 的核心是一个过滤器链，它由一系列的过滤器组成，每个过滤器负责一项安全控制功能，比如认证、授权、会话管理等。</p><h2 id="_1-10" tabindex="-1">1-10 <a class="header-anchor" href="#_1-10" aria-label="Permalink to &quot;1-10&quot;">​</a></h2><h3 id="什么是-spring-security" tabindex="-1">什么是 Spring Security？ <a class="header-anchor" href="#什么是-spring-security" aria-label="Permalink to &quot;什么是 Spring Security？&quot;">​</a></h3><p>SpringSecurity 是基于 Spring 的安全框架，它提供了较为全面的一套安全性解决方案，并且可以与 SpringMVC、SpringBoot 等框架无缝集成。 它充分利用了依赖注入和 AOP 技术，可以将安全性应用到方法调用或 Web 请求上，为应用系统提供声明式的安全访问控制功能。</p><h2 id="_1-9" tabindex="-1">1-9 <a class="header-anchor" href="#_1-9" aria-label="Permalink to &quot;1-9&quot;">​</a></h2><h3 id="谈谈你对-cglib-的理解" tabindex="-1">谈谈你对 CGLib 的理解？ <a class="header-anchor" href="#谈谈你对-cglib-的理解" aria-label="Permalink to &quot;谈谈你对 CGLib 的理解？&quot;">​</a></h3><p>JDK 动态代理机制只能代理实现接口的类，一般没有实现接口的类不能进行代理。使用 CGLib 实现动态代理，完全不受代理类必须实现接口的限制。</p><p>CGLib 的原理是对指定目标类生成一个子类，并覆盖其中方法实现增强，但因为采用的是继承，所以不能对 final 修饰的类进行代理。</p><p>CGLib 的调用流程就是通过调用拦截器的 intercept 方法来实现对被代理类的调用。而拦截逻辑可以写在 intercept 方法的 invokeSuper(o, objects);的前后实现拦截。</p><h2 id="_1-8" tabindex="-1">1-8 <a class="header-anchor" href="#_1-8" aria-label="Permalink to &quot;1-8&quot;">​</a></h2><h3 id="有哪些aop-advice通知的类型" tabindex="-1">有哪些AOP Advice通知的类型？ <a class="header-anchor" href="#有哪些aop-advice通知的类型" aria-label="Permalink to &quot;有哪些AOP Advice通知的类型？&quot;">​</a></h3><ul><li><strong>前置通知（Before advice） ：</strong> 这些类型的 Advice 在 joinpoint 方法之前执行，并使用 @Before 注解标记进行配置。</li><li><strong>后置通知（After advice） ：</strong> 这些类型的 Advice 在连接点方法之后执行，无论方法退出是正常还是异常返回，并使用 @After 注解标记进行配置。</li><li><strong>返回后通知（After return advice） ：</strong> 这些类型的 Advice 在连接点方法正常执行后执行，并使用@AfterReturning 注解标记进行配置。</li><li><strong>环绕通知（Around advice） ：</strong> 些类型的 Advice 在连接点之前和之后执行，并使用 @Around 注解标记进行配置。</li><li><strong>抛出异常后通知（After throwing advice） ：</strong> 仅在 joinpoint 方法通过抛出异常退出并使用 @AfterThrowing 注解标记配置时执行。</li></ul><h2 id="_1-7" tabindex="-1">1-7 <a class="header-anchor" href="#_1-7" aria-label="Permalink to &quot;1-7&quot;">​</a></h2><h3 id="aop-包含的几个概念" tabindex="-1">AOP 包含的几个概念? <a class="header-anchor" href="#aop-包含的几个概念" aria-label="Permalink to &quot;AOP 包含的几个概念?&quot;">​</a></h3><ul><li><strong>切面（Aspect）：</strong> 一个关注点的模块化，这个关注点可能会横切多个对象。</li><li><strong>连接点（Joinpoint）：</strong> 程序执行过程中的某个特定的点，比如某方法调用的时候或者处理异常的时候。</li><li><strong>通知（Advice）：</strong> 在切面的某个特定的连接点上执行的动作。</li><li><strong>切入点（Pointcut）：</strong> 匹配连接点的断言，在 AOP 中通知和一个切入点表达式关联。</li><li><strong>引入（Introduction）：</strong> 在不修改代码的前提下，引入可以在运行期为类动态地添加一些方法或字段。</li><li><strong>目标对象（Target Object）：</strong> 被一个或者多个切面所通知的对象，也称为被通知（advised）对象。</li><li><strong>织入（Weaving）：</strong> 把切面连接到其它的应用程序类型或者对象上，并创建一个被通知的对象，这些可以在运行期完成，也可以在编译期完成。</li></ul><h2 id="_1-6" tabindex="-1">1-6 <a class="header-anchor" href="#_1-6" aria-label="Permalink to &quot;1-6&quot;">​</a></h2><h3 id="列举一些重要的spring模块。" tabindex="-1">列举一些重要的Spring模块。 <a class="header-anchor" href="#列举一些重要的spring模块。" aria-label="Permalink to &quot;列举一些重要的Spring模块。&quot;">​</a></h3><ul><li>Spring Core：核心容器，提供 IoC 和 DI 的功能。</li><li>Spring AOP：面向切面编程，提供声明式事务管理。</li><li>Spring Aspects：提供与 AspectJ 的集成功能。</li><li>Spring JDBC：提供了 JAVA 数据库连接功能。</li><li>Spring Web：提供了基本的 Web 开发功能。</li><li>Spring MVC：提供了 MVC 模式的 Web 开发功能。</li><li>Spring ORM：提供了对常见的 ORM 框架的支持，如 Hibernate、JPA 等。</li><li>Spring Test：提供了对 JUnit 和 TestNG 的支持。</li><li>Spring Session：提供了对 Session 的集成支持。</li><li>Spring Security：提供了对安全认证和授权的支持。</li></ul><h2 id="_1-5" tabindex="-1">1-5 <a class="header-anchor" href="#_1-5" aria-label="Permalink to &quot;1-5&quot;">​</a></h2><h3 id="什么是监听器" tabindex="-1">什么是监听器？ <a class="header-anchor" href="#什么是监听器" aria-label="Permalink to &quot;什么是监听器？&quot;">​</a></h3><p>监听器是 Servlet 规范中的一种组件，可以监听 ServletContext、HttpSession、ServletRequest 等域对象的创建和销毁，以及域对象中属性的变化。</p><p>配置示例：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyListener</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> implements</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ServletContextListener</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Override</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> contextInitialized</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ServletContextEvent </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">sce</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // ServletContext 创建时执行</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Override</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> contextDestroyed</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ServletContextEvent </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">sce</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // ServletContext 销毁时执行</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>使用示例：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Configuration</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyConfig</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Bean</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ServletListenerRegistrationBean&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">MyListener</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">myListener</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ServletListenerRegistrationBean&lt;&gt;(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyListener</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">());</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="_1-4" tabindex="-1">1-4 <a class="header-anchor" href="#_1-4" aria-label="Permalink to &quot;1-4&quot;">​</a></h2><h3 id="什么是拦截器" tabindex="-1">什么是拦截器？ <a class="header-anchor" href="#什么是拦截器" aria-label="Permalink to &quot;什么是拦截器？&quot;">​</a></h3><p>拦截器是 SpringMVC 的一种组件，可以在请求到达控制器之前或之后执行一些操作，比如记录日志、权限校验等。</p><p>配置示例：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyInterceptor</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> implements</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> HandlerInterceptor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Override</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> boolean</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> preHandle</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(HttpServletRequest </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">request</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, HttpServletResponse </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">response</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, Object </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">handler</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">throws</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Exception {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 在请求到达控制器之前执行</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Override</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> postHandle</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(HttpServletRequest </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">request</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, HttpServletResponse </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">response</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, Object </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">handler</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, ModelAndView </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">modelAndView</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">throws</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Exception {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 在请求到达控制器之后，视图渲染之前执行</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Override</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> afterCompletion</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(HttpServletRequest </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">request</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, HttpServletResponse </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">response</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, Object </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">handler</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, Exception </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">ex</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">throws</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Exception {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 在视图渲染之后执行</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>使用示例：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Configuration</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyConfig</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> implements</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> WebMvcConfigurer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Override</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> addInterceptors</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(InterceptorRegistry </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">registry</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        registry.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addInterceptor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyInterceptor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addPathPatterns</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/**&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">excludePathPatterns</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/hello&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="_1-3" tabindex="-1">1-3 <a class="header-anchor" href="#_1-3" aria-label="Permalink to &quot;1-3&quot;">​</a></h2><h3 id="spring-boot-的默认编码是" tabindex="-1">Spring Boot 的默认编码是？ <a class="header-anchor" href="#spring-boot-的默认编码是" aria-label="Permalink to &quot;Spring Boot 的默认编码是？&quot;">​</a></h3><p>SpringBoot 的默认编码是 <code>UTF-8</code>。可以通过 <code>spring.http.encoding.charset</code> 属性来修改编码。</p><h2 id="_1-2" tabindex="-1">1-2 <a class="header-anchor" href="#_1-2" aria-label="Permalink to &quot;1-2&quot;">​</a></h2><h3 id="spring-boot-应用如何优雅关闭" tabindex="-1">Spring Boot 应用如何优雅关闭？ <a class="header-anchor" href="#spring-boot-应用如何优雅关闭" aria-label="Permalink to &quot;Spring Boot 应用如何优雅关闭？&quot;">​</a></h3><p>SpringBoot 应用可以通过 <code>SpringApplication.exit()</code> 方法来优雅关闭，该方法可以用在任何地方。</p><h2 id="_1-1" tabindex="-1">1-1 <a class="header-anchor" href="#_1-1" aria-label="Permalink to &quot;1-1&quot;">​</a></h2><h3 id="spring-boot-怎么注册事件监听器" tabindex="-1">Spring Boot 怎么注册事件监听器？ <a class="header-anchor" href="#spring-boot-怎么注册事件监听器" aria-label="Permalink to &quot;Spring Boot 怎么注册事件监听器？&quot;">​</a></h3><p>SpringBoot 可以通过 <code>@EventListener</code> 注解来注册事件监听器，该注解可以用在方法上，也可以用在类上。</p>`,97),h=[l];function e(p,k,r,d,o,E){return i(),a("div",null,h)}const y=s(t,[["render",e]]);export{c as __pageData,y as default};
