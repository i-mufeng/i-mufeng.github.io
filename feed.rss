<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/">
    <channel>
        <title>Mblog - 沐风的个人博客</title>
        <link>https://www.imufeng.cn</link>
        <description>但愿岁月如客，来去皆从容。（后端开发技术交流）</description>
        <lastBuildDate>Mon, 25 Mar 2024 08:26:09 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <language>zh-cn</language>
        <image>
            <title>Mblog - 沐风的个人博客</title>
            <url>https://www.imufeng.cn/logo.svg</url>
            <link>https://www.imufeng.cn</link>
        </image>
        <copyright>Mblog © 2021-2024 Created by 沐风</copyright>
        <item>
            <link>https://www.imufeng.cn/full-stack/</link>
            <guid>https://www.imufeng.cn/full-stack/</guid>
            <pubDate>Mon, 25 Mar 2024 08:25:06 GMT</pubDate>
            <content:encoded><![CDATA[<h2 id="一、后端技术分享" tabindex="-1">一、后端技术分享 <a class="header-anchor" href="#一、后端技术分享" aria-label="Permalink to &quot;一、后端技术分享&quot;">&ZeroWidthSpace;</a></h2>
<h2 id="二、前端技术分享" tabindex="-1">二、前端技术分享 <a class="header-anchor" href="#二、前端技术分享" aria-label="Permalink to &quot;二、前端技术分享&quot;">&ZeroWidthSpace;</a></h2>
<h2 id="三、系统运维交流" tabindex="-1">三、系统运维交流 <a class="header-anchor" href="#三、系统运维交流" aria-label="Permalink to &quot;三、系统运维交流&quot;">&ZeroWidthSpace;</a></h2>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[算法和数据结构]]></title>
            <link>https://www.imufeng.cn/computer-basics/data-structure/</link>
            <guid>https://www.imufeng.cn/computer-basics/data-structure/</guid>
            <pubDate>Mon, 25 Mar 2024 08:25:06 GMT</pubDate>
            <content:encoded><![CDATA[<h1 id="算法和数据结构" tabindex="-1">算法和数据结构 <a class="header-anchor" href="#算法和数据结构" aria-label="Permalink to &quot;算法和数据结构&quot;">&ZeroWidthSpace;</a></h1>
<h2 id="目录" tabindex="-1">目录 <a class="header-anchor" href="#目录" aria-label="Permalink to &quot;目录&quot;">&ZeroWidthSpace;</a></h2>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[计算机网络]]></title>
            <link>https://www.imufeng.cn/computer-basics/network/</link>
            <guid>https://www.imufeng.cn/computer-basics/network/</guid>
            <pubDate>Mon, 25 Mar 2024 08:25:06 GMT</pubDate>
            <content:encoded><![CDATA[<h1 id="计算机网络" tabindex="-1">计算机网络 <a class="header-anchor" href="#计算机网络" aria-label="Permalink to &quot;计算机网络&quot;">&ZeroWidthSpace;</a></h1>
<h2 id="目录" tabindex="-1">目录 <a class="header-anchor" href="#目录" aria-label="Permalink to &quot;目录&quot;">&ZeroWidthSpace;</a></h2>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[操作系统]]></title>
            <link>https://www.imufeng.cn/computer-basics/operating-system/</link>
            <guid>https://www.imufeng.cn/computer-basics/operating-system/</guid>
            <pubDate>Mon, 25 Mar 2024 08:25:06 GMT</pubDate>
            <content:encoded><![CDATA[<h1 id="操作系统" tabindex="-1">操作系统 <a class="header-anchor" href="#操作系统" aria-label="Permalink to &quot;操作系统&quot;">&ZeroWidthSpace;</a></h1>
<h2 id="目录" tabindex="-1">目录 <a class="header-anchor" href="#目录" aria-label="Permalink to &quot;目录&quot;">&ZeroWidthSpace;</a></h2>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[数据库]]></title>
            <link>https://www.imufeng.cn/full-stack/database/</link>
            <guid>https://www.imufeng.cn/full-stack/database/</guid>
            <pubDate>Mon, 25 Mar 2024 08:25:06 GMT</pubDate>
            <content:encoded><![CDATA[<h1 id="数据库" tabindex="-1">数据库 <a class="header-anchor" href="#数据库" aria-label="Permalink to &quot;数据库&quot;">&ZeroWidthSpace;</a></h1>
<h2 id="目录" tabindex="-1">目录 <a class="header-anchor" href="#目录" aria-label="Permalink to &quot;目录&quot;">&ZeroWidthSpace;</a></h2>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[前端笔记]]></title>
            <link>https://www.imufeng.cn/full-stack/front-end/</link>
            <guid>https://www.imufeng.cn/full-stack/front-end/</guid>
            <pubDate>Mon, 25 Mar 2024 08:25:06 GMT</pubDate>
            <content:encoded><![CDATA[<h1 id="前端笔记" tabindex="-1">前端笔记 <a class="header-anchor" href="#前端笔记" aria-label="Permalink to &quot;前端笔记&quot;">&ZeroWidthSpace;</a></h1>
<h2 id="目录" tabindex="-1">目录 <a class="header-anchor" href="#目录" aria-label="Permalink to &quot;目录&quot;">&ZeroWidthSpace;</a></h2>
<h3 id="css布局篇" tabindex="-1">css布局篇 <a class="header-anchor" href="#css布局篇" aria-label="Permalink to &quot;css布局篇&quot;">&ZeroWidthSpace;</a></h3>
<ul>
<li><a href="./flex.html">浅学 Flex 流式布局</a></li>
</ul>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Java]]></title>
            <link>https://www.imufeng.cn/full-stack/java/</link>
            <guid>https://www.imufeng.cn/full-stack/java/</guid>
            <pubDate>Mon, 25 Mar 2024 08:25:06 GMT</pubDate>
            <content:encoded><![CDATA[<h1 id="java" tabindex="-1">Java <a class="header-anchor" href="#java" aria-label="Permalink to &quot;Java&quot;">&ZeroWidthSpace;</a></h1>
<h2 id="目录" tabindex="-1">目录 <a class="header-anchor" href="#目录" aria-label="Permalink to &quot;目录&quot;">&ZeroWidthSpace;</a></h2>
<h3 id="面向对象" tabindex="-1">面向对象 <a class="header-anchor" href="#面向对象" aria-label="Permalink to &quot;面向对象&quot;">&ZeroWidthSpace;</a></h3>
<ul>
<li><a href="./oop/abstract.html">抽象类和抽象方法</a></li>
</ul>
<h3 id="重学-java-设计模式" tabindex="-1">重学 JAVA 设计模式 <a class="header-anchor" href="#重学-java-设计模式" aria-label="Permalink to &quot;重学 JAVA 设计模式&quot;">&ZeroWidthSpace;</a></h3>
<ul>
<li><a href="./design-patterns/">重学 JAVA 设计模式</a></li>
</ul>
<h3 id="java-特性分享" tabindex="-1">JAVA 特性分享 <a class="header-anchor" href="#java-特性分享" aria-label="Permalink to &quot;JAVA 特性分享&quot;">&ZeroWidthSpace;</a></h3>
<ul>
<li><a href="./characteristic/functional.html">Java8新特性详解</a></li>
</ul>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[其他]]></title>
            <link>https://www.imufeng.cn/full-stack/other/</link>
            <guid>https://www.imufeng.cn/full-stack/other/</guid>
            <pubDate>Mon, 25 Mar 2024 08:25:06 GMT</pubDate>
            <content:encoded><![CDATA[<h1 id="其他" tabindex="-1">其他 <a class="header-anchor" href="#其他" aria-label="Permalink to &quot;其他&quot;">&ZeroWidthSpace;</a></h1>
<h2 id="目录" tabindex="-1">目录 <a class="header-anchor" href="#目录" aria-label="Permalink to &quot;目录&quot;">&ZeroWidthSpace;</a></h2>
<ul>
<li><a href="./xpath.html">XPATH 学习笔记</a></li>
<li><a href="./redis.html">Redis 自学笔记</a></li>
</ul>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Rust]]></title>
            <link>https://www.imufeng.cn/full-stack/rust/</link>
            <guid>https://www.imufeng.cn/full-stack/rust/</guid>
            <pubDate>Mon, 25 Mar 2024 08:25:06 GMT</pubDate>
            <content:encoded><![CDATA[<h1 id="rust" tabindex="-1">Rust <a class="header-anchor" href="#rust" aria-label="Permalink to &quot;Rust&quot;">&ZeroWidthSpace;</a></h1>
<h2 id="目录" tabindex="-1">目录 <a class="header-anchor" href="#目录" aria-label="Permalink to &quot;目录&quot;">&ZeroWidthSpace;</a></h2>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[每日一题]]></title>
            <link>https://www.imufeng.cn/interview/question-by-day/</link>
            <guid>https://www.imufeng.cn/interview/question-by-day/</guid>
            <pubDate>Mon, 25 Mar 2024 08:25:06 GMT</pubDate>
            <description><![CDATA[每天至少一道全栈题目分享，范围不限。]]></description>
            <content:encoded><![CDATA[<h1 id="每日一题" tabindex="-1">每日一题 <a class="header-anchor" href="#每日一题" aria-label="Permalink to &quot;每日一题&quot;">&ZeroWidthSpace;</a></h1>
<blockquote>
<p>每日一题从 <code>2023年09月27日</code> 开始记录，不限分类，欢迎留言监督。</p>
</blockquote>
<ul>
<li><a href="./2023/">2023</a></li>
<li><a href="./2024/">2024</a></li>
</ul>
]]></content:encoded>
        </item>
        <item>
            <link>https://www.imufeng.cn/interview/skills/</link>
            <guid>https://www.imufeng.cn/interview/skills/</guid>
            <pubDate>Mon, 25 Mar 2024 08:25:06 GMT</pubDate>
            <content:encoded><![CDATA[<h2 id="目录" tabindex="-1">目录 <a class="header-anchor" href="#目录" aria-label="Permalink to &quot;目录&quot;">&ZeroWidthSpace;</a></h2>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[生活随笔]]></title>
            <link>https://www.imufeng.cn/notes/life-notes/</link>
            <guid>https://www.imufeng.cn/notes/life-notes/</guid>
            <pubDate>Mon, 25 Mar 2024 08:25:06 GMT</pubDate>
            <content:encoded><![CDATA[<h1 id="生活随笔" tabindex="-1">生活随笔 <a class="header-anchor" href="#生活随笔" aria-label="Permalink to &quot;生活随笔&quot;">&ZeroWidthSpace;</a></h1>
<h2 id="目录" tabindex="-1">目录 <a class="header-anchor" href="#目录" aria-label="Permalink to &quot;目录&quot;">&ZeroWidthSpace;</a></h2>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[读书笔记]]></title>
            <link>https://www.imufeng.cn/notes/reading-notes/</link>
            <guid>https://www.imufeng.cn/notes/reading-notes/</guid>
            <pubDate>Mon, 25 Mar 2024 08:25:06 GMT</pubDate>
            <content:encoded><![CDATA[<h1 id="读书笔记" tabindex="-1">读书笔记 <a class="header-anchor" href="#读书笔记" aria-label="Permalink to &quot;读书笔记&quot;">&ZeroWidthSpace;</a></h1>
<h2 id="目录" tabindex="-1">目录 <a class="header-anchor" href="#目录" aria-label="Permalink to &quot;目录&quot;">&ZeroWidthSpace;</a></h2>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[科技周报]]></title>
            <link>https://www.imufeng.cn/notes/technology-weekly/</link>
            <guid>https://www.imufeng.cn/notes/technology-weekly/</guid>
            <pubDate>Mon, 25 Mar 2024 08:25:06 GMT</pubDate>
            <content:encoded><![CDATA[<h1 id="科技周报" tabindex="-1">科技周报 <a class="header-anchor" href="#科技周报" aria-label="Permalink to &quot;科技周报&quot;">&ZeroWidthSpace;</a></h1>
<h2 id="目录" tabindex="-1">目录 <a class="header-anchor" href="#目录" aria-label="Permalink to &quot;目录&quot;">&ZeroWidthSpace;</a></h2>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[浅学Flex流式布局]]></title>
            <link>https://www.imufeng.cn/full-stack/front-end/flex.html</link>
            <guid>https://www.imufeng.cn/full-stack/front-end/flex.html</guid>
            <pubDate>Mon, 25 Mar 2024 08:19:18 GMT</pubDate>
            <description><![CDATA[Flex（Flexible Box）弹性布局，用于为盒装模型提供较大的灵活性。能够灵活，充分利用浏览器的空间，减少了多端适配的难度和成本。]]></description>
            <content:encoded><![CDATA[<h1 id="浅学-flex-流式布局" tabindex="-1">浅学 Flex 流式布局 <a class="header-anchor" href="#浅学-flex-流式布局" aria-label="Permalink to &quot;浅学 Flex 流式布局&quot;">&ZeroWidthSpace;</a></h1>
<p>Flex（Flexible Box）流式布局，用于为盒装模型提供较大的灵活性。任何容器都可以被指定为 flex 布局：<code>display: flex</code> 或 <code>display:inline-flex</code>。本文主要参考<a href="https://www.runoob.com/w3cnote/flex-grammar.html" target="_blank" rel="noreferrer">菜鸟教程</a>及<a href="https://www.ruanyifeng.com/blog/2015/07/flex-grammar.html" target="_blank" rel="noreferrer">阮一峰老师的FLEX教程</a>。</p>
<h2 id="一、简介" tabindex="-1">一、简介 <a class="header-anchor" href="#一、简介" aria-label="Permalink to &quot;一、简介&quot;">&ZeroWidthSpace;</a></h2>
<h3 id="基本概念" tabindex="-1">基本概念 <a class="header-anchor" href="#基本概念" aria-label="Permalink to &quot;基本概念&quot;">&ZeroWidthSpace;</a></h3>
<p>采用 Flex 布局的元素被称为 Flex 容器（container），它的所有元素会自动成为容器成员，成为 Flex 项目（item）。容器中默认存在两根轴：水平主轴（main axis）和垂直的交叉轴（cross axis），主轴开始的位置叫做 <code>main start</code>，结束的位置叫做 <code>main end</code>；交叉轴类似。项目默认沿主轴排列，单个 item 占据的主轴空间叫做 <code>mian size</code> ，占据的交叉轴空间叫做 <code>cross size</code>；</p>
<h3 id="容器属性" tabindex="-1">容器属性 <a class="header-anchor" href="#容器属性" aria-label="Permalink to &quot;容器属性&quot;">&ZeroWidthSpace;</a></h3>
<p>flex 容器可以已配置以下六个属性<code>flex-direction</code>、<code>flex-wrap</code>、<code>flex-flow</code>、<code>justify-content</code>、<code>align-items</code>、<code>align-content</code>。</p>
<ul>
<li><code>flex-direction</code> 决定主轴的方向
<ul>
<li><code>row</code> 水平向右</li>
<li><code>row-reverse</code> 水平向左</li>
<li><code>column</code> 垂直向下</li>
<li><code>column-reverse</code> 垂直向上</li>
</ul>
</li>
<li><code>flex-wrap</code> 决定 item 的换行方式
<ul>
<li><code>nowrap</code> 不换行</li>
<li><code>wrap</code> 向下换行</li>
<li><code>wrap-reverse</code> 向上换行</li>
</ul>
</li>
<li><code>flex-flow</code>  <code>flex-direction</code> 和 <code>flex-wrap</code> 结合
<ul>
<li>默认：<code> flex-flow: row nowrap</code></li>
</ul>
</li>
<li><code>justify-content</code> item 基于主轴的对齐方式
<ul>
<li><code>flex-start</code>（默认值）：左对齐</li>
<li><code>flex-end</code>：右对齐</li>
<li><code>center</code>： 居中</li>
<li><code>space-between</code>：两端对齐，项目之间的间隔都相等。</li>
<li><code>space-around</code>：每个项目两侧的间隔相等。所以，项目之间的间隔比项目与边框的间隔大一倍。</li>
</ul>
</li>
<li><code>align-items</code> item 基于交叉轴的对齐方式
<ul>
<li><code>flex-start</code>：交叉轴的起点对齐。</li>
<li><code>flex-end</code>：交叉轴的终点对齐。</li>
<li><code>center</code>：交叉轴的中点对齐。</li>
<li><code>baseline</code>: 项目的第一行文字的基线对齐。</li>
<li><code>stretch</code>（默认值）：如果项目未设置高度或设为auto，将占满整个容器的高度。</li>
</ul>
</li>
<li><code>align-content</code> 多根轴线的对齐方式
<ul>
<li><code>flex-start</code>：与交叉轴的起点对齐。</li>
<li><code>flex-end</code>：与交叉轴的终点对齐。</li>
<li><code>center</code>：与交叉轴的中点对齐。</li>
<li><code>space-between</code>：与交叉轴两端对齐，轴线之间的间隔平均分布。</li>
<li><code>space-around</code>：每根轴线两侧的间隔都相等。所以，轴线之间的间隔比轴线与边框的间隔大一倍。</li>
<li><code>stretch</code>（默认值）：轴线占满整个交叉轴。</li>
</ul>
</li>
</ul>
<h3 id="项目属性" tabindex="-1">项目属性 <a class="header-anchor" href="#项目属性" aria-label="Permalink to &quot;项目属性&quot;">&ZeroWidthSpace;</a></h3>
<p>以下六个属性设置在 item：<code>order</code>、<code>flex-grow</code>、<code>flex-shrink</code>、<code>flex-basis</code>、<code>flex</code>、<code>align-self</code>。</p>
<ul>
<li>
<p><code>order</code> 定义项目的排列顺序，越小越靠前，默认为0。</p>
</li>
<li>
<p><code>flex-grow</code> 定义项目的放大比例，默认为0</p>
</li>
<li>
<p><code>flex-shrink</code> 定义项目的缩小比例，默认为1</p>
<blockquote>
<p>如果所有项目的<code>flex-shrink</code>属性都为1，当空间不足时，都将等比例缩小。如果一个项目的<code>flex-shrink</code>属性为0，其他项目都为1，则空间不足时，前者不缩小。</p>
</blockquote>
</li>
<li>
<p><code>flex-basis</code> 定义在分配多余空间之前，项目占据的主轴空间（main size）</p>
<blockquote>
<p>它可以设为跟<code>width</code>或<code>height</code>属性一样的值（比如350px），则项目将占据固定空间。</p>
</blockquote>
</li>
<li>
<p><code>flex</code>属性是<code>flex-grow</code>, <code>flex-shrink</code> 和 <code>flex-basis</code>的简写，默认值为<code>0 1 auto</code>。</p>
<blockquote>
<p>该属性有两个快捷值：<code>auto</code> (<code>1 1 auto</code>) 和 none (<code>0 0 auto</code>)。</p>
<p>建议优先使用这个属性，而不是单独写三个分离的属性，因为浏览器会推算相关值。</p>
</blockquote>
</li>
<li>
<p><code>align-self</code> 允许单个项目有与其他项目不一样的对齐方式，可覆盖<code>align-items</code>属性。默认值为<code>auto</code>，表示继承父元素的<code>align-items</code>属性，如果没有父元素，则等同于<code>stretch</code>。</p>
</li>
</ul>
<h2 id="二、实战" tabindex="-1">二、实战 <a class="header-anchor" href="#二、实战" aria-label="Permalink to &quot;二、实战&quot;">&ZeroWidthSpace;</a></h2>
<p>类似于骰子的布局，它的一面最多可以放九个点，该案例将会实现1-6的点数。</p>
<p><img src="https://cdn.imufeng.cn/mblog/399147ab4258f7a73aa7a57ac3469a26.png" alt="image-20240325110603932"></p>
<h3 id="准备" tabindex="-1">准备 <a class="header-anchor" href="#准备" aria-label="Permalink to &quot;准备&quot;">&ZeroWidthSpace;</a></h3>
<p>开始准备工作，如下方部分 HTML 代码，container为主体部分，<code>face-n</code> 代表数字 n 的骰子，pip 为一个点。</p>
<div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">div</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"container"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  &#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">div</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"face-1"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    &#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">span</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"pip"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>&#x3C;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">span</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  &#x3C;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  &#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">div</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"face-4"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">    &#x3C;!-- 4、6 需要分为两列，5需要分为三列--></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    &#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">div</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"colum"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">      &#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">span</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"pip"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>&#x3C;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">span</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">      &#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">span</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"pip"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>&#x3C;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">span</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    &#x3C;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    &#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">div</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"colum"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">      &#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">span</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"pip"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>&#x3C;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">span</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">      &#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">span</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"pip"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>&#x3C;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">span</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    &#x3C;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  &#x3C;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span></code></pre>
</div><p>然后，我们为这些基本元素编写样式：</p>
<div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">    margin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">    padding</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">.container</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">    display</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">flex</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">    justify-content</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">space-around</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">    flex-wrap</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">wrap</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">.pip</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">    display</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">block</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">    width</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">24</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">px</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">    height</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">24</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">px</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">    border-radius</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">50</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">%</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">    margin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">4</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">px</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">    background-color</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">#333</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">    box-shadow</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">inset</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> 0</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> 3</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">px</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> #111</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">inset</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> 0</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> -3</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">px</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> #555</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">[</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">class</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">^=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"face"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">] {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">    margin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">16</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">px</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">    padding</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">4</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">px</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">    background-color</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">#e7e7e7</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">    width</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">104</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">px</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">    height</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">104</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">px</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">    object-fit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">contain</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">    box-shadow</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">inset</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> 0</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> 5</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">px</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> white</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">    inset</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> 0</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> -5</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">px</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> #bbb</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">    inset</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> 5</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">px</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> 0</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> #d7d7d7</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">    inset</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> -5</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">px</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> 0</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> #d7d7d7</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">    border-radius</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">10</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">%</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span></code></pre>
</div><p>在浏览器中运行，我们便可以得到如下效果：</p>
<p><img src="https://cdn.imufeng.cn/mblog/596d698ec729b9d6684cfdb25583d0d2.png" alt="image-20240325141728459"></p>
<h3 id="实现" tabindex="-1">实现 <a class="header-anchor" href="#实现" aria-label="Permalink to &quot;实现&quot;">&ZeroWidthSpace;</a></h3>
<div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">.face-1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">    display</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">flex</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">    justify-content</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">center</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">    align-items</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">center</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span></code></pre>
</div><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">.face-2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">    display</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">flex</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">    justify-content</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">space-between</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    .</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">pip</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">:nth-of-type(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">        align-self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">flex-end</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span></code></pre>
</div><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">.face-3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">    display</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">flex</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">    justify-content</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">space-between</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    .</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">pip</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">:nth-of-type(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">        align-self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">center</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">    .pip:nth-of-type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">        align-self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">flex-end</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span></code></pre>
</div><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">.face-4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">    display</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">flex</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">    justify-content</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">space-between</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">    flex-direction</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">column</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    .</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">colum</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">        display</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">flex</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">        justify-content</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">space-between</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span></code></pre>
</div><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">.face-5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">    display</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">flex</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">    justify-content</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">space-between</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">    flex-direction</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">column</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    .</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">colum</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">        display</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">flex</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">        justify-content</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">space-between</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">    .colum:nth-of-type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">        justify-content</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">center</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span></code></pre>
</div><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">.face-6</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">    display</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">flex</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">    justify-content</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">space-between</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    .</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">colum</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">        display</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">flex</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">        justify-content</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">space-between</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">        flex-direction</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">column</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span></code></pre>
</div><p>效果如下</p>
<p><img src="https://cdn.imufeng.cn/mblog/75537b8811f22a858e299cbfd6cc6b12.png" alt="image-20240325142121252"></p>
<p>项目源码可以在 <a href="https://codepen.io/imufeng/pen/LYvLZmW" target="_blank" rel="noreferrer">A Pen by mufeng (codepen.io)</a> 看到，感谢您的支持。</p>
]]></content:encoded>
            <enclosure url="https://cdn.imufeng.cn/mblog/5d23262fa4383aa19d21085d1bf8f1dd.png" length="0" type="image/png"/>
        </item>
        <item>
            <title><![CDATA[Redis自学笔记]]></title>
            <link>https://www.imufeng.cn/full-stack/other/redis.html</link>
            <guid>https://www.imufeng.cn/full-stack/other/redis.html</guid>
            <pubDate>Mon, 25 Mar 2024 08:19:18 GMT</pubDate>
            <description><![CDATA[Redis 是一个开源（BSD许可）的，内存中的数据结构存储系统，它可以用作数据库、缓存和消息中间件。]]></description>
            <content:encoded><![CDATA[<h1 id="redis-自学笔记" tabindex="-1">Redis 自学笔记 <a class="header-anchor" href="#redis-自学笔记" aria-label="Permalink to &quot;Redis 自学笔记&quot;">&ZeroWidthSpace;</a></h1>
<h2 id="一、redis" tabindex="-1">一、Redis <a class="header-anchor" href="#一、redis" aria-label="Permalink to &quot;一、Redis&quot;">&ZeroWidthSpace;</a></h2>
<blockquote>
<p>Redis官方网站：<a href="https://redis.io/" target="_blank" rel="noreferrer">https://redis.io/</a></p>
</blockquote>
<h3 id="_1-1-redis简介" tabindex="-1">1.1 Redis简介 <a class="header-anchor" href="#_1-1-redis简介" aria-label="Permalink to &quot;1.1 Redis简介&quot;">&ZeroWidthSpace;</a></h3>
<p>Redis 是一个开源（BSD许可）的，内存中的数据结构存储系统，它可以用作数据库、缓存和消息中间件。 它支持多种类型的数据结构，如 字符串（strings）， 散列（hashes）， 列表（lists）， 集合（sets）， 有序集合（sorted sets） 与范围查询， bitmaps， hyperloglogs 和 地理空间（geospatial） 索引半径查询。 Redis 内置了 复制（replication），LUA脚本（Lua scripting）， LRU驱动事件（LRU eviction），事务（transactions） 和不同级别的 磁盘持久化（persistence）， 并通过 Redis哨兵（Sentinel）和自动分区（Cluster）提供高可用性（high availability）。</p>
<h3 id="_1-2、redis下载" tabindex="-1">1.2、Redis下载 <a class="header-anchor" href="#_1-2、redis下载" aria-label="Permalink to &quot;1.2、Redis下载&quot;">&ZeroWidthSpace;</a></h3>
<blockquote>
<p>下载地址：<a href="https://download.redis.io/releases/redis-6.2.5.tar.gz" target="_blank" rel="noreferrer">https://download.redis.io/releases/redis-6.2.5.tar.gz</a></p>
</blockquote>
<p>Linux端下载：</p>
<div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">wget</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> https://download.redis.io/releases/redis-6.2.5.tar.gz</span></span></code></pre>
</div><h2 id="二、redis安装" tabindex="-1">二、Redis安装 <a class="header-anchor" href="#二、redis安装" aria-label="Permalink to &quot;二、Redis安装&quot;">&ZeroWidthSpace;</a></h2>
<ol>
<li>
<p>解压</p>
<div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">tar</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> -zxvf</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> redis-6.2.5.tar.gz</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> -C</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> /usr/src</span></span></code></pre>
</div><ul>
<li>tar：Linux打包为tar的命令（-zxvf为解压tar.gz文件）</li>
<li>-C：指定解压目录（编译安装时习惯上源码都解压到<code>/usr/src</code>）</li>
</ul>
</li>
<li>
<p>编译安装</p>
<blockquote>
<p>在源码编译过程中，需要用到make命令，还需要安装c语言环境</p>
</blockquote>
<p>安装make和c语言环境：</p>
<div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">yum</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> -y</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> gcc</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> gcc-c++</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> make</span></span></code></pre>
</div><p>转到源码所在的目录</p>
<div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> /usr/src/redis-6.2.5</span></span></code></pre>
</div><p>编译安装</p>
<div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">make</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> PREFIX=/usr/local/redis</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> install</span></span></code></pre>
</div><ul>
<li>make：编译</li>
<li>PREFIX：指定安装目录（编译安装过程中，一般将软件安装到<code>/usr/local</code>目录下）</li>
<li>install：安装</li>
</ul>
</li>
</ol>
<blockquote>
<p>编译安装完成后，源码在<code>/usr/src/redis-6.2.5</code>目录下，安装在<code>/usr/local/redis</code>目录下
如果安装过程中出错，显示找不到某某某.h的文件，可能是你的环境缺少，这时在你安装了环境后重新编译时，可能会报错。</p>
<p>你需要使用<code>make distclean</code>清除之前编译安装生成的文件的重新开始编译安装</p>
</blockquote>
<h2 id="三、配置redis" tabindex="-1">三、配置Redis <a class="header-anchor" href="#三、配置redis" aria-label="Permalink to &quot;三、配置Redis&quot;">&ZeroWidthSpace;</a></h2>
<ol>
<li>
<p>在<code>/usr/local/redis</code>目录下，新建一个etc目录用于存放配置文件<code>redis.conf</code></p>
<div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> /usr/local/redis/</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">mkdir</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> etc</span></span></code></pre>
</div></li>
<li>
<p>将<code>redis.conf</code>拷贝到刚才新建的目录下</p>
<blockquote>
<p>这里可以将原配置文件中的注释和空行全都过滤掉</p>
</blockquote>
<div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">cat</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> /usr/src/redis-6.2.5/redis.conf</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> grep</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> -v</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> '#'</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> grep</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> -v</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> '^$'</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> ></span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> /usr/local/redis/etc/redis.conf</span></span></code></pre>
</div></li>
<li>
<p>配置Redis使其在启动后后台运行</p>
<div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">vim</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> etc/redis.conf</span></span></code></pre>
</div><p>找到<code>daemonize</code>选项将其设置为yes</p>
</li>
</ol>
<h2 id="四、测试redis" tabindex="-1">四、测试Redis <a class="header-anchor" href="#四、测试redis" aria-label="Permalink to &quot;四、测试Redis&quot;">&ZeroWidthSpace;</a></h2>
<h3 id="_4-1-启动redis" tabindex="-1">4.1 启动Redis <a class="header-anchor" href="#_4-1-启动redis" aria-label="Permalink to &quot;4.1 启动Redis&quot;">&ZeroWidthSpace;</a></h3>
<p>在目录下输入./bin/redis-server来使用默认配置启动</p>
<p>如果报错端口被占用</p>
<div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span>Could not create server TCP listening socket *:6379: bind: Address already in use</span></span></code></pre>
</div><p>可以使用<code>lsof -i:6379</code>来查看6379端口的占用情况，在得到程序相关的<code>PID号</code>之后，可以使用<code>kill -9 PID</code>来杀死进程</p>
<p>使用配置文件启动</p>
<div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">./bin/redis-server</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> ./etc/redis.conf</span></span></code></pre>
</div><h3 id="_4-2-连接redis" tabindex="-1">4.2 连接Redis <a class="header-anchor" href="#_4-2-连接redis" aria-label="Permalink to &quot;4.2 连接Redis&quot;">&ZeroWidthSpace;</a></h3>
<div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">./bin/redis-cli</span></span></code></pre>
</div><p>测试：</p>
<div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">127.0.0.1:6379></span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> ping</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">PONG</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">127.0.0.1:6379></span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> ping</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> mufeng</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">"mufeng"</span></span></code></pre>
</div><blockquote>
<p>至此，Redis的基础安装结束</p>
</blockquote>
<h2 id="五、redis特性" tabindex="-1">五、Redis特性 <a class="header-anchor" href="#五、redis特性" aria-label="Permalink to &quot;五、Redis特性&quot;">&ZeroWidthSpace;</a></h2>
<h3 id="_5-1-redis远程管理软件" tabindex="-1">5.1 Redis远程管理软件 <a class="header-anchor" href="#_5-1-redis远程管理软件" aria-label="Permalink to &quot;5.1 Redis远程管理软件&quot;">&ZeroWidthSpace;</a></h3>
<p>链接地址：<a href="https://github.com/qishibo/AnotherRedisDesktopManager/releases" target="_blank" rel="noreferrer">https://github.com/qishibo/AnotherRedisDesktopManager/releases</a></p>
<p>配置文件修改：</p>
<div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span>bind 0.0.0.0		#允许所有网段远程访问，如需多个网段访问，可以用空格隔开</span></span>
<span class="line"><span>protected-mode no	#关闭安全模式</span></span></code></pre>
</div><blockquote>
<p>需要开放防火墙端口</p>
</blockquote>
<h3 id="_5-2-redis配置文件解析" tabindex="-1">5.2 Redis配置文件解析 <a class="header-anchor" href="#_5-2-redis配置文件解析" aria-label="Permalink to &quot;5.2 Redis配置文件解析&quot;">&ZeroWidthSpace;</a></h3>
<p>配置文件解析：<a href="https://www.runoob.com/redis/redis-conf.html" target="_blank" rel="noreferrer">https://www.runoob.com/redis/redis-conf.html</a></p>
<p>基础配置：</p>
<ul>
<li><code>bind 0.0.0.0</code>    允许访问的地址</li>
<li><code>protected-mode no</code>    安全模式，默认打开</li>
<li><code>daemonize yes</code>    是否后台启动，默认为no，为前台启动</li>
<li><code>loglevel notice</code>    日志等级，有四个等级</li>
<li><code>logfile &quot;&quot;</code>     日志文件存储位置，默认在前台运行会输出到控制台，在后台运行会输出到<code>/dev/null</code></li>
<li><code>databases 16</code>    默认有16个数据库，在Redis中，数据库并非严格隔离</li>
<li><code>port 6379</code>    Redis服务的默认端口号为6379</li>
<li><code>requirepass</code></li>
</ul>
<p>tail -f</p>
<h3 id="_5-3-redis持久化策略" tabindex="-1">5.3 Redis持久化策略 <a class="header-anchor" href="#_5-3-redis持久化策略" aria-label="Permalink to &quot;5.3 Redis持久化策略&quot;">&ZeroWidthSpace;</a></h3>
<p>Redis持久化策略可以分为两种</p>
<ul>
<li>RDB快照</li>
<li>AOF策略</li>
</ul>
<h4 id="_5-3-1-rdb内存快照" tabindex="-1">5.3.1 RDB内存快照 <a class="header-anchor" href="#_5-3-1-rdb内存快照" aria-label="Permalink to &quot;5.3.1 RDB内存快照&quot;">&ZeroWidthSpace;</a></h4>
<p>全量快照  会备份全部的数据，但是比较费时</p>
<p>触发方式：</p>
<ol>
<li>
<p><code>save</code>命令    在主线程中使用，不建议使用，会造成阻塞</p>
<p>save会生成一个<code>dump.rdb</code>，下次启动会调取该文件</p>
</li>
<li>
<p><code>bgsave</code>命令    后台创建（folk）一个子进程，专门用于写入rdb文件，避免主线程的阻塞</p>
<p>一般情况下，该命令较快，但是有可能会造成save一样的问题</p>
</li>
<li>
<p>自动触发</p>
<div class="language-conf vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">conf</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span>save 3600 1		#在3600秒内有一个key发生变化，则触发一次快照</span></span>
<span class="line"><span>save 300 100	#在300秒内有100个key发生变化，则触发一次快照</span></span>
<span class="line"><span>save 60 1000	#在60秒内有1000个key发生变化，则触发一次快照</span></span></code></pre>
</div><p><code>rdbcompression yes</code> 改配置一定要打开，代表生成RDB文件的时候，会压缩</p>
</li>
</ol>
<h4 id="_5-3-2-aof-append-only-file-策略" tabindex="-1">5.3.2 AOF（Append-only-file）策略 <a class="header-anchor" href="#_5-3-2-aof-append-only-file-策略" aria-label="Permalink to &quot;5.3.2 AOF（Append-only-file）策略&quot;">&ZeroWidthSpace;</a></h4>
<p>这个持久化策略类似于实时日志
在Redis写入数据到数据区之后，会同步将日志（执行的命令）写入到磁盘文件中，生成一个AOF文件
如果服务器挂掉，就会读取这些日志文件，执行所有的历史命令，还原数据</p>
<blockquote>
<p>拓展：传统的数据库（mysql等）生成的日志都是redo（重做）日志</p>
</blockquote>
<p>好处：不会造成阻塞</p>
<p>坏处：</p>
<ol>
<li>在写入数据之后如果服务器挂掉，最后一条执行的命令会丢失</li>
<li>如果一个命令非常长，可能会造成下一个操作阻塞的风险</li>
</ol>
<p>配置：</p>
<ul>
<li>
<p><code>appendonly no</code> AOF策略，默认为关闭</p>
</li>
<li>
<p><code>appendfilename</code> AOF存储路径</p>
</li>
<li>
<p><code>appendfsync everysec</code>  写回策略，默认每一秒写回一次缓冲区的数据</p>
<p>Redis提供了三种写回策略<code>fsync</code>：always，eyerysec，no</p>
<ul>
<li>always  同步写回，每次命令执行完立刻同步。慢速的落盘操作</li>
<li>eyerysec  每一秒写回一次，每个命令执行完毕会将执行的命令写入内存缓冲区</li>
<li>no  并非不写回，而是由操作系统来决定什么时候将缓冲区的内容写回</li>
</ul>
<blockquote>
<p>同步写回可以基本不丢失，但它是慢速的落盘操作，会很大的影响Redis的性能</p>
<p>每秒写回避免了性能开销，但是如果宕机，会造成一秒内的数据丢失</p>
<p>操作系统写回落盘的时机不归Redis的管理，存在极端的情况</p>
</blockquote>
<p><code>综上，一般会选择每秒写回，平衡性能和风险</code></p>
</li>
</ul>
<p><strong>AOF重写机制</strong>（rewrite）：</p>
<p>重写机制可以通过优化，将一些闭环的操作和批量的操作，进行删除和‘多变一’</p>
<p>AOF的重写机制和RDB的写回策略不同，重写机制实际是由主线程folk出的<code>bgrewriteaof</code>子进程进行的</p>
<p><code>“一个拷贝、两处日志”</code></p>
<p><strong>一个拷贝</strong>：每次执行重写时，主线程会folk出子进程，此时folk会把主线程的内存拷贝一份给子进程。然后该子进程就可以在不阻塞主线程的情况下逐一写入重写的日志中</p>
<p><strong>两处日志</strong>：一个是主线程正在操作的AOF文件；另一个是子进程重写的日志文件</p>
<h4 id="_5-3-3-两种持久化策略对比" tabindex="-1">5.3.3 两种持久化策略对比 <a class="header-anchor" href="#_5-3-3-两种持久化策略对比" aria-label="Permalink to &quot;5.3.3 两种持久化策略对比&quot;">&ZeroWidthSpace;</a></h4>
<ol>
<li>
<p>如果同时开启RDB和AOF，那么AOF的<strong>优先级</strong>比较高</p>
</li>
<li>
<p>如果关闭了RDB，在单体的Redis环境中，只会按照AOF的策略进行持久化，但是在集群环境中，哪怕关闭了RDB，在第一次主从数据复制的时候，实际上主从节点会通过一次BGSAVE的全量复制来生成RDB给从节点复制</p>
</li>
<li>
<p>RGB和AOF<strong>优劣对比</strong></p>
<ul>
<li>
<p>恢复速度：RDB存储数据并且经过压缩，所以快于AOF</p>
</li>
<li>
<p>数据安全：</p>
<p>RDB可能会丢失这一次的数据，数据量不一定</p>
<p>AOF是根据写回策略来定义的</p>
</li>
<li>
<p>量级：RDB是一刀切，比较重；AOF是一个追加日志的操作，较为轻量</p>
</li>
</ul>
</li>
</ol>
<h3 id="_5-4-redis的内存回收-淘汰机制" tabindex="-1">5.4 Redis的内存回收/淘汰机制 <a class="header-anchor" href="#_5-4-redis的内存回收-淘汰机制" aria-label="Permalink to &quot;5.4 Redis的内存回收/淘汰机制&quot;">&ZeroWidthSpace;</a></h3>
<h4 id="_5-4-1-内存回收策略" tabindex="-1">5.4.1 内存回收策略 <a class="header-anchor" href="#_5-4-1-内存回收策略" aria-label="Permalink to &quot;5.4.1 内存回收策略&quot;">&ZeroWidthSpace;</a></h4>
<table>
<thead>
<tr>
<th>策略名</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>noevication</td>
<td>默认开启，当内存的使用量达到阈值时，所有的关于内存申请的命令都会直接报错</td>
</tr>
<tr>
<td>allkeys-lru</td>
<td>一种lru算法，从所有的数据集中选取最近最少使用的进行淘汰</td>
</tr>
<tr>
<td>allkeys-random</td>
<td>从所有的数据集中随机选取key删除</td>
</tr>
<tr>
<td>volatile-random</td>
<td>从设置了过期时间的数据集中随机删除一个key</td>
</tr>
<tr>
<td>volatile-ttl</td>
<td>从即将过期的数据中淘汰</td>
</tr>
<tr>
<td>volatile-lru</td>
<td>从已经设置了过期时间的数据集中选取最近最少使用的KV进行淘汰</td>
</tr>
</tbody>
</table>
<h2 id="六、redis常用命令" tabindex="-1">六、Redis常用命令 <a class="header-anchor" href="#六、redis常用命令" aria-label="Permalink to &quot;六、Redis常用命令&quot;">&ZeroWidthSpace;</a></h2>
<p><a href="https://redis.io/commands" target="_blank" rel="noreferrer">https://redis.io/commands</a></p>
<p>Redis主要支持五种数据类型</p>
<ul>
<li>string</li>
<li>list</li>
<li>hash</li>
<li>set</li>
<li>sorted set (zset)</li>
</ul>
<h3 id="_6-1-redis通用指令" tabindex="-1">6.1 Redis通用指令 <a class="header-anchor" href="#_6-1-redis通用指令" aria-label="Permalink to &quot;6.1 Redis通用指令&quot;">&ZeroWidthSpace;</a></h3>
<table>
<thead>
<tr>
<th style="text-align:left">指令</th>
<th style="text-align:left">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">DBSIZE</td>
<td style="text-align:left">返回当前库KV数量</td>
</tr>
<tr>
<td style="text-align:left">SET key value</td>
<td style="text-align:left">添加或修改KV</td>
</tr>
<tr>
<td style="text-align:left">GET key</td>
<td style="text-align:left">获取key对应的value</td>
</tr>
<tr>
<td style="text-align:left">DEL key <em>[key ...]</em></td>
<td style="text-align:left">批量删除key</td>
</tr>
<tr>
<td style="text-align:left">TYPE key</td>
<td style="text-align:left">获取key的类型</td>
</tr>
<tr>
<td style="text-align:left">EXISTS key <em>[key ...]</em></td>
<td style="text-align:left">判断key是否存在</td>
</tr>
<tr>
<td style="text-align:left">EXPIRE key seconds</td>
<td style="text-align:left">设置过期时间（单位：秒）</td>
</tr>
<tr>
<td style="text-align:left">TTL key</td>
<td style="text-align:left">查看指定key的过期时间</td>
</tr>
<tr>
<td style="text-align:left">SETNX key value</td>
<td style="text-align:left">典型的<code>乐观锁</code>  将key设置为value<br />    如果key不存在，等用于SET，返回1<br />    如果key存在，就不做操作，返回0</td>
</tr>
<tr>
<td style="text-align:left">SELECT index(0-15)</td>
<td style="text-align:left">选择数据库</td>
</tr>
<tr>
<td style="text-align:left">FLUSHDB <em>[ASYNC/SYNC]</em></td>
<td style="text-align:left">清空本数据库所有的key，选择同步和异步</td>
</tr>
<tr>
<td style="text-align:left">FLUSHALL <em>[ASYNC/SYNC]</em></td>
<td style="text-align:left">清空所有数据库的所有的key，可选同步或异步，默认异步</td>
</tr>
<tr>
<td style="text-align:left">MOVE key db</td>
<td style="text-align:left">移动key到其他DB，如果有相同的key就不会移动</td>
</tr>
<tr>
<td style="text-align:left">RENAME key newkey</td>
<td style="text-align:left">重命名key，如果新key存在，则会删除之前的key</td>
</tr>
<tr>
<td style="text-align:left">RENAMENX key newkey</td>
<td style="text-align:left">重命名，如果存在，则不作操作</td>
</tr>
<tr>
<td style="text-align:left">KEYS pattern</td>
<td style="text-align:left">使用通配符匹配key</td>
</tr>
</tbody>
</table>
<h3 id="_6-2-string类型" tabindex="-1">6.2 String类型 <a class="header-anchor" href="#_6-2-string类型" aria-label="Permalink to &quot;6.2 String类型&quot;">&ZeroWidthSpace;</a></h3>
<p>String类型在Redis中有两种存储方式</p>
<p>String通过int，SDS（Simple Dynamic Static）作为数据结构（支持自增自减）</p>
<p>redis在上<code>sds.h</code>里定义了五种string类型，目的为了节约内存。</p>
<pre><code>sdshdr5（没有被使用），sdshdr8（默认），sdshdr16等
</code></pre>
<p>建议：单个K-V虽然可以支持64位的长度（512M），但是实际项目中最好不要超过100k</p>
<h4 id="相关命令" tabindex="-1">相关命令 <a class="header-anchor" href="#相关命令" aria-label="Permalink to &quot;相关命令&quot;">&ZeroWidthSpace;</a></h4>
<table>
<thead>
<tr>
<th>命令</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>APPEND key value</td>
<td>追加到key，返回追加后的长度</td>
</tr>
<tr>
<td>MSET key value <em>[key value ...]</em></td>
<td>通过Redis管道批量写入数据</td>
</tr>
<tr>
<td>MGET key <em>[key ...]</em></td>
<td>通过Redis管道批量读取数据</td>
</tr>
<tr>
<td>INCR key</td>
<td>自增</td>
</tr>
<tr>
<td>DECR key</td>
<td>自减</td>
</tr>
<tr>
<td>INCRBY key increment</td>
<td>以指定步长自增</td>
</tr>
<tr>
<td>DECRBY key increment</td>
<td>以指定步长自减</td>
</tr>
<tr>
<td>INCRBYFLOAT key increment</td>
<td>以指定步长（可以为浮点数）自增 <code>不存在以浮点数自减</code></td>
</tr>
<tr>
<td>STRLEN key</td>
<td>获取key对应的字符串长度</td>
</tr>
<tr>
<td>GETRANGE key start end</td>
<td>以闭区间截取key对应的字符串</td>
</tr>
<tr>
<td>SETRANGE key offset value</td>
<td>把某个区间内的值替换</td>
</tr>
<tr>
<td>SETEX key seconds value</td>
<td>设置key、过期时间、value</td>
</tr>
</tbody>
</table>
<h3 id="_6-3-list类型" tabindex="-1">6.3 List类型 <a class="header-anchor" href="#_6-3-list类型" aria-label="Permalink to &quot;6.3 List类型&quot;">&ZeroWidthSpace;</a></h3>
<p>有序、可重复的列表 <code>QuickList</code> 是一种双向链表，每一个元素都是压缩列表类型</p>
<pre><code>在3.X版本之前使用双向链表`LinkedList`、`ZipList`存数据
</code></pre>
<p>当列表元素个数比较多或单个值比较大时，就不用zipList</p>
<h4 id="相关命令-1" tabindex="-1">相关命令 <a class="header-anchor" href="#相关命令-1" aria-label="Permalink to &quot;相关命令&quot;">&ZeroWidthSpace;</a></h4>
<table>
<thead>
<tr>
<th>命令</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>LPUSH key element <em>[element ...]</em></td>
<td>从左压入list，后进的id更小</td>
</tr>
<tr>
<td>RPUSH key element <em>[element ...]</em></td>
<td>从右压入list，先入的di更小</td>
</tr>
<tr>
<td>LPOP key <em>[count]</em></td>
<td>从左弹出list元素，count指定弹出的元素个数</td>
</tr>
<tr>
<td>RPOP key <em>[count]</em></td>
<td>从右弹出list元素，count指定弹出的元素个数</td>
</tr>
<tr>
<td>LINDEX key index</td>
<td>通过索引获取key的值（Lindex代表list的索引，并非left）</td>
</tr>
<tr>
<td>LLEN key</td>
<td>获取list长度</td>
</tr>
<tr>
<td>LRANGE key start stop</td>
<td>区间遍历list（-1代表最后一个元素）</td>
</tr>
<tr>
<td>LSET key index element</td>
<td>通过下标修改元素</td>
</tr>
</tbody>
</table>
<h3 id="_6-4-hash类型" tabindex="-1">6.4 Hash类型 <a class="header-anchor" href="#_6-4-hash类型" aria-label="Permalink to &quot;6.4 Hash类型&quot;">&ZeroWidthSpace;</a></h3>
<p>Filed-value相当于对象的属性名和属性值</p>
<p>在数据结构上Redis提供了两种数据结构</p>
<ol>
<li>数据量较小：ZibList</li>
<li>HashTable</li>
</ol>
<p>在Redis中，Hash表分为三层：<code>dictEntry</code>，<code>dictht</code>，<code>dict</code></p>
<p>先通过<code>murmur</code>算法计算key对应的<code>HashCode</code>，然后根据HashCode取模得到值，对应应该插入到哈希表（Hash Bucket）的位置</p>
<h4 id="相关命令-2" tabindex="-1">相关命令 <a class="header-anchor" href="#相关命令-2" aria-label="Permalink to &quot;相关命令&quot;">&ZeroWidthSpace;</a></h4>
<table>
<thead>
<tr>
<th>命令</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>HSET key field value <em>[field value ...]</em></td>
<td>设置hash表中的属性和值，返回新增的个数，如果是修改返回0</td>
</tr>
<tr>
<td>HMSET key field value <em>[field value ...]</em></td>
<td>同上（4.0版本之前不同）</td>
</tr>
<tr>
<td>HGET key field <em>[field ...]</em></td>
<td>获取hash表中属性对应的值</td>
</tr>
<tr>
<td>HMGET key field <em>[field ...]</em></td>
<td>获取hash表中多个属性对应的值</td>
</tr>
<tr>
<td>HLEN key</td>
<td>获取属性的个数</td>
</tr>
<tr>
<td>HGETALL key</td>
<td>获取所有的属性名</td>
</tr>
<tr>
<td>HEXISTS key field</td>
<td>判断某属性是否存在</td>
</tr>
<tr>
<td>HDEL key field <em>[field ...]</em></td>
<td>删除某一个（些）属性，删除所有的属性会删除key</td>
</tr>
<tr>
<td>HKEYS key</td>
<td>返回所有的属性名</td>
</tr>
<tr>
<td>HVALS key</td>
<td>返回所有的属性值</td>
</tr>
<tr>
<td>HINCRBY key field increment</td>
<td>自增某一个属性值（给负数则为自减）</td>
</tr>
<tr>
<td>HSETNX key field value</td>
<td>类比SETNX</td>
</tr>
</tbody>
</table>
<p>如果存储的对象需要经常修改，则建议存储为hash</p>
<p>如果只是存储，建议存储json字符串String</p>
<h3 id="_6-5-set类型" tabindex="-1">6.5 Set类型 <a class="header-anchor" href="#_6-5-set类型" aria-label="Permalink to &quot;6.5 Set类型&quot;">&ZeroWidthSpace;</a></h3>
<p><strong>set</strong>：无序、不重复的集合</p>
<p>单个set最多存储值的上限为2^32-1，在Redis内部使用散列表（hashtable）和intset（数值类型）</p>
<p><strong>散列表中的key永远都是null</strong></p>
<h4 id="相关命令-3" tabindex="-1">相关命令 <a class="header-anchor" href="#相关命令-3" aria-label="Permalink to &quot;相关命令&quot;">&ZeroWidthSpace;</a></h4>
<table>
<thead>
<tr>
<th>命令</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>SADD key member <em>[member ...]</em></td>
<td>向集合中批量添加成员</td>
</tr>
<tr>
<td>SREM key member <em>[member ...]</em></td>
<td>批量删除成员</td>
</tr>
<tr>
<td>SMEMBERS key</td>
<td>获取所有的成员</td>
</tr>
<tr>
<td>SPOP key <em>[count]</em></td>
<td>弹出一个成员</td>
</tr>
<tr>
<td>SMOVE source destination member</td>
<td>移动一个成员到其他集合</td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<h3 id="_6-6-sorted-set-zset-类型" tabindex="-1">6.6 sorted set (zset)类型 <a class="header-anchor" href="#_6-6-sorted-set-zset-类型" aria-label="Permalink to &quot;6.6 sorted set (zset)类型&quot;">&ZeroWidthSpace;</a></h3>
<p>底层数据结构：ziplist或者skipList+HashTable</p>
<p>有序集合（ZSet）没有下标，不能重复。它和set区别只是将无序变成了有序。</p>
<h4 id="相关命令-4" tabindex="-1">相关命令 <a class="header-anchor" href="#相关命令-4" aria-label="Permalink to &quot;相关命令&quot;">&ZeroWidthSpace;</a></h4>
<table>
<thead>
<tr>
<th>命令</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>ZADD key score member <em>[score member ...]</em></td>
<td>将具有指定分数的所有指定成员添加到一个zset中，也可以修改分数值，返回新增的成员个数</td>
</tr>
<tr>
<td>ZRANGE key min max</td>
<td>返回存储在 的有序集合中指定范围的元素。<br /><code>&lt;min&gt;</code>和<code>&lt;max&gt;</code>参数表示基于零的索引，-1代表最后一个<br /><code>-inf</code>和<code>+inf</code>，分别表示负无穷大和正无穷大</td>
</tr>
<tr>
<td>ZRANGEBYSCORE key min max</td>
<td>这里的<code>&lt;min&gt;</code>和<code>&lt;max&gt;</code>参数表示分数值<br />需使用<code>-inf</code>和<code>+inf</code><br />后边如果跟<code>[WITHSCORES]</code>可以返回分数值</td>
</tr>
<tr>
<td>ZREVRANGE key start stop <em>[WITHSCORES]</em></td>
<td>从大到小排列，rev表示翻转<br />Redis中默认都是从小到大排序，rev表示从大到小排序</td>
</tr>
<tr>
<td>ZREVRANGEBYScore key max min <em>[WITHSCORES]</em></td>
<td>从大到小排序，类比<code>ZRANGEBYSCORE</code>，注意这里是max-min</td>
</tr>
<tr>
<td>ZCARD key</td>
<td>获取有序集合中的成员数量</td>
</tr>
<tr>
<td>ZCOUNT key min max</td>
<td>获取有序集合介于某一范围的成员数量</td>
</tr>
<tr>
<td>ZREM key member <em>[member ...]</em></td>
<td>根据成员名删除成员</td>
</tr>
</tbody>
</table>
<h3 id="其他" tabindex="-1">其他 <a class="header-anchor" href="#其他" aria-label="Permalink to &quot;其他&quot;">&ZeroWidthSpace;</a></h3>
<ul>
<li>
<p>redis事务</p>
</li>
<li>
<p>发布订阅：不支持消息积累</p>
<p>PUBLISH channel message	发布消息</p>
<p>SUBSCRIBE channel [channel ...]	订阅频道</p>
</li>
<li>
<p>GEO</p>
</li>
</ul>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[XPATH自学笔记]]></title>
            <link>https://www.imufeng.cn/full-stack/other/xpath.html</link>
            <guid>https://www.imufeng.cn/full-stack/other/xpath.html</guid>
            <pubDate>Mon, 25 Mar 2024 08:19:18 GMT</pubDate>
            <description><![CDATA[XPath 是一门在 XML 文档中查找信息的语言，用于在 XML 文档中通过元素和属性进行导航。]]></description>
            <content:encoded><![CDATA[<h1 id="xpath自学笔记" tabindex="-1">XPATH自学笔记 <a class="header-anchor" href="#xpath自学笔记" aria-label="Permalink to &quot;XPATH自学笔记&quot;">&ZeroWidthSpace;</a></h1>
<h2 id="一、xpath简介" tabindex="-1">一、XPath简介 <a class="header-anchor" href="#一、xpath简介" aria-label="Permalink to &quot;一、XPath简介&quot;">&ZeroWidthSpace;</a></h2>
<blockquote>
<p>XPath 是一门在 XML 文档中查找信息的语言。XPath 用于在 XML 文档中通过元素和属性进行导航。</p>
</blockquote>
<ul>
<li>XPath 使用路径表达式在 XML 文档中进行导航</li>
<li>XPath 包含一个标准函数库</li>
<li>XPath 是 XSLT 中的主要元素</li>
<li>XPath 是一个 W3C 标准</li>
</ul>
<h2 id="二、xpath节点" tabindex="-1">二、xpath节点 <a class="header-anchor" href="#二、xpath节点" aria-label="Permalink to &quot;二、xpath节点&quot;">&ZeroWidthSpace;</a></h2>
<blockquote>
<p>在 XPath 中，有七种类型的节点：元素、属性、文本、命名空间、处理指令、注释以及文档节点（或称为根节点）。</p>
<p>xpath文档是被视为节点树来对待的</p>
</blockquote>
<h3 id="_2-1-xpath术语" tabindex="-1">2.1 xpath术语 <a class="header-anchor" href="#_2-1-xpath术语" aria-label="Permalink to &quot;2.1 xpath术语&quot;">&ZeroWidthSpace;</a></h3>
<h4 id="节点-node" tabindex="-1">节点（node） <a class="header-anchor" href="#节点-node" aria-label="Permalink to &quot;节点（node）&quot;">&ZeroWidthSpace;</a></h4>
<div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;?</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">xml</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> version</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"1.0"</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> encoding</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"ISO-8859-1"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">?></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">bookstore</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">book</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  &#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">title</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> lang</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"en"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>Harry Potter&#x3C;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">title</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  &#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">author</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>J K. Rowling&#x3C;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">author</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">> </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  &#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">year</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>2005&#x3C;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">year</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  &#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">price</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>29.99&#x3C;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">price</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">book</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">bookstore</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span></code></pre>
</div><p>上面xml文档中的节点示例：</p>
<div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span>&#x3C;bookstore> （文档节点）</span></span>
<span class="line"><span>&#x3C;author>J K. Rowling&#x3C;/author> （元素节点）</span></span>
<span class="line"><span>lang="en" （属性节点）</span></span></code></pre>
</div><h4 id="基本值-或称原子值-atomic-value" tabindex="-1">基本值（或称原子值，Atomic value） <a class="header-anchor" href="#基本值-或称原子值-atomic-value" aria-label="Permalink to &quot;基本值（或称原子值，Atomic value）&quot;">&ZeroWidthSpace;</a></h4>
<blockquote>
<p>基本值是无父或无子的节点</p>
</blockquote>
<p>基本值的例子：</p>
<div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span>J K. Rowling</span></span>
<span class="line"><span>"en"</span></span></code></pre>
</div><h4 id="项目-item" tabindex="-1">项目（Item） <a class="header-anchor" href="#项目-item" aria-label="Permalink to &quot;项目（Item）&quot;">&ZeroWidthSpace;</a></h4>
<p>项目是基本值或者节点。</p>
<h3 id="_2-2-节点关系" tabindex="-1">2.2 节点关系 <a class="header-anchor" href="#_2-2-节点关系" aria-label="Permalink to &quot;2.2 节点关系&quot;">&ZeroWidthSpace;</a></h3>
<h4 id="父-parent" tabindex="-1">父（Parent） <a class="header-anchor" href="#父-parent" aria-label="Permalink to &quot;父（Parent）&quot;">&ZeroWidthSpace;</a></h4>
<p>每个元素以及属性都有一个父。</p>
<p>在下面的例子中，book 元素是 title、author、year 以及 price 元素的父：</p>
<div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span>&#x3C;book></span></span>
<span class="line"><span>  &#x3C;title>Harry Potter&#x3C;/title></span></span>
<span class="line"><span>  &#x3C;author>J K. Rowling&#x3C;/author></span></span>
<span class="line"><span>  &#x3C;year>2005&#x3C;/year></span></span>
<span class="line"><span>  &#x3C;price>29.99&#x3C;/price></span></span>
<span class="line"><span>&#x3C;/book></span></span></code></pre>
</div><h4 id="子-children" tabindex="-1">子（Children） <a class="header-anchor" href="#子-children" aria-label="Permalink to &quot;子（Children）&quot;">&ZeroWidthSpace;</a></h4>
<p>元素节点可有零个、一个或多个子。</p>
<p>在下面的例子中，title、author、year 以及 price 元素都是 book 元素的子：</p>
<div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span>&#x3C;book></span></span>
<span class="line"><span>  &#x3C;title>Harry Potter&#x3C;/title></span></span>
<span class="line"><span>  &#x3C;author>J K. Rowling&#x3C;/author></span></span>
<span class="line"><span>  &#x3C;year>2005&#x3C;/year></span></span>
<span class="line"><span>  &#x3C;price>29.99&#x3C;/price></span></span>
<span class="line"><span>&#x3C;/book></span></span></code></pre>
</div><h4 id="同胞-sibling" tabindex="-1">同胞（Sibling） <a class="header-anchor" href="#同胞-sibling" aria-label="Permalink to &quot;同胞（Sibling）&quot;">&ZeroWidthSpace;</a></h4>
<p>拥有相同的父的节点</p>
<p>在下面的例子中，title、author、year 以及 price 元素都是同胞：</p>
<div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span>&#x3C;book></span></span>
<span class="line"><span>  &#x3C;title>Harry Potter&#x3C;/title></span></span>
<span class="line"><span>  &#x3C;author>J K. Rowling&#x3C;/author></span></span>
<span class="line"><span>  &#x3C;year>2005&#x3C;/year></span></span>
<span class="line"><span>  &#x3C;price>29.99&#x3C;/price></span></span>
<span class="line"><span>&#x3C;/book></span></span></code></pre>
</div><h4 id="先辈-ancestor" tabindex="-1">先辈（Ancestor） <a class="header-anchor" href="#先辈-ancestor" aria-label="Permalink to &quot;先辈（Ancestor）&quot;">&ZeroWidthSpace;</a></h4>
<p>某节点的父、父的父，等等。</p>
<p>在下面的例子中，title 元素的先辈是 book 元素和 bookstore 元素：</p>
<div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span>&#x3C;bookstore></span></span>
<span class="line"><span></span></span>
<span class="line"><span>&#x3C;book></span></span>
<span class="line"><span>  &#x3C;title>Harry Potter&#x3C;/title></span></span>
<span class="line"><span>  &#x3C;author>J K. Rowling&#x3C;/author></span></span>
<span class="line"><span>  &#x3C;year>2005&#x3C;/year></span></span>
<span class="line"><span>  &#x3C;price>29.99&#x3C;/price></span></span>
<span class="line"><span>&#x3C;/book></span></span>
<span class="line"><span></span></span>
<span class="line"><span>&#x3C;/bookstore></span></span></code></pre>
</div><h4 id="后代-descendant" tabindex="-1">后代（Descendant） <a class="header-anchor" href="#后代-descendant" aria-label="Permalink to &quot;后代（Descendant）&quot;">&ZeroWidthSpace;</a></h4>
<p>某个节点的子，子的子，等等。</p>
<p>在下面的例子中，bookstore 的后代是 book、title、author、year 以及 price 元素：</p>
<div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span>&#x3C;bookstore></span></span>
<span class="line"><span></span></span>
<span class="line"><span>&#x3C;book></span></span>
<span class="line"><span>  &#x3C;title>Harry Potter&#x3C;/title></span></span>
<span class="line"><span>  &#x3C;author>J K. Rowling&#x3C;/author></span></span>
<span class="line"><span>  &#x3C;year>2005&#x3C;/year></span></span>
<span class="line"><span>  &#x3C;price>29.99&#x3C;/price></span></span>
<span class="line"><span>&#x3C;/book></span></span>
<span class="line"><span></span></span>
<span class="line"><span>&#x3C;/bookstore></span></span></code></pre>
</div><h2 id="三、xpath语法" tabindex="-1">三、xpath语法 <a class="header-anchor" href="#三、xpath语法" aria-label="Permalink to &quot;三、xpath语法&quot;">&ZeroWidthSpace;</a></h2>
<blockquote>
<p>xpath使用路径表达式来选取xml文档中的子节点或节点集，节点是通过沿着路径 (path) 或者步 (steps) 来选取的。</p>
</blockquote>
<h3 id="xml-实例文档" tabindex="-1">XML 实例文档 <a class="header-anchor" href="#xml-实例文档" aria-label="Permalink to &quot;XML 实例文档&quot;">&ZeroWidthSpace;</a></h3>
<p>我们将在下面的例子中使用这个 XML 文档。</p>
<div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;?</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">xml</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> version</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"1.0"</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> encoding</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"ISO-8859-1"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">?></span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">bookstore</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">book</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  &#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">title</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> lang</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"eng"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>Harry Potter&#x3C;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">title</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  &#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">price</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>29.99&#x3C;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">price</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">book</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">book</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  &#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">title</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> lang</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"eng"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>Learning XML&#x3C;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">title</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  &#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">price</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>39.95&#x3C;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">price</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">book</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">bookstore</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span></code></pre>
</div><h3 id="_3-1-选取节点" tabindex="-1">3.1 选取节点 <a class="header-anchor" href="#_3-1-选取节点" aria-label="Permalink to &quot;3.1 选取节点&quot;">&ZeroWidthSpace;</a></h3>
<p>XPath 使用路径表达式在 XML 文档中选取节点。节点是通过沿着路径或者 step 来选取的。</p>
<h4 id="下面列出了最有用的路径表达式" tabindex="-1">下面列出了最有用的路径表达式： <a class="header-anchor" href="#下面列出了最有用的路径表达式" aria-label="Permalink to &quot;下面列出了最有用的路径表达式：&quot;">&ZeroWidthSpace;</a></h4>
<table>
<thead>
<tr>
<th style="text-align:center">表达式</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">nodename</td>
<td style="text-align:left">选取此节点的所有子节点。</td>
</tr>
<tr>
<td style="text-align:center">/</td>
<td style="text-align:left">从根节点选取。</td>
</tr>
<tr>
<td style="text-align:center">//</td>
<td style="text-align:left">从匹配选择的当前节点选择文档中的节点，而不考虑它们的位置。</td>
</tr>
<tr>
<td style="text-align:center">.</td>
<td style="text-align:left">选取当前节点。</td>
</tr>
<tr>
<td style="text-align:center">..</td>
<td style="text-align:left">选取当前节点的父节点。</td>
</tr>
<tr>
<td style="text-align:center">@</td>
<td style="text-align:left">选取属性。</td>
</tr>
</tbody>
</table>
<h4 id="实例" tabindex="-1">实例 <a class="header-anchor" href="#实例" aria-label="Permalink to &quot;实例&quot;">&ZeroWidthSpace;</a></h4>
<p>在下面的表格中，我们已列出了一些路径表达式以及表达式的结果：</p>
<table>
<thead>
<tr>
<th style="text-align:center">路径表达式</th>
<th style="text-align:left">结果</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">bookstore</td>
<td style="text-align:left">选取 bookstore 元素的所有子节点。</td>
</tr>
<tr>
<td style="text-align:center">/bookstore</td>
<td style="text-align:left">选取根元素 bookstore。注释：假如路径起始于正斜杠( / )，则此路径始终代表到某元素的绝对路径！</td>
</tr>
<tr>
<td style="text-align:center">bookstore/book</td>
<td style="text-align:left">选取属于 bookstore 的子元素的所有 book 元素。</td>
</tr>
<tr>
<td style="text-align:center">//book</td>
<td style="text-align:left">选取所有 book 子元素，而不管它们在文档中的位置。</td>
</tr>
<tr>
<td style="text-align:center">bookstore//book</td>
<td style="text-align:left">选择属于 bookstore 元素的后代的所有 book 元素，而不管它们位于 bookstore 之下的什么位置。</td>
</tr>
<tr>
<td style="text-align:center">//@lang</td>
<td style="text-align:left">选取名为 lang 的所有属性。</td>
</tr>
</tbody>
</table>
<h3 id="_3-2-谓语-predicates" tabindex="-1">3.2 谓语（Predicates） <a class="header-anchor" href="#_3-2-谓语-predicates" aria-label="Permalink to &quot;3.2 谓语（Predicates）&quot;">&ZeroWidthSpace;</a></h3>
<p>谓语用来查找某个特定的节点或者包含某个指定的值的节点。</p>
<p>谓语被嵌在方括号中。</p>
<h4 id="实例-1" tabindex="-1">实例 <a class="header-anchor" href="#实例-1" aria-label="Permalink to &quot;实例&quot;">&ZeroWidthSpace;</a></h4>
<p>在下面的表格中，我们列出了带有谓语的一些路径表达式，以及表达式的结果：</p>
<table>
<thead>
<tr>
<th style="text-align:center">路径表达式</th>
<th style="text-align:left">结果</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">/bookstore/book[1]</td>
<td style="text-align:left">选取属于 bookstore 子元素的第一个 book 元素。</td>
</tr>
<tr>
<td style="text-align:center">/bookstore/book[last()]</td>
<td style="text-align:left">选取属于 bookstore 子元素的最后一个 book 元素。</td>
</tr>
<tr>
<td style="text-align:center">/bookstore/book[last()-1]</td>
<td style="text-align:left">选取属于 bookstore 子元素的倒数第二个 book 元素。</td>
</tr>
<tr>
<td style="text-align:center">/bookstore/book[position()❤️]</td>
<td style="text-align:left">选取最前面的两个属于 bookstore 元素的子元素的 book 元素。</td>
</tr>
<tr>
<td style="text-align:center">//title[@lang]</td>
<td style="text-align:left">选取所有拥有名为 lang 的属性的 title 元素。</td>
</tr>
<tr>
<td style="text-align:center">//title[@lang='eng']</td>
<td style="text-align:left">选取所有 title 元素，且这些元素拥有值为 eng 的 lang 属性。</td>
</tr>
<tr>
<td style="text-align:center">/bookstore/book[price&gt;35.00]</td>
<td style="text-align:left">选取 bookstore 元素的所有 book 元素，且其中的 price 元素的值须大于 35.00。</td>
</tr>
<tr>
<td style="text-align:center">/bookstore/book[price&gt;35.00]/title</td>
<td style="text-align:left">选取 bookstore 元素中的 book 元素的所有 title 元素，且其中的 price 元素的值须大于 35.00。</td>
</tr>
</tbody>
</table>
<h3 id="_3-3-选取未知节点" tabindex="-1">3.3 选取未知节点 <a class="header-anchor" href="#_3-3-选取未知节点" aria-label="Permalink to &quot;3.3 选取未知节点&quot;">&ZeroWidthSpace;</a></h3>
<p>XPath 通配符可用来选取未知的 XML 元素。</p>
<table>
<thead>
<tr>
<th style="text-align:left">通配符</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">*</td>
<td style="text-align:left">匹配任何元素节点。</td>
</tr>
<tr>
<td style="text-align:left">@*</td>
<td style="text-align:left">匹配任何属性节点。</td>
</tr>
<tr>
<td style="text-align:left">node()</td>
<td style="text-align:left">匹配任何类型的节点。</td>
</tr>
</tbody>
</table>
<h4 id="实例-2" tabindex="-1">实例 <a class="header-anchor" href="#实例-2" aria-label="Permalink to &quot;实例&quot;">&ZeroWidthSpace;</a></h4>
<p>在下面的表格中，我们列出了一些路径表达式，以及这些表达式的结果：</p>
<table>
<thead>
<tr>
<th style="text-align:left">路径表达式</th>
<th style="text-align:left">结果</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">/bookstore/*</td>
<td style="text-align:left">选取 bookstore 元素的所有子元素。</td>
</tr>
<tr>
<td style="text-align:left">//*</td>
<td style="text-align:left">选取文档中的所有元素。</td>
</tr>
<tr>
<td style="text-align:left">//title[@*]</td>
<td style="text-align:left">选取所有带有属性的 title 元素。</td>
</tr>
</tbody>
</table>
<h3 id="_3-4-选取若干路径" tabindex="-1">3.4 选取若干路径 <a class="header-anchor" href="#_3-4-选取若干路径" aria-label="Permalink to &quot;3.4 选取若干路径&quot;">&ZeroWidthSpace;</a></h3>
<p>通过在路径表达式中使用“|”运算符，您可以选取若干个路径。</p>
<h4 id="实例-3" tabindex="-1">实例 <a class="header-anchor" href="#实例-3" aria-label="Permalink to &quot;实例&quot;">&ZeroWidthSpace;</a></h4>
<p>在下面的表格中，我们列出了一些路径表达式，以及这些表达式的结果：</p>
<table>
<thead>
<tr>
<th style="text-align:left">路径表达式</th>
<th style="text-align:left">结果</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">//book/title | //book/price</td>
<td style="text-align:left">选取 book 元素的所有 title 和 price 元素。</td>
</tr>
<tr>
<td style="text-align:left">//title | //price</td>
<td style="text-align:left">选取文档中的所有 title 和 price 元素。</td>
</tr>
<tr>
<td style="text-align:left">/bookstore/book/title | //price</td>
<td style="text-align:left">选取属于 bookstore 元素的 book 元素的所有 title 元素，以及文档中所有的 price 元素。</td>
</tr>
</tbody>
</table>
<h2 id="四、xpath-axes-轴" tabindex="-1">四、XPath Axes（轴） <a class="header-anchor" href="#四、xpath-axes-轴" aria-label="Permalink to &quot;四、XPath Axes（轴）&quot;">&ZeroWidthSpace;</a></h2>
<h3 id="xml-实例文档-1" tabindex="-1">XML 实例文档 <a class="header-anchor" href="#xml-实例文档-1" aria-label="Permalink to &quot;XML 实例文档&quot;">&ZeroWidthSpace;</a></h3>
<blockquote>
<p>我们将在下面的例子中使用此 XML 文档：</p>
</blockquote>
<div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;?</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">xml</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> version</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"1.0"</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> encoding</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"ISO-8859-1"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">?></span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">bookstore</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">book</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  &#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">title</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> lang</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"eng"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>Harry Potter&#x3C;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">title</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  &#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">price</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>29.99&#x3C;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">price</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">book</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">book</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  &#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">title</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> lang</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"eng"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>Learning XML&#x3C;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">title</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  &#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">price</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>39.95&#x3C;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">price</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">book</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">bookstore</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span></code></pre>
</div><h3 id="xpath-轴" tabindex="-1">XPath 轴 <a class="header-anchor" href="#xpath-轴" aria-label="Permalink to &quot;XPath 轴&quot;">&ZeroWidthSpace;</a></h3>
<blockquote>
<p>轴可定义相对于当前节点的节点集。</p>
</blockquote>
<table>
<thead>
<tr>
<th style="text-align:center">轴名称</th>
<th style="text-align:left">结果</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">ancestor</td>
<td style="text-align:left">选取当前节点的所有先辈（父、祖父等）。</td>
</tr>
<tr>
<td style="text-align:center">ancestor-or-self</td>
<td style="text-align:left">选取当前节点的所有先辈（父、祖父等）以及当前节点本身。</td>
</tr>
<tr>
<td style="text-align:center">attribute</td>
<td style="text-align:left">选取当前节点的所有属性。</td>
</tr>
<tr>
<td style="text-align:center">child</td>
<td style="text-align:left">选取当前节点的所有子元素。</td>
</tr>
<tr>
<td style="text-align:center">descendant</td>
<td style="text-align:left">选取当前节点的所有后代元素（子、孙等）。</td>
</tr>
<tr>
<td style="text-align:center">descendant-or-self</td>
<td style="text-align:left">选取当前节点的所有后代元素（子、孙等）以及当前节点本身。</td>
</tr>
<tr>
<td style="text-align:center">following</td>
<td style="text-align:left">选取文档中当前节点的结束标签之后的所有节点。</td>
</tr>
<tr>
<td style="text-align:center">namespace</td>
<td style="text-align:left">选取当前节点的所有命名空间节点。</td>
</tr>
<tr>
<td style="text-align:center">parent</td>
<td style="text-align:left">选取当前节点的父节点。</td>
</tr>
<tr>
<td style="text-align:center">preceding</td>
<td style="text-align:left">选取文档中当前节点的开始标签之前的所有节点。</td>
</tr>
<tr>
<td style="text-align:center">preceding-sibling</td>
<td style="text-align:left">选取当前节点之前的所有同级节点。</td>
</tr>
<tr>
<td style="text-align:center">self</td>
<td style="text-align:left">选取当前节点。</td>
</tr>
</tbody>
</table>
<h3 id="位置路径表达式" tabindex="-1">位置路径表达式 <a class="header-anchor" href="#位置路径表达式" aria-label="Permalink to &quot;位置路径表达式&quot;">&ZeroWidthSpace;</a></h3>
<p>位置路径可以是绝对的，也可以是相对的。</p>
<p>绝对路径起始于正斜杠( / )，而相对路径不会这样。在两种情况中，位置路径均包括一个或多个步，每个步均被斜杠分割：</p>
<h4 id="绝对位置路径" tabindex="-1">绝对位置路径： <a class="header-anchor" href="#绝对位置路径" aria-label="Permalink to &quot;绝对位置路径：&quot;">&ZeroWidthSpace;</a></h4>
<div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span>/step/step/...</span></span></code></pre>
</div><h4 id="相对位置路径" tabindex="-1">相对位置路径： <a class="header-anchor" href="#相对位置路径" aria-label="Permalink to &quot;相对位置路径：&quot;">&ZeroWidthSpace;</a></h4>
<div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span>step/step/...</span></span></code></pre>
</div><p>每个步均根据当前节点集之中的节点来进行计算。</p>
<h4 id="步-step-包括" tabindex="-1">步（step）包括： <a class="header-anchor" href="#步-step-包括" aria-label="Permalink to &quot;步（step）包括：&quot;">&ZeroWidthSpace;</a></h4>
<ul>
<li>
<p>轴（axis）</p>
<blockquote>
<p>定义所选节点与当前节点之间的树关系</p>
</blockquote>
</li>
<li>
<p>节点测试（node-test）</p>
<blockquote>
<p>识别某个轴内部的节点</p>
</blockquote>
</li>
<li>
<p>零个或者更多谓语（predicate）</p>
<blockquote>
<p>更深入地提炼所选的节点集</p>
</blockquote>
</li>
</ul>
<h4 id="步的语法" tabindex="-1">步的语法： <a class="header-anchor" href="#步的语法" aria-label="Permalink to &quot;步的语法：&quot;">&ZeroWidthSpace;</a></h4>
<div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span>轴名称::节点测试[谓语]</span></span></code></pre>
</div><h4 id="实例-4" tabindex="-1">实例 <a class="header-anchor" href="#实例-4" aria-label="Permalink to &quot;实例&quot;">&ZeroWidthSpace;</a></h4>
<table>
<thead>
<tr>
<th style="text-align:center">例子</th>
<th style="text-align:left">结果</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">child::book</td>
<td style="text-align:left">选取所有属于当前节点的子元素的 book 节点。</td>
</tr>
<tr>
<td style="text-align:center">attribute::lang</td>
<td style="text-align:left">选取当前节点的 lang 属性。</td>
</tr>
<tr>
<td style="text-align:center">child:😗</td>
<td style="text-align:left">选取当前节点的所有子元素。</td>
</tr>
<tr>
<td style="text-align:center">attribute:😗</td>
<td style="text-align:left">选取当前节点的所有属性。</td>
</tr>
<tr>
<td style="text-align:center">child::text()</td>
<td style="text-align:left">选取当前节点的所有文本子节点。</td>
</tr>
<tr>
<td style="text-align:center">child::node()</td>
<td style="text-align:left">选取当前节点的所有子节点。</td>
</tr>
<tr>
<td style="text-align:center">descendant::book</td>
<td style="text-align:left">选取当前节点的所有 book 后代。</td>
</tr>
<tr>
<td style="text-align:center">ancestor::book</td>
<td style="text-align:left">选择当前节点的所有 book 先辈。</td>
</tr>
<tr>
<td style="text-align:center">ancestor-or-self::book</td>
<td style="text-align:left">选取当前节点的所有 book 先辈以及当前节点（如果此节点是 book 节点）</td>
</tr>
<tr>
<td style="text-align:center">child:😗/child::price</td>
<td style="text-align:left">选取当前节点的所有 price 孙节点。</td>
</tr>
</tbody>
</table>
<h2 id="五、xpath-运算符" tabindex="-1">五、XPath 运算符 <a class="header-anchor" href="#五、xpath-运算符" aria-label="Permalink to &quot;五、XPath 运算符&quot;">&ZeroWidthSpace;</a></h2>
<blockquote>
<p>XPath 表达式可返回节点集、字符串、逻辑值以及数字。</p>
</blockquote>
<h3 id="xpath-运算符" tabindex="-1">XPath 运算符 <a class="header-anchor" href="#xpath-运算符" aria-label="Permalink to &quot;XPath 运算符&quot;">&ZeroWidthSpace;</a></h3>
<blockquote>
<p>下面列出了可用在 XPath 表达式中的运算符：</p>
</blockquote>
<table>
<thead>
<tr>
<th style="text-align:left">运算符</th>
<th style="text-align:left">描述</th>
<th style="text-align:left">实例</th>
<th style="text-align:left">返回值</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">|</td>
<td style="text-align:left">计算两个节点集</td>
<td style="text-align:left">//book | //cd</td>
<td style="text-align:left">返回所有拥有 book 和 cd 元素的节点集</td>
</tr>
<tr>
<td style="text-align:left">+</td>
<td style="text-align:left">加法</td>
<td style="text-align:left">6 + 4</td>
<td style="text-align:left">10</td>
</tr>
<tr>
<td style="text-align:left">-</td>
<td style="text-align:left">减法</td>
<td style="text-align:left">6 - 4</td>
<td style="text-align:left">2</td>
</tr>
<tr>
<td style="text-align:left">*</td>
<td style="text-align:left">乘法</td>
<td style="text-align:left">6 * 4</td>
<td style="text-align:left">24</td>
</tr>
<tr>
<td style="text-align:left">div</td>
<td style="text-align:left">除法</td>
<td style="text-align:left">8 div 4</td>
<td style="text-align:left">2</td>
</tr>
<tr>
<td style="text-align:left">=</td>
<td style="text-align:left">等于</td>
<td style="text-align:left">price=9.80</td>
<td style="text-align:left">如果 price 是 9.80，则返回 true。如果 price 是 9.90，则返回 false。</td>
</tr>
<tr>
<td style="text-align:left">!=</td>
<td style="text-align:left">不等于</td>
<td style="text-align:left">price!=9.80</td>
<td style="text-align:left">如果 price 是 9.90，则返回 true。如果 price 是 9.80，则返回 false。</td>
</tr>
<tr>
<td style="text-align:left">&lt;</td>
<td style="text-align:left">小于</td>
<td style="text-align:left">price&lt;9.80</td>
<td style="text-align:left">如果 price 是 9.00，则返回 true。如果 price 是 9.90，则返回 false。</td>
</tr>
<tr>
<td style="text-align:left">&lt;=</td>
<td style="text-align:left">小于或等于</td>
<td style="text-align:left">price&lt;=9.80</td>
<td style="text-align:left">如果 price 是 9.00，则返回 true。如果 price 是 9.90，则返回 false。</td>
</tr>
<tr>
<td style="text-align:left">&gt;</td>
<td style="text-align:left">大于</td>
<td style="text-align:left">price&gt;9.80</td>
<td style="text-align:left">如果 price 是 9.90，则返回 true。如果 price 是 9.80，则返回 false。</td>
</tr>
<tr>
<td style="text-align:left">&gt;=</td>
<td style="text-align:left">大于或等于</td>
<td style="text-align:left">price&gt;=9.80</td>
<td style="text-align:left">如果 price 是 9.90，则返回 true。如果 price 是 9.70，则返回 false。</td>
</tr>
<tr>
<td style="text-align:left">or</td>
<td style="text-align:left">或</td>
<td style="text-align:left">price=9.80 or price=9.70</td>
<td style="text-align:left">如果 price 是 9.80，则返回 true。如果 price 是 9.50，则返回 false。</td>
</tr>
<tr>
<td style="text-align:left">and</td>
<td style="text-align:left">与</td>
<td style="text-align:left">price&gt;9.00 and price&lt;9.90</td>
<td style="text-align:left">如果 price 是 9.80，则返回 true。如果 price 是 8.50，则返回 false。</td>
</tr>
<tr>
<td style="text-align:left">mod</td>
<td style="text-align:left">计算除法的余数</td>
<td style="text-align:left">5 mod 2</td>
<td style="text-align:left">1</td>
</tr>
</tbody>
</table>
<h2 id="六、xpath-实例" tabindex="-1">六、XPath 实例 <a class="header-anchor" href="#六、xpath-实例" aria-label="Permalink to &quot;六、XPath 实例&quot;">&ZeroWidthSpace;</a></h2>
<p><strong>在本节，让我们通过实例来学习一些基础的 XPath 语法。</strong></p>
<h3 id="xml实例文档" tabindex="-1">XML实例文档 <a class="header-anchor" href="#xml实例文档" aria-label="Permalink to &quot;XML实例文档&quot;">&ZeroWidthSpace;</a></h3>
<blockquote>
<p>我们将在下面的例子中使用这个 XML 文档：</p>
</blockquote>
<h4 id="books-xml" tabindex="-1">&quot;books.xml&quot; : <a class="header-anchor" href="#books-xml" aria-label="Permalink to &quot;&quot;books.xml&quot; :&quot;">&ZeroWidthSpace;</a></h4>
<div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;?</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">xml</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> version</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"1.0"</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> encoding</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"ISO-8859-1"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">?></span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">bookstore</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">book</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> category</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"COOKING"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  &#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">title</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> lang</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"en"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>Everyday Italian&#x3C;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">title</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  &#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">author</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>Giada De Laurentiis&#x3C;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">author</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  &#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">year</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>2005&#x3C;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">year</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  &#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">price</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>30.00&#x3C;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">price</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">book</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">book</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> category</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"CHILDREN"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  &#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">title</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> lang</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"en"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>Harry Potter&#x3C;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">title</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  &#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">author</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>J K. Rowling&#x3C;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">author</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  &#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">year</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>2005&#x3C;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">year</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  &#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">price</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>29.99&#x3C;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">price</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">book</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">book</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> category</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"WEB"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  &#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">title</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> lang</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"en"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>XQuery Kick Start&#x3C;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">title</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  &#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">author</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>James McGovern&#x3C;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">author</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  &#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">author</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>Per Bothner&#x3C;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">author</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  &#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">author</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>Kurt Cagle&#x3C;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">author</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  &#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">author</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>James Linn&#x3C;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">author</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  &#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">author</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>Vaidyanathan Nagarajan&#x3C;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">author</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  &#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">year</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>2003&#x3C;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">year</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  &#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">price</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>49.99&#x3C;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">price</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">book</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">book</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> category</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"WEB"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  &#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">title</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> lang</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"en"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>Learning XML&#x3C;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">title</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  &#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">author</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>Erik T. Ray&#x3C;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">author</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  &#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">year</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>2003&#x3C;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">year</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  &#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">price</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>39.95&#x3C;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">price</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">book</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">bookstore</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span></code></pre>
</div><h3 id="加载-xml-文档" tabindex="-1">加载 XML 文档 <a class="header-anchor" href="#加载-xml-文档" aria-label="Permalink to &quot;加载 XML 文档&quot;">&ZeroWidthSpace;</a></h3>
<p>所有现代浏览器都支持使用 XMLHttpRequest 来加载 XML 文档的方法。</p>
<div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> xmlhttp</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> XMLHttpRequest</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">()</span></span></code></pre>
</div><h3 id="选取节点" tabindex="-1">选取节点 <a class="header-anchor" href="#选取节点" aria-label="Permalink to &quot;选取节点&quot;">&ZeroWidthSpace;</a></h3>
<p>主流浏览器都支持使用 evaluate() 方法从 XML 文档中选取节点：</p>
<div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">xmlDoc.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">evaluate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(xpath, xmlDoc, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, XPathResult.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">ANY_TYPE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">);</span></span></code></pre>
</div><h3 id="选取所有-title" tabindex="-1">选取所有 title <a class="header-anchor" href="#选取所有-title" aria-label="Permalink to &quot;选取所有 title&quot;">&ZeroWidthSpace;</a></h3>
<p>下面的例子选取所有 title 节点：</p>
<div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span>/bookstore/book/title</span></span></code></pre>
</div><h3 id="选取第一个-book-的-title" tabindex="-1">选取第一个 book 的 title <a class="header-anchor" href="#选取第一个-book-的-title" aria-label="Permalink to &quot;选取第一个 book 的 title&quot;">&ZeroWidthSpace;</a></h3>
<p>下面的例子选取 bookstore 元素下面的第一个 book 节点的 title：</p>
<div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span>/bookstore/book[1]/title</span></span></code></pre>
</div><h3 id="选取所有价格" tabindex="-1">选取所有价格 <a class="header-anchor" href="#选取所有价格" aria-label="Permalink to &quot;选取所有价格&quot;">&ZeroWidthSpace;</a></h3>
<p>下面的例子选取 price 节点中的所有文本：</p>
<div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span>/bookstore/book/price/text()</span></span></code></pre>
</div><h3 id="选取价格高于-35-的-price-节点" tabindex="-1">选取价格高于 35 的 price 节点 <a class="header-anchor" href="#选取价格高于-35-的-price-节点" aria-label="Permalink to &quot;选取价格高于 35 的 price 节点&quot;">&ZeroWidthSpace;</a></h3>
<p>下面的例子选取价格高于 35 的所有 price 节点：</p>
<div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span>/bookstore/book[price>35]/price</span></span></code></pre>
</div><h3 id="选取价格高于-35-的-title-节点" tabindex="-1">选取价格高于 35 的 title 节点 <a class="header-anchor" href="#选取价格高于-35-的-title-节点" aria-label="Permalink to &quot;选取价格高于 35 的 title 节点&quot;">&ZeroWidthSpace;</a></h3>
<p>下面的例子选取价格高于 35 的所有 title 节点：</p>
<div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span>/bookstore/book[price>35]/title</span></span></code></pre>
</div>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[泛域名证书申请以及部署]]></title>
            <link>https://www.imufeng.cn/training/linux/acme-sh.html</link>
            <guid>https://www.imufeng.cn/training/linux/acme-sh.html</guid>
            <pubDate>Mon, 25 Mar 2024 08:19:18 GMT</pubDate>
            <description><![CDATA[使用 acme.sh 部署 Let's Encrypt 泛域名证书。]]></description>
            <content:encoded><![CDATA[<h1 id="泛域名证书申请以及部署" tabindex="-1">泛域名证书申请以及部署 <a class="header-anchor" href="#泛域名证书申请以及部署" aria-label="Permalink to &quot;泛域名证书申请以及部署&quot;">&ZeroWidthSpace;</a></h1>
<blockquote>
<p>由于目前所有的域名服务商对于免费CA证书仅提供由<code>digicert</code>机构颁发的，只允许有20个子域名且不支持泛子域名。故使用 <code>Let's Encrypt</code> 的SSL证书</p>
</blockquote>
<p>Let’s Encrypt 是一个证书颁发机构，向 Let’s Encrypt 申请证书是免费的。Let's Encrypt 支持泛域名证书，不需要为每个子域名单独申请证书。</p>
<h2 id="一、acme-sh部署工具" tabindex="-1">一、<code>acme.sh</code>部署工具 <a class="header-anchor" href="#一、acme-sh部署工具" aria-label="Permalink to &quot;一、`acme.sh`部署工具&quot;">&ZeroWidthSpace;</a></h2>
<p>根据 <code>acme.sh</code> [中文说明](<a href="https://github.com/acmesh-official/acme.sh/wiki/%E8%AF%B4%E6%98%8E" target="_blank" rel="noreferrer">说明 · acmesh-official/acme.sh Wiki (github.com)</a>)，<code>acme.sh</code> 实现了 <code>acme</code> 协议, 可以从 <code>let‘s encrypt</code> 生成免费的证书。</p>
<ol>
<li>
<p>其安装只需要执行以下命令，所有用户均可安装：</p>
<div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">curl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> https://get.acme.sh</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> sh</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> -s</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> email=my@example.com</span></span></code></pre>
</div></li>
<li>
<p>该工具将会安装在 <code>~/.acme.sh/</code>  目录下。</p>
</li>
</ol>
<h2 id="二、生成证书" tabindex="-1">二、生成证书 <a class="header-anchor" href="#二、生成证书" aria-label="Permalink to &quot;二、生成证书&quot;">&ZeroWidthSpace;</a></h2>
<p><code>acme.sh</code> 实现了 <strong><code>acme</code></strong> 协议支持的所有验证协议. 一般有两种方式验证: http 和 dns 验证.</p>
<h3 id="_2-1-http-方式" tabindex="-1">2.1 http 方式 <a class="header-anchor" href="#_2-1-http-方式" aria-label="Permalink to &quot;2.1 http 方式&quot;">&ZeroWidthSpace;</a></h3>
<p>http方式需要在该网站根目录放置一个文件来验证域名所有权。</p>
<p>可以执行以下命令生成：</p>
<div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">acme.sh</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> --issue</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> -d</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> mydomain.com</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> -d</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> www.mydomain.com</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> --webroot</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> /home/wwwroot/mydomain.com/</span></span></code></pre>
</div><p>如果你使用apache或者nginx服务，执行以下命令会自动识别并完成验证，完成后还将为你删除文件，做到用户无感验证。</p>
<div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">acme.sh</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> --issue</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> -d</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> mydomain.com</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> --apache/nginx</span></span></code></pre>
</div><p>如果你的服务器80端口是空闲的，<code>acme.sh</code>还将自动配置一个webserver，监听80端口并自动完成配置。</p>
<h3 id="_2-2-dns-方式" tabindex="-1">2.2 DNS 方式 <a class="header-anchor" href="#_2-2-dns-方式" aria-label="Permalink to &quot;2.2 DNS 方式&quot;">&ZeroWidthSpace;</a></h3>
<p>DNS方式只需要在配置DNS解析记录即可，且TXT的解析记录对你的服务不会产生影响。</p>
<p>执行以下命令，按照提示配置DNS解析记录即可：</p>
<div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">acme.sh</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> --issue</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> --dns</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> -d</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> mydomain.com</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> \</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> --yes-I-know-dns-manual-mode-enough-go-ahead-please</span></span></code></pre>
</div><p>解析完成后，执行以下命令来完成验证并重新生成证书：</p>
<div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">acme.sh</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> --renew</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> -d</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> mydomain.com</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> \</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">  --yes-I-know-dns-manual-mode-enough-go-ahead-please</span></span></code></pre>
</div><blockquote>
<p>注意：若没有配置Automatic DNS API，该方法将无法自动更新你的域名证书。</p>
</blockquote>
<h3 id="_2-3-dns进阶版" tabindex="-1">2.3 DNS进阶版 <a class="header-anchor" href="#_2-3-dns进阶版" aria-label="Permalink to &quot;2.3 DNS进阶版&quot;">&ZeroWidthSpace;</a></h3>
<p>DNS方式还支持使用域名解析商提供的接口自动进行配置。以阿里云为例：</p>
<p>首先将阿里云的阿里云 API 的密钥以以下格式配置到环境变量：</p>
<div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D"># 腾讯云dnspod</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">export</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> DP_Id</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"XXXXXXXXXX"</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">export</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> DP_Key</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"XXXXXXXXXX"</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D"># 阿里云</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">export</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> Ali_Key</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"XXXXXXXXXX"</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">export</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> Ali_Secret</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"XXXXXXXXXX“</span></span></code></pre>
</div><p>然后就可以通过以下命令生成证书：</p>
<div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D"># 腾讯云</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">acme.sh</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> --issue</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> --dns</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> dns_dp</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> -d</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> example.com</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> -d</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> *</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">.example.com</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D"># 阿里云</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">acme.sh</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> --issue</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> --dns</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> dns_ali</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> -d</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> example.com</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> -d</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> *</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">.example.com</span></span></code></pre>
</div><h2 id="三、安装配置证书" tabindex="-1">三、安装配置证书 <a class="header-anchor" href="#三、安装配置证书" aria-label="Permalink to &quot;三、安装配置证书&quot;">&ZeroWidthSpace;</a></h2>
<p>此处以Podman Nginx容器配置证书举例。</p>
<h3 id="_3-1-生成nginx配置" tabindex="-1">3.1 生成Nginx配置 <a class="header-anchor" href="#_3-1-生成nginx配置" aria-label="Permalink to &quot;3.1 生成Nginx配置&quot;">&ZeroWidthSpace;</a></h3>
<p>NGINX配置文件可以使用[NGINXCONF.IO](<a href="https://www.digitalocean.com/community/tools/nginx?global.app.lang=zhCN" target="_blank" rel="noreferrer">NGINXConfig | DigitalOcean</a>)配置。页面为中文且较为友好。</p>
<h3 id="_3-2-生成-dhparam-pem" tabindex="-1">3.2 生成 dhparam.pem <a class="header-anchor" href="#_3-2-生成-dhparam-pem" aria-label="Permalink to &quot;3.2 生成 dhparam.pem&quot;">&ZeroWidthSpace;</a></h3>
<p>openssl dhparam用于生成和管理dh文件。dh(Diffie-Hellman)是著名的密钥交换协议，或称为密钥协商协议，它可以保证通信双方安全地交换密钥。但注意，它不是加密算法，所以不提供加密功能，仅仅只是保护密钥交换的过程。在openvpn中就使用了该交换协议。</p>
<p>执行以下命令即可生成：</p>
<div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">openssl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> dhparam</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> -out</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> ~/dhparam.pem</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> 2048</span></span></code></pre>
</div><p>如果你使用上面提供的NGINXCONFIG.IO生成了配置文件，此处配置在nginx.conf文件中：</p>
<div class="language-ini vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ini</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D"># Diffie-Hellman parameter for DHE ciphersuites                                         </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">ssl_dhparam /etc/nginx/dhparam.pem</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">;</span></span></code></pre>
</div><h3 id="_3-3-自动更新证书" tabindex="-1">3.3 自动更新证书 <a class="header-anchor" href="#_3-3-自动更新证书" aria-label="Permalink to &quot;3.3 自动更新证书&quot;">&ZeroWidthSpace;</a></h3>
<p>以下为podman Nginx容器自动更新证书的命令：</p>
<div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">~</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">/.acme.sh/acme.sh --install-cert </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">\ </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">-d</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> example.com</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> \ </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">--key-file</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> /etc/nginx/ssl/example.com.key</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> \ </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">#</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> 私钥地址</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">--fullchain-file</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> /etc/nginx/ssl/example.com.cer</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">  \ </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">#</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> 公钥地址</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">--reloadcmd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> "podman exec -it nginx nginx force-reload"</span></span></code></pre>
</div><blockquote>
<p>注意：<code>nginx reload</code> 命令并不会更新证书，需要使用 <code>nginx force-reload</code></p>
</blockquote>
<h2 id="四、查看已安装证书信息" tabindex="-1">四、查看已安装证书信息 <a class="header-anchor" href="#四、查看已安装证书信息" aria-label="Permalink to &quot;四、查看已安装证书信息&quot;">&ZeroWidthSpace;</a></h2>
<div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">acme.sh</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> --info</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> -d</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> example.com</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D"># 会输出如下内容：</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">DOMAIN_CONF</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">/root/.acme.sh/example.com/example.com.conf</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">Le_Domain</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">example.com</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">Le_Alt</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">no</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">Le_Webroot</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">dns_ali</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">Le_PreHook</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">Le_PostHook</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">Le_RenewHook</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">Le_API</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">https://acme-v02.api.letsencrypt.org/directory</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">Le_Keylength</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">Le_OrderFinalize</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">https://acme-v02.api.letsencrypt.org/acme/finalize/23xxxx150/781xxxx4310</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">Le_LinkOrder</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">https://acme-v02.api.letsencrypt.org/acme/order/233xxx150/781xxxx4310</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">Le_LinkCert</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">https://acme-v02.api.letsencrypt.org/acme/cert/04cbd28xxxxxx349ecaea8d07</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">Le_CertCreateTime</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">1649358725</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">Le_CertCreateTimeStr</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">Thu</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> Apr</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">  7</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> 19</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">:12:05</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> UTC</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> 2022</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">Le_NextRenewTimeStr</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">Mon</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> Jun</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">  6</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> 19</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">:12:05</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> UTC</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> 2022</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">Le_NextRenewTime</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">1654456325</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">Le_RealCertPath</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">Le_RealCACertPath</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">Le_RealKeyPath</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">/etc/acme/example.com/privkey.pem</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">Le_ReloadCmd</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">service</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> nginx</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> force-reload</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">Le_RealFullChainPath</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">/etc/acme/example.com/chain.pem</span></span></code></pre>
</div><h2 id="五、更新证书" tabindex="-1">五、更新证书 <a class="header-anchor" href="#五、更新证书" aria-label="Permalink to &quot;五、更新证书&quot;">&ZeroWidthSpace;</a></h2>
<p>目前证书在 60 天以后会自动更新，使用crontab 工具。无需任何操作。</p>
<div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">crontab</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">  -l</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">56</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> *</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> *</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> *</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> *</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> "/root/.acme.sh"/acme.sh</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> --cron</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> --home</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> "/root/.acme.sh"</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> ></span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> /dev/null</span></span></code></pre>
</div><h2 id="六、修改reloadcmd" tabindex="-1">六、修改ReloadCmd <a class="header-anchor" href="#六、修改reloadcmd" aria-label="Permalink to &quot;六、修改ReloadCmd&quot;">&ZeroWidthSpace;</a></h2>
<p>根据官网的说法，不建议直接修改<code>example.conf</code>文件来达到修改ReloadCmd的目的，且目前修改<code>ReloadCmd</code>没有专门的命令，可以通过重新安装证书来修改。</p>
<h2 id="七、更新-acme-sh" tabindex="-1">七、更新 acme.sh <a class="header-anchor" href="#七、更新-acme-sh" aria-label="Permalink to &quot;七、更新 acme.sh&quot;">&ZeroWidthSpace;</a></h2>
<p>升级 acme.sh 到最新版 :</p>
<div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">acme.sh</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> --upgrade</span></span></code></pre>
</div><p>如果你不想手动升级, 可以开启自动升级:</p>
<div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">acme.sh</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> --upgrade</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> --auto-upgrade</span></span></code></pre>
</div><p>之后, acme.sh 就会自动保持更新了.</p>
<p>你也可以随时关闭自动更新:</p>
<div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">acme.sh</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> --upgrade</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> --auto-upgrade</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">  0</span></span></code></pre>
</div><h2 id="参考链接" tabindex="-1">参考链接 <a class="header-anchor" href="#参考链接" aria-label="Permalink to &quot;参考链接&quot;">&ZeroWidthSpace;</a></h2>
<ul>
<li>
<p><a href="https://github.com/acmesh-official/acme.sh/wiki/%E8%AF%B4%E6%98%8E" target="_blank" rel="noreferrer">acme.sh中文文档  (github.com)</a></p>
</li>
<li>
<p><a href="https://zhuanlan.zhihu.com/p/445852299" target="_blank" rel="noreferrer">Let's Encrypt SSL 泛域名证书申请和配置 - 知乎 (zhihu.com)</a></p>
</li>
<li>
<p><a href="https://github.com/acmesh-official/acme.sh/issues/1439" target="_blank" rel="noreferrer">acme.sh · Issue #1439 · (github.com)</a></p>
</li>
<li>
<p><a href="https://www.digitalocean.com/community/tools/nginx?global.app.lang=zhCN" target="_blank" rel="noreferrer">NGINXConfig | DigitalOcean</a></p>
</li>
<li>
<p><a href="https://www.cnblogs.com/f-ck-need-u/p/7103791.html" target="_blank" rel="noreferrer">openssl dhparam(密钥交换) - 骏马金龙 - 博客园 (cnblogs.com)</a></p>
</li>
</ul>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[基于DockerCompose的WordPress环境部署（附配置优化）]]></title>
            <link>https://www.imufeng.cn/training/linux/wordpress-by-docker-compose.html</link>
            <guid>https://www.imufeng.cn/training/linux/wordpress-by-docker-compose.html</guid>
            <pubDate>Mon, 25 Mar 2024 08:19:18 GMT</pubDate>
            <description><![CDATA[本文将带你快速了解 docker compose 安装部署 WordPress。]]></description>
            <content:encoded><![CDATA[<h1 id="基于dockercompose的wordpress环境部署-附配置优化" tabindex="-1">基于DockerCompose的WordPress环境部署（附配置优化） <a class="header-anchor" href="#基于dockercompose的wordpress环境部署-附配置优化" aria-label="Permalink to &quot;基于DockerCompose的WordPress环境部署（附配置优化）&quot;">&ZeroWidthSpace;</a></h1>
<blockquote>
<p>观前提醒：通过本文安装<code>WordPress</code>，需要你有一定的Linux基础，并且安装了最新版的<code>Docker</code>。</p>
</blockquote>
<h2 id="一、为什么是dockercompose" tabindex="-1">一、为什么是DockerCompose <a class="header-anchor" href="#一、为什么是dockercompose" aria-label="Permalink to &quot;一、为什么是DockerCompose&quot;">&ZeroWidthSpace;</a></h2>
<p>回答：<strong>因为懒</strong></p>
<p>之前在跟其他人沟通的时候，看到我使用Docker Compose部署 WordPress，都有些嗤之以鼻，觉得没有必要,也不够高大上。但是问他们用什么？其实很多都是第三方托管，或者干脆自己从零搭建环境，而像我这种对Linux环境稍微有点了解，并且做过一些LAMP/LNMP架构定制化编译安装的，也并不认为靠第三方托管的方式有多么便携又高大上，或者编译安装一套LNMP架构有多么优雅。</p>
<h2 id="二、怎么用dockercompose" tabindex="-1">二、怎么用DockerCompose <a class="header-anchor" href="#二、怎么用dockercompose" aria-label="Permalink to &quot;二、怎么用DockerCompose&quot;">&ZeroWidthSpace;</a></h2>
<p>Docker的使用已经成为运维人员的必修课，而使用Docker能够极大地简化环境部署，减少大部分重复性的手动操作。这里先介绍DockerCompose搭建环境的一个基本流程，至于Docker的安装那些，也比较简单，我后边慢慢写。</p>
<blockquote>
<p>顺便说一下，现在Docker已经自带<code>compose</code>了，不需要单独安装 <code>docker-compose</code></p>
</blockquote>
<p>DockerCompose部署环境只需要一个文件，<code>docker-compose.yaml</code> 所有的配置都在这个文件中。DockerCompose常用命令如下：</p>
<table>
<thead>
<tr>
<th>命令</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>docker compose up &lt;-d&gt;</td>
<td>启动yaml文件中定义的所有服务。<br />-d表示后台启动</td>
</tr>
<tr>
<td>docker compose down</td>
<td>停止并删除所有容器</td>
</tr>
<tr>
<td>docker compose ps</td>
<td>查看服务运行状态</td>
</tr>
<tr>
<td>docker compose restart</td>
<td>重新启动所有服务</td>
</tr>
<tr>
<td>docker compose logs</td>
<td>查看所有日志</td>
</tr>
</tbody>
</table>
<blockquote>
<p>上述命令在后边跟上yaml文件中定义的ServiceName，则可以操作单独的服务</p>
</blockquote>
<h2 id="三、开始部署" tabindex="-1">三、开始部署 <a class="header-anchor" href="#三、开始部署" aria-label="Permalink to &quot;三、开始部署&quot;">&ZeroWidthSpace;</a></h2>
<h3 id="_3-1-yaml文件示例" tabindex="-1">3.1 YAML文件示例 <a class="header-anchor" href="#_3-1-yaml文件示例" aria-label="Permalink to &quot;3.1 YAML文件示例&quot;">&ZeroWidthSpace;</a></h3>
<blockquote>
<p>YAML文件需要放在特定的文件夹，最好单独建立文件夹，容器启动时会以当前<code>目录的名称-服务名称-序号</code>命名。</p>
</blockquote>
<div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">mkdir</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> ~/wordpress</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> ~/wordpress</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">vim</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> docker-compose.yaml</span></span></code></pre>
</div><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">version</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'3.3'</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D"># 服务</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">services</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">:</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">  # 数据库服务</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">  db</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">    image</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">mysql:5.7</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">    volumes</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">      - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">./db_data:/var/lib/mysql</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">    restart</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">always</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">    environment</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">      MYSQL_ROOT_PASSWORD</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">wordpress</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">      MYSQL_DATABASE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">wordpress</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">      MYSQL_USER</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">wordpress</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">      MYSQL_PASSWORD</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">wordpress</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">  # Redis缓存服务</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">  cache</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">    image</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">redis:latest</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">    restart</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">always</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">    ports</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">      - </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">6379</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">  # WordPress服务</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">  wordpress</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">    depends_on</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">      - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">db</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">      - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">cache</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">    image</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">wordpress:php8.2</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">    ports</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">      - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"8080:80"</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">    restart</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">always</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">    environment</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">      WORDPRESS_DB_HOST</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">db:3306</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">      WORDPRESS_DB_USER</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">wordpress</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">      WORDPRESS_DB_PASSWORD</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">wordpress</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">      WORDPRESS_DB_NAME</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">wordpress</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">    volumes</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">./wp_data:/var/www/html</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">./php_config/php.ini-production:/usr/local/etc/php/php.ini-production</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D"># 网络划分</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">networks</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">    wordpress</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">        driver</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">bridge</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">        external</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">true</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">        ipam</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">            config</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">                - </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">subnet</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">10.10.1.0/24</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">                - </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">gateway</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">10.10.1.10</span></span></code></pre>
</div><p>在上面的示例中，规定了当前 <code>docker-compose.yaml</code>遵循3.3版本规范，共涉及三个服务：数据库、缓存以及WordPress。并使用了三个卷，将数据库文件、WordPress服务文件以及PHP配置文件挂载到本地。</p>
<p>在该文件编写完成后，可以在当前目录使用 <code>docker compose up</code> 命令安装，首次安装需要下载镜像，会比较慢，之后再安装则不需要。</p>
<p>安装完之后，你就可以在使用<code>ip:8080</code>的方式访问你的 WordPress 站点了。如果你需要配置域名访问，在Nginx中添加如下配置后再去安装你的 WordPress 。</p>
<blockquote>
<p>你需要将 <code>blog-wp.imufeng.cn</code> 替换为你自己的域名。至于泛域名证书的配置参见我的其他博客。</p>
</blockquote>
<div class="language-nginx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">nginx</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">server</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    listen </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">             443</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> ssl http2;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    listen </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">             [::]:443 ssl http2;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    server_name </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        blog-wp.imufeng.cn;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">    # SSL</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    ssl_certificate </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    /etc/nginx/ssl/imufeng.cn.cer;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    ssl_certificate_key </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">/etc/nginx/ssl/imufeng.cn.key;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">    # security</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    include </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">            nginxconfig.io/security.conf;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">    # logging</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    access_log </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">         /var/log/nginx/blog-wp.imufeng.cn.log combined buffer=512k flush=5m;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    error_log </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">          /var/log/nginx/blog-wp.imufeng.error.log</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    location</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> / </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">        proxy_pass </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">http://127.0.0.1:8080/;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">        proxy_set_header </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">Host $host;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">        proxy_set_header </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">X-Real-IP $remote_addr;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">        proxy_set_header </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">X-Forwarded-For $proxy_add_x_forwarded_for;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">        proxy_set_header </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">X-Forwarded-Proto $scheme;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">        add_header </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">Content-Security-Policy </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"default-src 'self' 'unsafe-inline' 'unsafe-eval' https: ws: wss: data: blob:"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span></code></pre>
</div><p>至此，一个简单的WordPress就搭建完成了。</p>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Java8新特性详解]]></title>
            <link>https://www.imufeng.cn/full-stack/java/characteristic/functional.html</link>
            <guid>https://www.imufeng.cn/full-stack/java/characteristic/functional.html</guid>
            <pubDate>Mon, 25 Mar 2024 08:19:18 GMT</pubDate>
            <description><![CDATA[Lambda 表达式、Stream 流、Optional 类操作分享。]]></description>
            <content:encoded><![CDATA[<h1 id="java8-新特性详解" tabindex="-1">Java8 新特性详解 <a class="header-anchor" href="#java8-新特性详解" aria-label="Permalink to &quot;Java8 新特性详解&quot;">&ZeroWidthSpace;</a></h1>
<blockquote>
<p>Lambda 表达式、Stream 流、Optional 类操作分享。</p>
</blockquote>
<h2 id="一、lambda表达式" tabindex="-1">一、Lambda表达式 <a class="header-anchor" href="#一、lambda表达式" aria-label="Permalink to &quot;一、Lambda表达式&quot;">&ZeroWidthSpace;</a></h2>
<p>Lambda表达式可以让你简洁的表示一个行为或传递代码。Lambda表达式可以理解为简洁的表示可传递匿名函数的一种方式：它没有名称，但是有参数列表、函数主体、返回类型</p>
<ul>
<li><strong>匿名：</strong> 没有名称</li>
<li><strong>函数：</strong> Lambda函数不像方法那样属于特定的类。但是和方法一样，有参数列表、函数体以及返回类型 。也可以抛出异常。</li>
<li><strong>传递：</strong> Lambda表达式可以作为参数传递给方法或存储在变量中。</li>
<li><strong>简介：</strong> 无需像匿名类那样写很多模板代码。</li>
</ul>
<p><strong>示例：</strong></p>
<div class="language-Java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">Java</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 不使用Lambda</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">Comparator&#x3C;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">Apple</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">> byWeight </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> new</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> Comparator&#x3C;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">Apple</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>(){</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">	public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> compare</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(Apple </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">a1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, Apple </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">a2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">){</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">		return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> a1.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">getWeidht</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">compareTo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(a2.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">getWeight</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">());</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">	}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}  </span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 使用Lambda表达式</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">Comparator&#x3C;Apple> byWeight </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    (Apple a1, Apple a2) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">-></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> a1.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">getWeight</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">compareTo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(a2.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">getWeight</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">());</span></span></code></pre>
</div><p><img src="https://cdn.imufeng.cn/imufeng/epub_26211813_42" alt="img"></p>
<h2 id="二、stream流" tabindex="-1">二、Stream流 <a class="header-anchor" href="#二、stream流" aria-label="Permalink to &quot;二、Stream流&quot;">&ZeroWidthSpace;</a></h2>
<blockquote>
<p><code>Stream流</code> 是 Java8 提供对集合或数组进行链状流式操作的函数式编程模式。</p>
</blockquote>
<h3 id="_2-1-中间操作" tabindex="-1">2.1 中间操作 <a class="header-anchor" href="#_2-1-中间操作" aria-label="Permalink to &quot;2.1 中间操作&quot;">&ZeroWidthSpace;</a></h3>
<ul>
<li>
<p><strong>filter：</strong> 过滤</p>
</li>
<li>
<p><strong>map：</strong> 计算或转换</p>
</li>
<li>
<p><strong>distinct：</strong> 去除重复对象（equals 方法）</p>
</li>
<li>
<p><strong>sorted：</strong> 排序，可以实现 Comparator 接口重写 compareTo 方法进行排序</p>
</li>
<li>
<p><strong>limit：</strong> 设置流的最大长度</p>
</li>
<li>
<p><strong>skip：</strong> 跳过前n个元素</p>
</li>
<li>
<p><strong>flatMap：</strong> 将一个对象转换为多个对象作为流中的元素</p>
</li>
</ul>
<h3 id="_2-2-终结操作" tabindex="-1">2.2 终结操作 <a class="header-anchor" href="#_2-2-终结操作" aria-label="Permalink to &quot;2.2 终结操作&quot;">&ZeroWidthSpace;</a></h3>
<div class="danger custom-block"><p class="custom-block-title">注意</p>
<p>如果没有终结操作，中间操作不会执行</p>
</div>
<h4 id="常规操作" tabindex="-1">常规操作 <a class="header-anchor" href="#常规操作" aria-label="Permalink to &quot;常规操作&quot;">&ZeroWidthSpace;</a></h4>
<ul>
<li>
<p><strong>forEach：</strong> 遍历</p>
</li>
<li>
<p><strong>count：</strong> 计数</p>
</li>
<li>
<p><strong>max&amp;min：</strong> 求最值 需要指定比较最大值的规则 返回 Optional</p>
</li>
<li>
<p><strong>collect：</strong> 将流转换为集合</p>
</li>
</ul>
<h4 id="查找与匹配" tabindex="-1">查找与匹配 <a class="header-anchor" href="#查找与匹配" aria-label="Permalink to &quot;查找与匹配&quot;">&ZeroWidthSpace;</a></h4>
<ul>
<li>
<p><strong>anyMatch：</strong> 判断是否存在能够符合匹配条件的元素</p>
</li>
<li>
<p><strong>allMatch：</strong> 判断是否全部匹配条件</p>
</li>
<li>
<p><strong>noneMatch：</strong> 是否都不符合条件</p>
</li>
<li>
<p><strong>findAny：</strong> 获取任意一个符合条件元素（不一定是第一个）</p>
</li>
<li>
<p><strong>findFirst：</strong> 获取第一个符合条件的元素</p>
</li>
</ul>
<h4 id="reduce归并" tabindex="-1">reduce归并 <a class="header-anchor" href="#reduce归并" aria-label="Permalink to &quot;reduce归并&quot;">&ZeroWidthSpace;</a></h4>
<p>对流中的数据按照你指定的计算方式计算出一个结果 （缩减操作）</p>
<div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(people.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">stream</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">distinct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">map</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(People</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">::</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">getAge)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">reduce</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, (o1, o2) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">-></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> o1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">+=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> o2));</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(people.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">stream</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">distinct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">map</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(People</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">::</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">getAge)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">reduce</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, Integer</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">::</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">sum));</span></span></code></pre>
</div><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(people.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">stream</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">distinct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">map</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(People</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">::</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">getAge)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">reduce</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(Integer.MIN_VALUE, Integer</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">::</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">max));</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(people.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">stream</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">distinct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">map</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(People</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">::</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">getAge)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">reduce</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(Integer.MAX_VALUE, Integer</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">::</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">min));</span></span></code></pre>
</div><h2 id="三、optional" tabindex="-1">三、Optional <a class="header-anchor" href="#三、optional" aria-label="Permalink to &quot;三、Optional&quot;">&ZeroWidthSpace;</a></h2>
<blockquote>
<p>使用 Optional 可以写出更优雅的代码来避免空指针异常</p>
<p>Optional 类似于包装类，将具体的数据封装到Optional对象内部。我们可以使用Optional中封装好的方法操作封装的数据。优雅的避免空指针异常</p>
</blockquote>
<h3 id="创建对象" tabindex="-1">创建对象 <a class="header-anchor" href="#创建对象" aria-label="Permalink to &quot;创建对象&quot;">&ZeroWidthSpace;</a></h3>
<p><code>ofNullAble()</code> 方法会将其封装为一个Optional对象</p>
<div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">People people </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> People</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">Optional&#x3C;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">People</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">> people1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> Optional.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">ofNullable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(people);</span></span></code></pre>
</div><p>如果能够保证传入的对象非空，则可以使用of()方法封装</p>
<div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">People people </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> People</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">people.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">setName</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"mufeng"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">people.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">setAge</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">13</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">Optional&#x3C;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">People</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">> people1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> Optional.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">of</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(people);</span></span></code></pre>
</div><p>如果需要一个空值，使用 emepy() 方法</p>
<h3 id="安全获取值" tabindex="-1">安全获取值 <a class="header-anchor" href="#安全获取值" aria-label="Permalink to &quot;安全获取值&quot;">&ZeroWidthSpace;</a></h3>
<p><code>orElseGet()</code>	如果非空则返回，如果为空则给默认值</p>
<p><code>orElseThrow()</code> 获取数据，为空则抛出异常</p>
<h3 id="其他方法" tabindex="-1">其他方法 <a class="header-anchor" href="#其他方法" aria-label="Permalink to &quot;其他方法&quot;">&ZeroWidthSpace;</a></h3>
<p><code>filter()</code> 类似于Stream流中的filter方法</p>
<p><code>isPeresent（）</code> 进行是否存在值的判断（更推荐使用<code>ifPeresent()</code>方法）</p>
<p><code>map()</code> 数据转换。类似于Stream流中的map方法</p>
<h2 id="四、函数式接口" tabindex="-1">四、函数式接口 <a class="header-anchor" href="#四、函数式接口" aria-label="Permalink to &quot;四、函数式接口&quot;">&ZeroWidthSpace;</a></h2>
<blockquote>
<p><strong>只有一个抽象方法的接口称为函数式接口</strong></p>
<p>JDK的函数式接口都加上了<code>@FunctionalInterface</code>进行标识。但是加不加都无所谓。</p>
</blockquote>
<h3 id="常用的函数式接口" tabindex="-1">常用的函数式接口 <a class="header-anchor" href="#常用的函数式接口" aria-label="Permalink to &quot;常用的函数式接口&quot;">&ZeroWidthSpace;</a></h3>
<p><code>Consumer</code>	消费接口</p>
<p><code>Function</code>	计算转换接口</p>
<p><code>Predicate</code>	判断接口</p>
<p><code>Supplier</code>	生产型接口</p>
<h3 id="常用的默认方法" tabindex="-1">常用的默认方法 <a class="header-anchor" href="#常用的默认方法" aria-label="Permalink to &quot;常用的默认方法&quot;">&ZeroWidthSpace;</a></h3>
<p><code>and</code>	判断条件的并集</p>
<p><code>or</code>	判断条件的交集</p>
<p><code>negate</code>	判断条件取反</p>
<h3 id="方法引用" tabindex="-1">方法引用 <a class="header-anchor" href="#方法引用" aria-label="Permalink to &quot;方法引用&quot;">&ZeroWidthSpace;</a></h3>
<p><code>类名/对象名::方法名</code></p>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[抽象类和抽象方法]]></title>
            <link>https://www.imufeng.cn/full-stack/java/oop/abstract.html</link>
            <guid>https://www.imufeng.cn/full-stack/java/oop/abstract.html</guid>
            <pubDate>Mon, 25 Mar 2024 08:19:18 GMT</pubDate>
            <description><![CDATA[在一个较为复杂的继承链中，祖先类更具有一般性，作为派生其他类的基类而不糊将其作为用来构造实例。]]></description>
            <content:encoded><![CDATA[<h1 id="抽象类和抽象方法" tabindex="-1">抽象类和抽象方法 <a class="header-anchor" href="#抽象类和抽象方法" aria-label="Permalink to &quot;抽象类和抽象方法&quot;">&ZeroWidthSpace;</a></h1>
<p>在一个较为复杂的继承链中，父类有可能只知道子类应当具备某个方法，但是不能够明确方法实现。祖先类更具有一般性。通常祖先类只会作为派生其他类的基类而不糊将其作为用来构造实例。如员工之于公司，每个员工都应该得到工资，但是每个员工的工资可能都不一样。所以员工类就会有一个没有方法主体的<strong>抽象方法</strong>。而包含抽象方法的类就是<strong>抽象类</strong>。</p>
<p>抽象类与抽象方法都用 <code>abstract</code> 关键字修饰。上述例子的实现可以如下：</p>
<div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> Scratch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">[] </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">args</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">        var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> leader </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> Leader</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        leader.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">setName</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"马云"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        leader.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">payoff</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">1000000000.00</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">        var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> mufeng </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> Staff</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        mufeng.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">setName</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"沐风"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        mufeng.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">payoff</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">1000.00</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">abstract</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> Employee</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    private</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> String name;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    abstract</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> payoff</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(Double </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">salary</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    public</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> String </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">getName</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> name;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> setName</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(String </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">        this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">.name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> name;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> Leader</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> extends</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> Employee</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">Override</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> payoff</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(Double </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">salary</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">printf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"%s领导不发工资，本月收入%s</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">getName</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(), salary);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> Staff</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> extends</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> Employee</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">Override</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> payoff</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(Double </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">salary</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">printf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"%s本月发工资%s</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">getName</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(), salary);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span></code></pre>
</div><p>在上述的例子中，Employee 类中 <code>payoff(Double salary)</code> 方法就是抽象方法，相应的，Employee 类也必须是抽象类。抽象类也可以有具体的属性和方法。</p>
<div class="warning custom-block"><p class="custom-block-title">说明：</p>
<ul>
<li>抽象类不能实例化对象。</li>
<li>抽象类可以有构造方法，供子类创建时初始化。</li>
<li>成员变量可以定义在抽象类中。</li>
<li>抽象类的子类如果不重写抽象方法，则必须用 abstract 关键字修饰。</li>
<li>抽象方法不能被限制为 private 或 final。</li>
</ul>
</div>
]]></content:encoded>
        </item>
        <item>
            <link>https://www.imufeng.cn/interview/question-by-day/2023/10.html</link>
            <guid>https://www.imufeng.cn/interview/question-by-day/2023/10.html</guid>
            <pubDate>Mon, 25 Mar 2024 08:19:18 GMT</pubDate>
            <description><![CDATA[

## 10-31

### 什么是原子操作？

原子操作（atomic operation）意为”不可被中断的一个或一系列操作” 。处理器使用基于对缓存加锁或总线加锁的方式来实现多处理器之间的原子操作。
在Java中可以通过锁和循环CAS的方式来实现原子操作。CAS操作—— `Compare & Set`，或是 `Compare & Swap`，现在几乎所有的CPU指令都支持CAS的原子操作。

原子操作是指一个不受其他操作影响的操作任务单元。原子操作是在多线程环境下避免数据不一致必须的手段。
int++并不是一个原子操作，所以当一个线程读取它的值并加1时，另外一个线程有可能会读到之前的值，这就会引发错误。

为了解决这个问题，必须保证增加操作是原子的，在JDK1.5之前我们可以使用同步技术来做到这一点。
到JDK1.5，`java.util.concurrent.atomic` 包提供了 int 和 long 类型的原子包装类，它们可以自动的保证对于他们的操作是原子的并且不需要使用同步。


## 10-30

### 为什么使用Executor框架？

1. 能复用已存在并空闲的线程从而减少线程对象的创建从而减少了消亡线程的开销。
2. 可有效控制最大并发线程数，提高系统资源使用率，同时避免过多资源竞争。
3. 框架中已经有定时、定期、单线程、并发数控制等功能。


> 综上所述使用线程池框架 Executor 能更好的管理线程、提供系统资源使用率。



## 10-29

### 什么是 Executor 框架？

线程池就是线程的集合，线程池集中管理线程，以实现线程的重用，降低资源消耗，提高响应速度等。线程用于执行异步任务，
单个的线程既是工作单元也是执行机制，从JDK1.5开始，为了把工作单元与执行机制分离开，Executor框架诞生了，他是一个用于统一创建与运行的接口。
Executor框架实现的就是线程池的功能。

Executor框架包括3大部分：

- 任务。也就是工作单元，包括被执行任务需要实现的接口：Runnable接口或者Callable接口；
- 任务的执行。也就是把任务分派给多个线程的执行机制，包括Executor接口及继承自Executor接口的ExecutorService接口。
- 异步计算的结果。包括Future接口及实现了Future接口的FutureTask类。

## 10-28

### 什么是线程组？

线程组，顾名思义，就是线程的组，逻辑类似项目组，用于管理项目成员，线程组就是用来管理线程的。线程组中可以有线程对象，
也可以有线程组，组中还可以有线程，这样的组织结构有点类似于树的形式。 每个线程都会有一个线程组，如果没有设置将会有些默认的初始化设置。

虽然线程组看上去很有用处，实际上现在的程序开发中已经不推荐使用它了，主要有两个原因：

1. 线程组ThreadGroup对象中比较有用的方法是stop、resume、suspend等方法，由于这几个方法会导致线程的安全问题（主要是死锁问题），
已经被官方废弃掉了，所以线程组本身的应用价值就大打折扣了。

2. 线程组ThreadGroup不是线程安全的，这在使用过程中获取的信息并不全是及时有效的，这就降低了它的统计使用价值。

> 虽然线程组现在已经不被推荐使用了（推荐使用线程池），但是它在线程的异常处理方面还是做出了一定的贡献。当线程运行过程中出现异常情况时，
在某些情况下JVM会把线程的控制权交到线程关联的线程组对象上来进行处理。所以对线程组的了解还是有一定必要的。

 
## 10-27

### 产生死锁的必要条件。

- 互斥条件：共享资源被一个线程占用
- 请求与保持条件（占有且等待）：一个进程因请求资源而阻塞时，对已获得的资源保持不释放
- 不剥夺条件：进程已获得资源，在未使用完之前，不能强行剥夺
- 循环等待条件：多个线程之前循环等待资源，必须是循环的互相等待

## 10-26

### 什么是上下文切换？

由于时分复用的存在，CPU 为每个线程分配时间片并轮转，从一个线程切换到另一个线程，这个过程需要先保存当前线程的状态，
然后加载新线程的状态，这就是上下文切换。

上下文切换通常是计算密集型的，会消耗大量 CPU 的时间。而 Linux 的一个特性就是上下文切换和模式切换的消耗非常少。

## 10-25

### 如何停止一个正在运行的线程？

要停止一个正在运行的线程，可以使用 `Thread.interrupt()` 方法来中断线程，或者使用 `Thread.stop()` 方法来停止线程。

## 10-24

### 线程不安全的本质什么?

由于各个硬件设备的数据处理速度有极大差异，为了处理 CPU、内存、I/O 设备之间的速度差异，计算机体系结构、操作系统以及程序编译过程都做出了相应的优化。

- CPU 增加了缓存，以均衡与内存之间的速度差异，这导致了 `可见性问题`。
- 操作系统增加了进程、线程，以分时复用 CPU，这导致了 `原子性问题`。
- 编译器优化指令执行次序，使得缓存能够得到更加合理的利用，这导致了 `有序性问题`。


## 10-23

### AOP 的实现方式？

- **静态代理：** 代理类在编译阶段生成，在编译阶段将通知织入Java字节码中，也称编译时增强。AspectJ使用的是静态代理。
- **动态代理：** 代理类在程序运行时创建，AOP框架不会去修改字节码，而是在内存中临时生成一个代理对象，在运行期间对业务方法进行增强，不会生成新类。

## 10-22

### 什么是 AOP？

AOP （Aspect oriented programming）区别于OOP （面向对象编程），是对 OOP 的一种补充。
它会将事务管理、日志记录等公共业务逻辑封装为切面单独处理，与业务代码分割。减少重复性代码，降低系统耦合性。

## 10-21

### 什么是 IOC？
IOC （Inversion of Control）控制反转。指对象的生命周期控制通过反射由 `Spring 容器` 处理，包括对象的初始化、创建、销毁等。 
能够降低类之间的耦合。

IOC 又称为 DI（依赖注入），是指在 Spring 创建对象的过程中，把对象依赖的属性注入到对象中。有两种方式：构造器注入和属性注入。

## 10-20

### 请简单介绍JAVA8新特性？

> JAVA8 已经名义上停止维护了，但是 JAVA8 新特性还是面试经常会问到的点。就是为了考察 `函数式编程` 以及 `stream 流` 的掌握情况。

- **Lambda 表达式：**
JAVA8 之后允许使用更简洁的箭头函数创建函数式接口的实例，在功能上与匿名内部类类似，但是更加简洁。

- **Stream 流操作：**
Stream 流允许开发者对集合或数组进行链状流式操作，基于函数式编程模型。分为中间操作及终结操作。

- **Optional 类：**
使用 Optional 可以写出更优雅的代码来避免空指针异常。
Optional 类似于包装类，将具体的数据封装到Optional对象内部。我们可以使用 Optional 中封装好的方法操作封装的数据。优雅的避免空指针异常。

## 10-19

 ### Integer和int的区别？

Java 虽然宣称一切都是对象，但原始数据类型是例外。
int 是整形数字，是 java 的8个原始数据类型（Primitive Types）（char、boolean、byte、short、int、long、float、double）之一。
在 java API 中有对应的包装类，分别是Character、Boolean、Byte、Short、Integer、Long、Float、Double。

Integer 是 int 对应的包装类，它有一个int类型的字段存储数据，并且提供了基本操作，比如数学运算、int和字符串之间转换等。
在 java 5 中引入了自动装箱和自动拆箱功能（boxing/unboxing），java 可以根据上下文，自动进行转换，极大地简化了相关编程。
javac自动把装箱转换为Integer.valueOf(),把拆箱替换为Integer.intValue()。

自动装箱实际上算是一种语法糖。什么是语法糖？可以简单理解为java平台为我们自动进行了一些转换，保证不同的写法在运行时等价，
他们发生在编译阶段，也就是生产的字节码是一致的。

原始数据类型和 java 泛型并不能配合使用。因为 java 的泛型某种程度上可以算作伪泛型，它完全是一种编译期的技巧，
java 编译期会自动将类型转换为对应的特定类型。这就决定了使用泛型，必须保证相应类型可以转换为 Object。

## 10-18

### 抽象类和接口的区别？

1. 一个类可以实现多个接口，但只能继承一个抽象类。接口本身可以通过 extends 关键字扩展多个接口。

2. 抽象类可以有构造方法，接口中不能有构造方法。

3. 抽象类中不一定都是抽象方法，也可以全是具体方法（非抽象方法）。在 Java8 之前，接口中的所有方法必须是抽象的。但Java8的时候，接口可以有默认方法和静态方法。

4. 接口中只能有 static、final 变量，不能有其他变量，而抽象类中不一定。

5. 接口中的方法和变量默认修饰符为 public（写不写都是public），
而抽象类中的方法可以是 public，protected 和默认类型（抽象方法就是为了被重写所以不能是 private 修饰）

## 10-17

### 构造器是否可被重写？


重写是子类覆盖父类的方法，而构造器名称与类名相同，不可能存在重写的概念。

但是在一个类中，是可以存在多个参数不同的构造器的，这是构造器的重载。


## 10-16

### 请描述 & 和 && 的区别。

**相同点：**`&` 和 `&&` 都可以用作逻辑与的运算符，表示逻辑与（and）。

**不同点：**

1、`&&` 具有短路的功能，而 `&` 不具备短路功能。

2、当 `&` 运算符两边的表达式的结果都为 true 时，整个运算结果才为 true。而&&运算符第一个表达式为 false 时，则结果为 false，不再计算第二个表达式。 

3、`&` 还可以用作位运算符，当 `&` 操作符两边的表达式不是boolean类型时，`&` 表示按位与操作，
我们通常使用 0x0f 来与一个整数进行&运算，来获取该整数的最低4个 bit 位，例如：0x31 & 0x0f 的结果为 0x01。

## 10-15

### 请描述面向对象的特征。

面向对象有三大特征：`继承`、`封装`、`多态`

如果是四大特征：`继承`、`封装`、`多态`、`抽象`

**继承：**
在定义和实现一个类的时候，可以在一个已经存在的类的基础之上来进行，把这个已经存在的类所定义的内容作为自己的内容，
并可以加入若干新的内容，或修改原来的方法使之更适合特殊的需要，这就是继承。比如，遗产的继承。
**封装：**
面向对象的封装性指的是将对象封装成一个高度自治和相对封闭的个体，对象状态（属性）由这个对象自己的行为（方法）来读取和改变
**多态：**
多态指的是程序中定义的引用变量所指向的具体类型和通过该引用变量发出的方法调用在编程时并不确定，而是在程序运行期间才确定，
即一个引用变量到底会指向哪个类的实例对象，该引用变量发出的方法调用到底在哪个类中实现的方法，必须在由程序运营期间才能决定。
**抽象：**
抽象就是找出一些事物的相似和共性之处，然后将这些事物归为一个类，这个类只考虑这些事物的相似和共性之处，
并且会忽略与当前主题和目标无关的那些方面，将注意力集中在与当前目标有关的方面。就是把现实生活的对象，抽象为类。

## 10-14

### Java 中 throw 和 throws 区别？

- `throw` 是语句抛出的一个异常。
- `throws` 是方法可能抛出异常的声明。

两者都是“消极处理异常”的方式（指抛出或可能抛出异常）。

## 10-13

### 运行时异常与受检异常有何异同？

所有异常都继承自 `java.lang.Throwable`，它有两个直接的子类 Error 与 Exception。

Java Compiler 要求所有的 Exception 要么被 catch ，要么被 throw，除非这是一个 RuntimeExeption。

**受检异常（Checked Exception）**是在编译时期有编译器检测的异常，该异常必须要被处理。受检异常继承于Exception。

**非受检异常（Unchecked Exception）**是在运行时期的异常，即编译器不会检测异常，需要时也可以捕获异常。非受检异常继承于RuntimeException。


## 10-12

### 是否可以继承String类？

String 类是不能被继承的，因为他是被final关键字修饰的。

```java
public final class String
    implements java.io.Serializable, Comparable<String>, CharSequence,
               Constable, ConstantDesc {
  ......
}

```

## 10-11

### String 类的长度有限制吗？

String 是由一个字符数组 `char[]` 来存储的，由于数组的长度及索引是整数且 String 类中返回字符串长度的方法 `length()` 的返回值也是 int ，
所以通过查看 java 源码中的类 Integer 我们可以看到 Integer 的最大范围是`2^31 -1`,
由于数组是从0开始的，所以数组的最大长度可以使【0~2^31】通过计算是大概4GB。

但是通过翻阅 java 虚拟机手册对 class 文件格式的定义以及常量池中对 String 类型的结构体定义我们可以知道对于索引定义了 u2，就是无符号占2个字节，
2个字节可以表示的最大范围是 `2^16 -1 = 65535`。 但是由于JVM需要1个字节表示结束指令，所以这个范围就为65534了。
超出这个范围在编译时期是会报错的，但是运行时拼接或者赋值的话范围是在整形的最大范围。

## 10-10

### 什么是节流和防抖？应用场景有哪些？

在前端开发过程中，当函数绑定到某些可能会持续触发的事件中时，
可能会造成性能和资源的浪费。如鼠标的移动、提交按钮可能被用户快速重复的点击等。
**节流**和**防抖**就是为了解决这一问题。

- **防抖（debounce）：**
防抖指事件触发时，它将在指定时间后执行，如果这段时间内再次被调用，则重新计算执行时间。
通常用于滚动事件、调整窗口大小、鼠标移动、窗口搜索建议等。
```javascript
function debounce(func, delay) {
    let timeoutId;
    return function (...args) {
        clearTimeout(timeoutId);
        timeoutId = setTimeout(() => {
            func(...args);
        }, delay);
    };
}

// 使用防抖函数
const debouncedFunction = debounce(() => {
    console.log('Debounced function called.');
}, 1000);

// 模拟事件触发
setInterval(() => {
    debouncedFunction();
}, 200);  // 防抖后，该函数触发后会等待1秒，如果1秒内再次触发，则重新计时

```
- **节流（throttle）：** 
节流指连续触发多次的事件在指定时间范围内只执行一次，进而限制函数的执行频率。
通常用于自动保存、延时执行等。
```javascript
function throttle(func, delay) {
  let lastCall = 0;
  return function (...args) {
    const now = new Date().getTime();
    if (now - lastCall < delay) return;
    lastCall = now;
    func(...args);
  };
}

// 使用节流函数
const throttledFunction = throttle(() => {
  console.log('Throttled function called.');
}, 1000);

// 模拟事件触发
setInterval(throttledFunction, 200);  // 节流后，该函数每秒最多执行一次

```

> 总的来说，节流和防抖都是为了限制函数执行的频率，以优化性能、减少不必要的计算或请求，提高用户体验。选择使用哪种取决于具体的需求和事件特性。

## 10-9

### 请描述 static 修饰符。

`static` 关键字可以用于类、方法、属性等。

**静态字段**

如果将一个字段定义为static，那么这个字段并不会出现在每个类的对象中。每个静态字段只有一个副本。可以认为静态字段属于类，而不属于单个对象。

**静态常量**

JAVA中没有用于修饰常量的关键字，所以常量的修饰通常使用 `public static final` 三个关键字共同修饰。使其静态加载且不允许修改。

**静态方法**

静态方法是不操作对象的方法。例如 `Math.pow(x,a)`会计算 x 的 a 次幂。它不会使用任何 Math 对象来完成该方法调用。它没有隐式参数。

**工厂方法**

类似于 `LocalDate` 和 `NumberFormat` 的类使用静态工厂方法来构造对象，就是静态方法：

```Java
LocalDate localdate = LocalDate.now(); 
LocalDate localdate = LocalDate.of(2020, 5, 13);  
System.out.println(NumberFormat.format(0.1));
```

**main 方法**

调用静态方法不需要任何对象，与 `Math.pow` 同理，main 方法也是一个静态方法，启动程序时没有任何对象，将执行 main 方法并构造程序所需要的对象。

## 10-8

### 请描述修饰符、访问修饰符，非访问修饰符。

- **修饰符**（Modifiers）：指用于修饰类、方法。变量等的关键字，用于置顶元素的访问类型。作用域、权限、继承性、抽象性等。修饰符分为访问修饰符和非访问修饰符。

- **访问修饰符（Access Modifiers）**: 访问修饰符控制类、方法、变量等的访问权限，共有以下四中：

  | Name      | Description     |
  |]]></description>
            <content:encoded><![CDATA[<h2 id="_10-31" tabindex="-1">10-31 <a class="header-anchor" href="#_10-31" aria-label="Permalink to &quot;10-31&quot;">&ZeroWidthSpace;</a></h2>
<h3 id="什么是原子操作" tabindex="-1">什么是原子操作？ <a class="header-anchor" href="#什么是原子操作" aria-label="Permalink to &quot;什么是原子操作？&quot;">&ZeroWidthSpace;</a></h3>
<p>原子操作（atomic operation）意为”不可被中断的一个或一系列操作” 。处理器使用基于对缓存加锁或总线加锁的方式来实现多处理器之间的原子操作。
在Java中可以通过锁和循环CAS的方式来实现原子操作。CAS操作—— <code>Compare &amp; Set</code>，或是 <code>Compare &amp; Swap</code>，现在几乎所有的CPU指令都支持CAS的原子操作。</p>
<p>原子操作是指一个不受其他操作影响的操作任务单元。原子操作是在多线程环境下避免数据不一致必须的手段。
int++并不是一个原子操作，所以当一个线程读取它的值并加1时，另外一个线程有可能会读到之前的值，这就会引发错误。</p>
<p>为了解决这个问题，必须保证增加操作是原子的，在JDK1.5之前我们可以使用同步技术来做到这一点。
到JDK1.5，<code>java.util.concurrent.atomic</code> 包提供了 int 和 long 类型的原子包装类，它们可以自动的保证对于他们的操作是原子的并且不需要使用同步。</p>
<h2 id="_10-30" tabindex="-1">10-30 <a class="header-anchor" href="#_10-30" aria-label="Permalink to &quot;10-30&quot;">&ZeroWidthSpace;</a></h2>
<h3 id="为什么使用executor框架" tabindex="-1">为什么使用Executor框架？ <a class="header-anchor" href="#为什么使用executor框架" aria-label="Permalink to &quot;为什么使用Executor框架？&quot;">&ZeroWidthSpace;</a></h3>
<ol>
<li>能复用已存在并空闲的线程从而减少线程对象的创建从而减少了消亡线程的开销。</li>
<li>可有效控制最大并发线程数，提高系统资源使用率，同时避免过多资源竞争。</li>
<li>框架中已经有定时、定期、单线程、并发数控制等功能。</li>
</ol>
<blockquote>
<p>综上所述使用线程池框架 Executor 能更好的管理线程、提供系统资源使用率。</p>
</blockquote>
<h2 id="_10-29" tabindex="-1">10-29 <a class="header-anchor" href="#_10-29" aria-label="Permalink to &quot;10-29&quot;">&ZeroWidthSpace;</a></h2>
<h3 id="什么是-executor-框架" tabindex="-1">什么是 Executor 框架？ <a class="header-anchor" href="#什么是-executor-框架" aria-label="Permalink to &quot;什么是 Executor 框架？&quot;">&ZeroWidthSpace;</a></h3>
<p>线程池就是线程的集合，线程池集中管理线程，以实现线程的重用，降低资源消耗，提高响应速度等。线程用于执行异步任务，
单个的线程既是工作单元也是执行机制，从JDK1.5开始，为了把工作单元与执行机制分离开，Executor框架诞生了，他是一个用于统一创建与运行的接口。
Executor框架实现的就是线程池的功能。</p>
<p>Executor框架包括3大部分：</p>
<ul>
<li>任务。也就是工作单元，包括被执行任务需要实现的接口：Runnable接口或者Callable接口；</li>
<li>任务的执行。也就是把任务分派给多个线程的执行机制，包括Executor接口及继承自Executor接口的ExecutorService接口。</li>
<li>异步计算的结果。包括Future接口及实现了Future接口的FutureTask类。</li>
</ul>
<h2 id="_10-28" tabindex="-1">10-28 <a class="header-anchor" href="#_10-28" aria-label="Permalink to &quot;10-28&quot;">&ZeroWidthSpace;</a></h2>
<h3 id="什么是线程组" tabindex="-1">什么是线程组？ <a class="header-anchor" href="#什么是线程组" aria-label="Permalink to &quot;什么是线程组？&quot;">&ZeroWidthSpace;</a></h3>
<p>线程组，顾名思义，就是线程的组，逻辑类似项目组，用于管理项目成员，线程组就是用来管理线程的。线程组中可以有线程对象，
也可以有线程组，组中还可以有线程，这样的组织结构有点类似于树的形式。 每个线程都会有一个线程组，如果没有设置将会有些默认的初始化设置。</p>
<p>虽然线程组看上去很有用处，实际上现在的程序开发中已经不推荐使用它了，主要有两个原因：</p>
<ol>
<li>
<p>线程组ThreadGroup对象中比较有用的方法是stop、resume、suspend等方法，由于这几个方法会导致线程的安全问题（主要是死锁问题），
已经被官方废弃掉了，所以线程组本身的应用价值就大打折扣了。</p>
</li>
<li>
<p>线程组ThreadGroup不是线程安全的，这在使用过程中获取的信息并不全是及时有效的，这就降低了它的统计使用价值。</p>
</li>
</ol>
<blockquote>
<p>虽然线程组现在已经不被推荐使用了（推荐使用线程池），但是它在线程的异常处理方面还是做出了一定的贡献。当线程运行过程中出现异常情况时，
在某些情况下JVM会把线程的控制权交到线程关联的线程组对象上来进行处理。所以对线程组的了解还是有一定必要的。</p>
</blockquote>
<h2 id="_10-27" tabindex="-1">10-27 <a class="header-anchor" href="#_10-27" aria-label="Permalink to &quot;10-27&quot;">&ZeroWidthSpace;</a></h2>
<h3 id="产生死锁的必要条件。" tabindex="-1">产生死锁的必要条件。 <a class="header-anchor" href="#产生死锁的必要条件。" aria-label="Permalink to &quot;产生死锁的必要条件。&quot;">&ZeroWidthSpace;</a></h3>
<ul>
<li>互斥条件：共享资源被一个线程占用</li>
<li>请求与保持条件（占有且等待）：一个进程因请求资源而阻塞时，对已获得的资源保持不释放</li>
<li>不剥夺条件：进程已获得资源，在未使用完之前，不能强行剥夺</li>
<li>循环等待条件：多个线程之前循环等待资源，必须是循环的互相等待</li>
</ul>
<h2 id="_10-26" tabindex="-1">10-26 <a class="header-anchor" href="#_10-26" aria-label="Permalink to &quot;10-26&quot;">&ZeroWidthSpace;</a></h2>
<h3 id="什么是上下文切换" tabindex="-1">什么是上下文切换？ <a class="header-anchor" href="#什么是上下文切换" aria-label="Permalink to &quot;什么是上下文切换？&quot;">&ZeroWidthSpace;</a></h3>
<p>由于时分复用的存在，CPU 为每个线程分配时间片并轮转，从一个线程切换到另一个线程，这个过程需要先保存当前线程的状态，
然后加载新线程的状态，这就是上下文切换。</p>
<p>上下文切换通常是计算密集型的，会消耗大量 CPU 的时间。而 Linux 的一个特性就是上下文切换和模式切换的消耗非常少。</p>
<h2 id="_10-25" tabindex="-1">10-25 <a class="header-anchor" href="#_10-25" aria-label="Permalink to &quot;10-25&quot;">&ZeroWidthSpace;</a></h2>
<h3 id="如何停止一个正在运行的线程" tabindex="-1">如何停止一个正在运行的线程？ <a class="header-anchor" href="#如何停止一个正在运行的线程" aria-label="Permalink to &quot;如何停止一个正在运行的线程？&quot;">&ZeroWidthSpace;</a></h3>
<p>要停止一个正在运行的线程，可以使用 <code>Thread.interrupt()</code> 方法来中断线程，或者使用 <code>Thread.stop()</code> 方法来停止线程。</p>
<h2 id="_10-24" tabindex="-1">10-24 <a class="header-anchor" href="#_10-24" aria-label="Permalink to &quot;10-24&quot;">&ZeroWidthSpace;</a></h2>
<h3 id="线程不安全的本质什么" tabindex="-1">线程不安全的本质什么? <a class="header-anchor" href="#线程不安全的本质什么" aria-label="Permalink to &quot;线程不安全的本质什么?&quot;">&ZeroWidthSpace;</a></h3>
<p>由于各个硬件设备的数据处理速度有极大差异，为了处理 CPU、内存、I/O 设备之间的速度差异，计算机体系结构、操作系统以及程序编译过程都做出了相应的优化。</p>
<ul>
<li>CPU 增加了缓存，以均衡与内存之间的速度差异，这导致了 <code>可见性问题</code>。</li>
<li>操作系统增加了进程、线程，以分时复用 CPU，这导致了 <code>原子性问题</code>。</li>
<li>编译器优化指令执行次序，使得缓存能够得到更加合理的利用，这导致了 <code>有序性问题</code>。</li>
</ul>
<h2 id="_10-23" tabindex="-1">10-23 <a class="header-anchor" href="#_10-23" aria-label="Permalink to &quot;10-23&quot;">&ZeroWidthSpace;</a></h2>
<h3 id="aop-的实现方式" tabindex="-1">AOP 的实现方式？ <a class="header-anchor" href="#aop-的实现方式" aria-label="Permalink to &quot;AOP 的实现方式？&quot;">&ZeroWidthSpace;</a></h3>
<ul>
<li><strong>静态代理：</strong> 代理类在编译阶段生成，在编译阶段将通知织入Java字节码中，也称编译时增强。AspectJ使用的是静态代理。</li>
<li><strong>动态代理：</strong> 代理类在程序运行时创建，AOP框架不会去修改字节码，而是在内存中临时生成一个代理对象，在运行期间对业务方法进行增强，不会生成新类。</li>
</ul>
<h2 id="_10-22" tabindex="-1">10-22 <a class="header-anchor" href="#_10-22" aria-label="Permalink to &quot;10-22&quot;">&ZeroWidthSpace;</a></h2>
<h3 id="什么是-aop" tabindex="-1">什么是 AOP？ <a class="header-anchor" href="#什么是-aop" aria-label="Permalink to &quot;什么是 AOP？&quot;">&ZeroWidthSpace;</a></h3>
<p>AOP （Aspect oriented programming）区别于OOP （面向对象编程），是对 OOP 的一种补充。
它会将事务管理、日志记录等公共业务逻辑封装为切面单独处理，与业务代码分割。减少重复性代码，降低系统耦合性。</p>
<h2 id="_10-21" tabindex="-1">10-21 <a class="header-anchor" href="#_10-21" aria-label="Permalink to &quot;10-21&quot;">&ZeroWidthSpace;</a></h2>
<h3 id="什么是-ioc" tabindex="-1">什么是 IOC？ <a class="header-anchor" href="#什么是-ioc" aria-label="Permalink to &quot;什么是 IOC？&quot;">&ZeroWidthSpace;</a></h3>
<p>IOC （Inversion of Control）控制反转。指对象的生命周期控制通过反射由 <code>Spring 容器</code> 处理，包括对象的初始化、创建、销毁等。
能够降低类之间的耦合。</p>
<p>IOC 又称为 DI（依赖注入），是指在 Spring 创建对象的过程中，把对象依赖的属性注入到对象中。有两种方式：构造器注入和属性注入。</p>
<h2 id="_10-20" tabindex="-1">10-20 <a class="header-anchor" href="#_10-20" aria-label="Permalink to &quot;10-20&quot;">&ZeroWidthSpace;</a></h2>
<h3 id="请简单介绍java8新特性" tabindex="-1">请简单介绍JAVA8新特性？ <a class="header-anchor" href="#请简单介绍java8新特性" aria-label="Permalink to &quot;请简单介绍JAVA8新特性？&quot;">&ZeroWidthSpace;</a></h3>
<blockquote>
<p>JAVA8 已经名义上停止维护了，但是 JAVA8 新特性还是面试经常会问到的点。就是为了考察 <code>函数式编程</code> 以及 <code>stream 流</code> 的掌握情况。</p>
</blockquote>
<ul>
<li>
<p><strong>Lambda 表达式：</strong>
JAVA8 之后允许使用更简洁的箭头函数创建函数式接口的实例，在功能上与匿名内部类类似，但是更加简洁。</p>
</li>
<li>
<p><strong>Stream 流操作：</strong>
Stream 流允许开发者对集合或数组进行链状流式操作，基于函数式编程模型。分为中间操作及终结操作。</p>
</li>
<li>
<p><strong>Optional 类：</strong>
使用 Optional 可以写出更优雅的代码来避免空指针异常。
Optional 类似于包装类，将具体的数据封装到Optional对象内部。我们可以使用 Optional 中封装好的方法操作封装的数据。优雅的避免空指针异常。</p>
</li>
</ul>
<h2 id="_10-19" tabindex="-1">10-19 <a class="header-anchor" href="#_10-19" aria-label="Permalink to &quot;10-19&quot;">&ZeroWidthSpace;</a></h2>
<h3 id="integer和int的区别" tabindex="-1">Integer和int的区别？ <a class="header-anchor" href="#integer和int的区别" aria-label="Permalink to &quot;Integer和int的区别？&quot;">&ZeroWidthSpace;</a></h3>
<p>Java 虽然宣称一切都是对象，但原始数据类型是例外。
int 是整形数字，是 java 的8个原始数据类型（Primitive Types）（char、boolean、byte、short、int、long、float、double）之一。
在 java API 中有对应的包装类，分别是Character、Boolean、Byte、Short、Integer、Long、Float、Double。</p>
<p>Integer 是 int 对应的包装类，它有一个int类型的字段存储数据，并且提供了基本操作，比如数学运算、int和字符串之间转换等。
在 java 5 中引入了自动装箱和自动拆箱功能（boxing/unboxing），java 可以根据上下文，自动进行转换，极大地简化了相关编程。
javac自动把装箱转换为Integer.valueOf(),把拆箱替换为Integer.intValue()。</p>
<p>自动装箱实际上算是一种语法糖。什么是语法糖？可以简单理解为java平台为我们自动进行了一些转换，保证不同的写法在运行时等价，
他们发生在编译阶段，也就是生产的字节码是一致的。</p>
<p>原始数据类型和 java 泛型并不能配合使用。因为 java 的泛型某种程度上可以算作伪泛型，它完全是一种编译期的技巧，
java 编译期会自动将类型转换为对应的特定类型。这就决定了使用泛型，必须保证相应类型可以转换为 Object。</p>
<h2 id="_10-18" tabindex="-1">10-18 <a class="header-anchor" href="#_10-18" aria-label="Permalink to &quot;10-18&quot;">&ZeroWidthSpace;</a></h2>
<h3 id="抽象类和接口的区别" tabindex="-1">抽象类和接口的区别？ <a class="header-anchor" href="#抽象类和接口的区别" aria-label="Permalink to &quot;抽象类和接口的区别？&quot;">&ZeroWidthSpace;</a></h3>
<ol>
<li>
<p>一个类可以实现多个接口，但只能继承一个抽象类。接口本身可以通过 extends 关键字扩展多个接口。</p>
</li>
<li>
<p>抽象类可以有构造方法，接口中不能有构造方法。</p>
</li>
<li>
<p>抽象类中不一定都是抽象方法，也可以全是具体方法（非抽象方法）。在 Java8 之前，接口中的所有方法必须是抽象的。但Java8的时候，接口可以有默认方法和静态方法。</p>
</li>
<li>
<p>接口中只能有 static、final 变量，不能有其他变量，而抽象类中不一定。</p>
</li>
<li>
<p>接口中的方法和变量默认修饰符为 public（写不写都是public），
而抽象类中的方法可以是 public，protected 和默认类型（抽象方法就是为了被重写所以不能是 private 修饰）</p>
</li>
</ol>
<h2 id="_10-17" tabindex="-1">10-17 <a class="header-anchor" href="#_10-17" aria-label="Permalink to &quot;10-17&quot;">&ZeroWidthSpace;</a></h2>
<h3 id="构造器是否可被重写" tabindex="-1">构造器是否可被重写？ <a class="header-anchor" href="#构造器是否可被重写" aria-label="Permalink to &quot;构造器是否可被重写？&quot;">&ZeroWidthSpace;</a></h3>
<p>重写是子类覆盖父类的方法，而构造器名称与类名相同，不可能存在重写的概念。</p>
<p>但是在一个类中，是可以存在多个参数不同的构造器的，这是构造器的重载。</p>
<h2 id="_10-16" tabindex="-1">10-16 <a class="header-anchor" href="#_10-16" aria-label="Permalink to &quot;10-16&quot;">&ZeroWidthSpace;</a></h2>
<h3 id="请描述-和-的区别。" tabindex="-1">请描述 &amp; 和 &amp;&amp; 的区别。 <a class="header-anchor" href="#请描述-和-的区别。" aria-label="Permalink to &quot;请描述 &amp; 和 &amp;&amp; 的区别。&quot;">&ZeroWidthSpace;</a></h3>
<p><strong>相同点：</strong><code>&amp;</code> 和 <code>&amp;&amp;</code> 都可以用作逻辑与的运算符，表示逻辑与（and）。</p>
<p><strong>不同点：</strong></p>
<p>1、<code>&amp;&amp;</code> 具有短路的功能，而 <code>&amp;</code> 不具备短路功能。</p>
<p>2、当 <code>&amp;</code> 运算符两边的表达式的结果都为 true 时，整个运算结果才为 true。而&amp;&amp;运算符第一个表达式为 false 时，则结果为 false，不再计算第二个表达式。</p>
<p>3、<code>&amp;</code> 还可以用作位运算符，当 <code>&amp;</code> 操作符两边的表达式不是boolean类型时，<code>&amp;</code> 表示按位与操作，
我们通常使用 0x0f 来与一个整数进行&amp;运算，来获取该整数的最低4个 bit 位，例如：0x31 &amp; 0x0f 的结果为 0x01。</p>
<h2 id="_10-15" tabindex="-1">10-15 <a class="header-anchor" href="#_10-15" aria-label="Permalink to &quot;10-15&quot;">&ZeroWidthSpace;</a></h2>
<h3 id="请描述面向对象的特征。" tabindex="-1">请描述面向对象的特征。 <a class="header-anchor" href="#请描述面向对象的特征。" aria-label="Permalink to &quot;请描述面向对象的特征。&quot;">&ZeroWidthSpace;</a></h3>
<p>面向对象有三大特征：<code>继承</code>、<code>封装</code>、<code>多态</code></p>
<p>如果是四大特征：<code>继承</code>、<code>封装</code>、<code>多态</code>、<code>抽象</code></p>
<p><strong>继承：</strong>
在定义和实现一个类的时候，可以在一个已经存在的类的基础之上来进行，把这个已经存在的类所定义的内容作为自己的内容，
并可以加入若干新的内容，或修改原来的方法使之更适合特殊的需要，这就是继承。比如，遗产的继承。
<strong>封装：</strong>
面向对象的封装性指的是将对象封装成一个高度自治和相对封闭的个体，对象状态（属性）由这个对象自己的行为（方法）来读取和改变
<strong>多态：</strong>
多态指的是程序中定义的引用变量所指向的具体类型和通过该引用变量发出的方法调用在编程时并不确定，而是在程序运行期间才确定，
即一个引用变量到底会指向哪个类的实例对象，该引用变量发出的方法调用到底在哪个类中实现的方法，必须在由程序运营期间才能决定。
<strong>抽象：</strong>
抽象就是找出一些事物的相似和共性之处，然后将这些事物归为一个类，这个类只考虑这些事物的相似和共性之处，
并且会忽略与当前主题和目标无关的那些方面，将注意力集中在与当前目标有关的方面。就是把现实生活的对象，抽象为类。</p>
<h2 id="_10-14" tabindex="-1">10-14 <a class="header-anchor" href="#_10-14" aria-label="Permalink to &quot;10-14&quot;">&ZeroWidthSpace;</a></h2>
<h3 id="java-中-throw-和-throws-区别" tabindex="-1">Java 中 throw 和 throws 区别？ <a class="header-anchor" href="#java-中-throw-和-throws-区别" aria-label="Permalink to &quot;Java 中 throw 和 throws 区别？&quot;">&ZeroWidthSpace;</a></h3>
<ul>
<li><code>throw</code> 是语句抛出的一个异常。</li>
<li><code>throws</code> 是方法可能抛出异常的声明。</li>
</ul>
<p>两者都是“消极处理异常”的方式（指抛出或可能抛出异常）。</p>
<h2 id="_10-13" tabindex="-1">10-13 <a class="header-anchor" href="#_10-13" aria-label="Permalink to &quot;10-13&quot;">&ZeroWidthSpace;</a></h2>
<h3 id="运行时异常与受检异常有何异同" tabindex="-1">运行时异常与受检异常有何异同？ <a class="header-anchor" href="#运行时异常与受检异常有何异同" aria-label="Permalink to &quot;运行时异常与受检异常有何异同？&quot;">&ZeroWidthSpace;</a></h3>
<p>所有异常都继承自 <code>java.lang.Throwable</code>，它有两个直接的子类 Error 与 Exception。</p>
<p>Java Compiler 要求所有的 Exception 要么被 catch ，要么被 throw，除非这是一个 RuntimeExeption。</p>
<p>**受检异常（Checked Exception）**是在编译时期有编译器检测的异常，该异常必须要被处理。受检异常继承于Exception。</p>
<p>**非受检异常（Unchecked Exception）**是在运行时期的异常，即编译器不会检测异常，需要时也可以捕获异常。非受检异常继承于RuntimeException。</p>
<h2 id="_10-12" tabindex="-1">10-12 <a class="header-anchor" href="#_10-12" aria-label="Permalink to &quot;10-12&quot;">&ZeroWidthSpace;</a></h2>
<h3 id="是否可以继承string类" tabindex="-1">是否可以继承String类？ <a class="header-anchor" href="#是否可以继承string类" aria-label="Permalink to &quot;是否可以继承String类？&quot;">&ZeroWidthSpace;</a></h3>
<p>String 类是不能被继承的，因为他是被final关键字修饰的。</p>
<div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> final</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> String</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    implements</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> java.io.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">Serializable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">Comparable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">CharSequence</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">               Constable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">ConstantDesc</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  ......</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span></code></pre>
</div><h2 id="_10-11" tabindex="-1">10-11 <a class="header-anchor" href="#_10-11" aria-label="Permalink to &quot;10-11&quot;">&ZeroWidthSpace;</a></h2>
<h3 id="string-类的长度有限制吗" tabindex="-1">String 类的长度有限制吗？ <a class="header-anchor" href="#string-类的长度有限制吗" aria-label="Permalink to &quot;String 类的长度有限制吗？&quot;">&ZeroWidthSpace;</a></h3>
<p>String 是由一个字符数组 <code>char[]</code> 来存储的，由于数组的长度及索引是整数且 String 类中返回字符串长度的方法 <code>length()</code> 的返回值也是 int ，
所以通过查看 java 源码中的类 Integer 我们可以看到 Integer 的最大范围是<code>2^31 -1</code>,
由于数组是从0开始的，所以数组的最大长度可以使【0~2^31】通过计算是大概4GB。</p>
<p>但是通过翻阅 java 虚拟机手册对 class 文件格式的定义以及常量池中对 String 类型的结构体定义我们可以知道对于索引定义了 u2，就是无符号占2个字节，
2个字节可以表示的最大范围是 <code>2^16 -1 = 65535</code>。 但是由于JVM需要1个字节表示结束指令，所以这个范围就为65534了。
超出这个范围在编译时期是会报错的，但是运行时拼接或者赋值的话范围是在整形的最大范围。</p>
<h2 id="_10-10" tabindex="-1">10-10 <a class="header-anchor" href="#_10-10" aria-label="Permalink to &quot;10-10&quot;">&ZeroWidthSpace;</a></h2>
<h3 id="什么是节流和防抖-应用场景有哪些" tabindex="-1">什么是节流和防抖？应用场景有哪些？ <a class="header-anchor" href="#什么是节流和防抖-应用场景有哪些" aria-label="Permalink to &quot;什么是节流和防抖？应用场景有哪些？&quot;">&ZeroWidthSpace;</a></h3>
<p>在前端开发过程中，当函数绑定到某些可能会持续触发的事件中时，
可能会造成性能和资源的浪费。如鼠标的移动、提交按钮可能被用户快速重复的点击等。
<strong>节流</strong>和<strong>防抖</strong>就是为了解决这一问题。</p>
<ul>
<li><strong>防抖（debounce）：</strong>
防抖指事件触发时，它将在指定时间后执行，如果这段时间内再次被调用，则重新计算执行时间。
通常用于滚动事件、调整窗口大小、鼠标移动、窗口搜索建议等。</li>
</ul>
<div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> debounce</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">func</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">delay</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> timeoutId;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    return</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">...</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">args</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">        clearTimeout</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(timeoutId);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        timeoutId </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> setTimeout</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">            func</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">args);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        }, delay);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    };</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 使用防抖函数</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> debouncedFunction</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> debounce</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'Debounced function called.'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">1000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 模拟事件触发</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">setInterval</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">    debouncedFunction</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">200</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">);  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 防抖后，该函数触发后会等待1秒，如果1秒内再次触发，则重新计时</span></span></code></pre>
</div><ul>
<li><strong>节流（throttle）：</strong>
节流指连续触发多次的事件在指定时间范围内只执行一次，进而限制函数的执行频率。
通常用于自动保存、延时执行等。</li>
</ul>
<div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> throttle</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">func</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">delay</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> lastCall </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  return</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">...</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">args</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> now</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> Date</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">getTime</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (now </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> lastCall </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> delay) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    lastCall </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> now;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">    func</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">args);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  };</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 使用节流函数</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> throttledFunction</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> throttle</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'Throttled function called.'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">1000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 模拟事件触发</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">setInterval</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(throttledFunction, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">200</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">);  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 节流后，该函数每秒最多执行一次</span></span></code></pre>
</div><blockquote>
<p>总的来说，节流和防抖都是为了限制函数执行的频率，以优化性能、减少不必要的计算或请求，提高用户体验。选择使用哪种取决于具体的需求和事件特性。</p>
</blockquote>
<h2 id="_10-9" tabindex="-1">10-9 <a class="header-anchor" href="#_10-9" aria-label="Permalink to &quot;10-9&quot;">&ZeroWidthSpace;</a></h2>
<h3 id="请描述-static-修饰符。" tabindex="-1">请描述 static 修饰符。 <a class="header-anchor" href="#请描述-static-修饰符。" aria-label="Permalink to &quot;请描述 static 修饰符。&quot;">&ZeroWidthSpace;</a></h3>
<p><code>static</code> 关键字可以用于类、方法、属性等。</p>
<p><strong>静态字段</strong></p>
<p>如果将一个字段定义为static，那么这个字段并不会出现在每个类的对象中。每个静态字段只有一个副本。可以认为静态字段属于类，而不属于单个对象。</p>
<p><strong>静态常量</strong></p>
<p>JAVA中没有用于修饰常量的关键字，所以常量的修饰通常使用 <code>public static final</code> 三个关键字共同修饰。使其静态加载且不允许修改。</p>
<p><strong>静态方法</strong></p>
<p>静态方法是不操作对象的方法。例如 <code>Math.pow(x,a)</code>会计算 x 的 a 次幂。它不会使用任何 Math 对象来完成该方法调用。它没有隐式参数。</p>
<p><strong>工厂方法</strong></p>
<p>类似于 <code>LocalDate</code> 和 <code>NumberFormat</code> 的类使用静态工厂方法来构造对象，就是静态方法：</p>
<div class="language-Java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">Java</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">LocalDate localdate </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> LocalDate.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">now</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(); </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">LocalDate localdate </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> LocalDate.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">of</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">2020</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">13</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">);  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(NumberFormat.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">format</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">0.1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">));</span></span></code></pre>
</div><p><strong>main 方法</strong></p>
<p>调用静态方法不需要任何对象，与 <code>Math.pow</code> 同理，main 方法也是一个静态方法，启动程序时没有任何对象，将执行 main 方法并构造程序所需要的对象。</p>
<h2 id="_10-8" tabindex="-1">10-8 <a class="header-anchor" href="#_10-8" aria-label="Permalink to &quot;10-8&quot;">&ZeroWidthSpace;</a></h2>
<h3 id="请描述修饰符、访问修饰符-非访问修饰符。" tabindex="-1">请描述修饰符、访问修饰符，非访问修饰符。 <a class="header-anchor" href="#请描述修饰符、访问修饰符-非访问修饰符。" aria-label="Permalink to &quot;请描述修饰符、访问修饰符，非访问修饰符。&quot;">&ZeroWidthSpace;</a></h3>
<ul>
<li>
<p><strong>修饰符</strong>（Modifiers）：指用于修饰类、方法。变量等的关键字，用于置顶元素的访问类型。作用域、权限、继承性、抽象性等。修饰符分为访问修饰符和非访问修饰符。</p>
</li>
<li>
<p><strong>访问修饰符（Access Modifiers）</strong>: 访问修饰符控制类、方法、变量等的访问权限，共有以下四中：</p>
<table>
<thead>
<tr>
<th>Name</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>public</td>
<td>能被任何类访问。</td>
</tr>
<tr>
<td>protected</td>
<td>同一包课件，其他包的子类可见。</td>
</tr>
<tr>
<td>default</td>
<td>默认，只能在同一包中被访问。</td>
</tr>
<tr>
<td>private</td>
<td>只能在同一类中访问。</td>
</tr>
</tbody>
</table>
</li>
<li>
<p><strong>非访问修饰符（Non-Access Modifiers）</strong>: 非访问修饰符用于实现其他功能，包括以下几种类型：</p>
</li>
</ul>
<table>
<thead>
<tr>
<th>Name</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>final</td>
<td>表示不可继承的类、不可重写的方法或不可修改的变量。</td>
</tr>
<tr>
<td>abstract</td>
<td>表示抽象类或抽象方法，不能直接实例化抽象类。</td>
</tr>
<tr>
<td>static</td>
<td>静态资源关键字，用于创建类级别的变量或方法，而非实例级别。</td>
</tr>
<tr>
<td>synchronize</td>
<td>用于同步代码块，保证多线程环境下的同步访问。</td>
</tr>
<tr>
<td>transient</td>
<td>用于表示不需要序列化的变量。</td>
</tr>
<tr>
<td>volatile</td>
<td>用于表示多线程共享变量，保证可见性但不保证原子性。</td>
</tr>
<tr>
<td>strictfp</td>
<td>用于强制浮点运算遵循IEEE 764 标准，确保跨平台的浮点计算结果一致。</td>
</tr>
<tr>
<td>sealed</td>
<td>密封类。用于控制哪些类可以对该类进行拓展。</td>
</tr>
<tr>
<td>record</td>
<td>用于创建不可变的数据类。</td>
</tr>
</tbody>
</table>
<h2 id="_10-7" tabindex="-1">10-7 <a class="header-anchor" href="#_10-7" aria-label="Permalink to &quot;10-7&quot;">&ZeroWidthSpace;</a></h2>
<h3 id="什么是方法签名" tabindex="-1">什么是方法签名？ <a class="header-anchor" href="#什么是方法签名" aria-label="Permalink to &quot;什么是方法签名？&quot;">&ZeroWidthSpace;</a></h3>
<p>在上一篇中说到，重写必须要求方法签名相同，这里的<strong>方法签名</strong>（Method Signature），指的是方法名称及参数类型列表。如：</p>
<div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> sum</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> a, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> b){</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> b;}</span></span></code></pre>
</div><p>该方法的方法签名为： <code>sum(int, int)</code></p>
<h2 id="_10-6" tabindex="-1">10-6 <a class="header-anchor" href="#_10-6" aria-label="Permalink to &quot;10-6&quot;">&ZeroWidthSpace;</a></h2>
<h3 id="重载和重写是什么意思-有什么区别" tabindex="-1">重载和重写是什么意思？有什么区别？ <a class="header-anchor" href="#重载和重写是什么意思-有什么区别" aria-label="Permalink to &quot;重载和重写是什么意思？有什么区别？&quot;">&ZeroWidthSpace;</a></h3>
<p><code>重载</code>（Overloading）指在同一个类中可以定义多个参数列表不同的同名方法，其互相的关系是重载。它是编译时多态（静态绑定），根据参数列表选择调用对应的方法。</p>
<p><code>重写</code>（Overriding）指子类可以重新定义父类中非私有的方法，方法签名必须相同。子类可以通过重写父类的方法来实现自己的特定行为。
它是运行时多态（动态绑定），在运行时根据对象的实际类型选择调用对应的方法。</p>
<h2 id="_10-5" tabindex="-1">10-5 <a class="header-anchor" href="#_10-5" aria-label="Permalink to &quot;10-5&quot;">&ZeroWidthSpace;</a></h2>
<h3 id="string、stringbuilder、stringbuffer-的区别及使用场景" tabindex="-1">String、StringBuilder、StringBuffer 的区别及使用场景 <a class="header-anchor" href="#string、stringbuilder、stringbuffer-的区别及使用场景" aria-label="Permalink to &quot;String、StringBuilder、StringBuffer 的区别及使用场景&quot;">&ZeroWidthSpace;</a></h3>
<p><code>String</code> 由 final 关键字修饰，一旦定义就不可改变。可以在操作少量数据时使用。</p>
<p><code>StringBuilder</code> 可变，但是线程不安全。操作单线程大量数据时使用。</p>
<p><code>StringBuffer</code> 可变，线程安全。操作多线程大数据时使用。</p>
<h2 id="_10-4" tabindex="-1">10-4 <a class="header-anchor" href="#_10-4" aria-label="Permalink to &quot;10-4&quot;">&ZeroWidthSpace;</a></h2>
<h3 id="请描述-instanceof-关键字" tabindex="-1">请描述 instanceof 关键字 <a class="header-anchor" href="#请描述-instanceof-关键字" aria-label="Permalink to &quot;请描述 instanceof 关键字&quot;">&ZeroWidthSpace;</a></h3>
<p><code>instanceof</code> 是 JAVA  的一个二元操作符，类似于大于小于号，用于测试其左边的对象是否是它右边对象的实例，
返回 Boolean 类型。在下方的 <a href="#_10-3">10-3</a> 的示例中，String 类的 equals 方法中使用了 <code>instanceof</code> 关键字对比较的对象进行实例检查，并转换为 String 类型。</p>
<h2 id="_10-3" tabindex="-1">10-3 <a class="header-anchor" href="#_10-3" aria-label="Permalink to &quot;10-3&quot;">&ZeroWidthSpace;</a></h2>
<h3 id="与-equals-的区别" tabindex="-1"><code>==</code> 与 <code>equals</code> 的区别 <a class="header-anchor" href="#与-equals-的区别" aria-label="Permalink to &quot;`==` 与 `equals` 的区别&quot;">&ZeroWidthSpace;</a></h3>
<p>两者的作用都是判断是否相等。但是 <code>==</code> 是运算符，<code>equals</code> 是继承于 Object 类的一个方法。</p>
<p>对于 <code>==</code> 来讲，如果比较<strong>基本数据类型</strong>，则比较其存储的值。如果比较<strong>引用数据类型</strong>，则比较其对象的地址值是否相等。</p>
<p>对于 <code>equals</code> 方法来讲，其本身并不提供<strong>基本数据类型</strong>的比较，
但是可以使用 Objects 类提供的静态 equals 进行比较，如果是基本数据类型，其实现也是使用 <code>==</code>：</p>
<div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> boolean</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> equals</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(Object a, Object b) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">==</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> b) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">||</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">!=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> null</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> &#x26;&#x26;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> a.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">equals</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(b));</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span></code></pre>
</div><p>继承于 Object 类的 <code>equals</code> 方法也是使用 <code>==</code> 进行比较：</p>
<div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> boolean</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> equals</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(Object obj) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">this</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> ==</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> obj);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span></code></pre>
</div><p>所以要比较两个引用数据类型，必须重写其 equals 方法才能实现对于特定条件的比较，这里以常用的 String 类进行举例，其重写的 equals 方法如下：</p>
<div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> boolean</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> equals</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(Object anObject) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">    // 判断其地址值相同，直接返回 TRUE</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">this</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> ==</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> anObject) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">        return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">; </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    }</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">    // 类型检查，判断是否为 String 的实例，如果是，anObject 会被转化为 aString 表示的 String 类型</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (anObject </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">instanceof</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> String aString)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">        	// 是否压缩（紧凑表示方式），如果压缩则检查其编码是否相同</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">        	// 这里 aString 是规范的命名方式。。。</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">            &#x26;&#x26;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">COMPACT_STRINGS </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">||</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">.coder </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">==</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> aString.coder)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">        	// 遍历比较字符数组</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">            &#x26;&#x26;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> StringLatin1.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">equals</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(value, aString.value);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span></code></pre>
</div><h2 id="_10-2" tabindex="-1">10-2 <a class="header-anchor" href="#_10-2" aria-label="Permalink to &quot;10-2&quot;">&ZeroWidthSpace;</a></h2>
<h3 id="_3-0-1-0-3-将会返回什么-true-还是-false" tabindex="-1"><code>3 * 0.1 == 0.3</code> 将会返回什么? true 还是 false? <a class="header-anchor" href="#_3-0-1-0-3-将会返回什么-true-还是-false" aria-label="Permalink to &quot;`3 * 0.1 == 0.3` 将会返回什么? true 还是 false?&quot;">&ZeroWidthSpace;</a></h3>
<p><strong>答案：</strong><code>FALSE</code></p>
<p>这道题跟 <code>01+0.2 != 0.3</code> 是一样的，由于在计算机系统中使用二进制浮点数无法精确的表示诸如 <code>10/3</code> 等无限循环的十进制分数的值，
Java中的<code>double</code>和<code>float</code>类型使用IEEE 754标准来表示浮点数，这种表示方式会导致一些十进制分数无法精确地表示。
因此，当你尝试在Java中表示0.3时，可能会得到一个非常接近 0.3 的值，但不会是精确的 0.3。</p>
<p>要想精确的表示十进制小数，可以使用 <code>BigDecimal</code> 类进行精确的十进制数学运算，但是会更为复杂并造成额外的开销。</p>
<h2 id="_10-1" tabindex="-1">10-1 <a class="header-anchor" href="#_10-1" aria-label="Permalink to &quot;10-1&quot;">&ZeroWidthSpace;</a></h2>
<h3 id="请详述-jdk-jre-jvm-等的关系" tabindex="-1">请详述 <code>JDK</code> <code>JRE</code> <code>JVM</code> 等的关系 <a class="header-anchor" href="#请详述-jdk-jre-jvm-等的关系" aria-label="Permalink to &quot;请详述 `JDK` `JRE` `JVM` 等的关系&quot;">&ZeroWidthSpace;</a></h3>
<div class="tip custom-block"><p class="custom-block-title">声明</p>
<p>该内容由 <code>CHATGPT</code> 生成</p>
</div>
<ol>
<li>
<p><strong><code>JDK</code>（Java Development Kit）</strong>：</p>
<p><code>JDK</code> 是Java开发工具包，它是Java开发人员用来编写、编译、调试和运行Java程序的核心工具。</p>
</li>
<li>
<p>JDK包括了Java编译器（javac）、Java解释器（java）、Java文档生成器（javadoc）等工具，以及Java开发所需的库和资源文件。</p>
</li>
<li>
<p><strong><code>JRE</code>（Java Runtime Environment）</strong>：</p>
<p>JRE是Java运行时环境，是Java程序的运行环境，用于执行已经编译好的Java字节码。
<code>JRE</code>包括了Java虚拟机（<code>JVM</code>）、Java类库（Java API）和运行时所需的其他组件。JRE提供了在特定平台上运行Java程序所需的基本功能。</p>
</li>
<li>
<p><strong><code>JVM</code>（Java Virtual Machine）</strong>：</p>
<p><code>JVM</code> 是Java虚拟机，是Java程序的运行引擎，负责将Java字节码解释或编译成特定平台的本地机器代码，并执行程序。
<code>JVM</code> 是 <code>JRE</code> 的一部分，它是一个虚拟的计算机，可以在不同的硬件和操作系统上运行Java程序。</p>
</li>
</ol>
<p><strong>关系总结</strong>：</p>
<ul>
<li>JDK包括JRE，JRE包括JVM。</li>
<li>JDK提供了开发、编译、调试等工具，以及JRE所需的库和资源。</li>
<li>JRE提供了JVM和Java API，用于运行Java程序。</li>
<li>JVM是Java程序的运行引擎，它执行Java字节码并负责内存管理、垃圾回收等。</li>
<li>Java程序首先由JDK编译生成Java字节码，然后JRE中的JVM解释或编译Java字节码并执行。</li>
</ul>
]]></content:encoded>
        </item>
        <item>
            <link>https://www.imufeng.cn/interview/question-by-day/2023/11.html</link>
            <guid>https://www.imufeng.cn/interview/question-by-day/2023/11.html</guid>
            <pubDate>Mon, 25 Mar 2024 08:19:18 GMT</pubDate>
            <description><![CDATA[## 11-30 

### 依赖注入的方法有哪些？

1. 构造器注入
2. Setter 方法注入
3. 接口注入
4. 注解注入
5. 工厂方法注入

## 11-29

### BeanFactory 和 FactoryBean 的区别？

- **BeanFactory**：管理 Bean 的容器，Spring 中生成的 Bean 都是由这个接口的实现来管理的。
- **FactoryBean**：通常是用来创建比较复杂的 bean，一般的 bean 直接用 xml 配置即可，但如果一个 bean 的创建过程中涉及到很多其他的 bean 和复杂的逻辑，
直接用 xml 配置比较麻烦，这时可以考虑用 FactoryBean，可以隐藏实例化复杂 Bean 的细节。

## 11-28

### 描述 Bean 的生命周期。

> 以下内容使用 `Github Copilot` 生成。

1. 实例化 Bean：Spring 通过反射机制利用 `<bean>` 的 class 属性指定实现类实例化 Bean。
2. 设置对象属性：Spring 利用 `<bean>` 的 `<property>` 子元素设置 Bean 的属性。
3. 调用 Bean 的初始化方法：如果 `<bean>` 的 init-method 属性指定了初始化方法，则 Spring 通过反射机制调用初始化方法。
4. Bean 可以使用了：Bean 对象已经可以使用了，它是一个可用的 Bean 实例。
5. 当容器关闭时，调用 Bean 的销毁方法：如果 `<bean>` 的 destory-method 属性指定了销毁方法，则 Spring 会通过反射机制调用销毁方法。

## 11-27

### 什么是 BeanDefinition？

`BeanDefinition` 用于管理 Spring 应用的对象和对象之间的依赖关系，是对象依赖关系的数据抽象。

## 11-26

### 描述 Spring 的两种 IOC 容器。

Spring 有两种 IOC 容器：`BeanFactory` 和 `ApplicationContext`。

- `BeanFactory` ：延迟注入(使用到某个 bean 的时候才会注入)，相比于BeanFactory 来说会占用更少的内存，程序启动速度更快。
BeanFactory 提供了最基本的 ioc 容器的功能（最基本的依赖注入支持）。

- `ApplicationContext` ：容器启动的时候，一次性创建所有 bean。ApplicationContext 扩展了 BeanFactory ， 
除了有BeanFactory的功能还有额外更多功能，所以一般开发人员使用 ApplicationContext 会更多。

## 11-25

### 请描述 Spring AOP 的动态代理。

Spring AOP中的动态代理主要有两种方式：JDK动态代理和CGLIB动态代理。

#### JDK动态代理

如果目标类实现了接口，Spring AOP 会选择使用 JDK 动态代理目标类。代理类根据目标类实现的接口动态生成，不需要自己编写，
生成的动态代理类和目标类都实现相同的接口。JDK动态代理的核心是InvocationHandler接口和Proxy类。

> 缺点：目标类必须有实现的接口。如果某个类没有实现接口，那么这个类就不能用JDK动态代理。

#### CGLIB动态代理

如果目标类没有实现接口，那么Spring AOP会选择使用CGLIB来动态代理目标类。CGLIB（Code Generation Library）可以在运行时动态生成类的字节码，
动态创建目标类的子类对象，在子类对象中增强目标类。

CGLIB是通过继承的方式做的动态代理，因此如果某个类被标记为final，那么它是无法使用CGLIB做动态代理的。

> 优点：目标类不需要实现特定的接口，更加灵活。

## 11-24

### 描述AOP的两种实现方式。

AOP 有两种实现方式：**静态代理** 和 **动态代理**。

#### 静态代理

代理类在编译阶段生成，在编译阶段将通知织入Java字节码中，也称编译时增强。AspectJ使用的是静态代理。

> 缺点： 代理对象需要与目标对象实现一样的接口，并且实现接口的方法，会有冗余代码。同时，一旦接口增加方法，目标对象与代理对象都要维护。

#### 动态代理

代理类在程序运行时创建，AOP框架不会去修改字节码，而是在内存中临时生成一个代理对象，在运行期间对业务方法进行增强，不会生成新类。

1.2 动态代理

## 11-23

### CountDownLatch 和 CyclicBarrier 的区别。

- CountDownLatch 的计数器只能使用一次。而 CyclicBarrier 的计数器可以使用 `reset()` 方法重置。
- CyclicBarrier 能处理更为复杂的业务场景，比如计算发生错误，可以结束阻塞，重置计数器，重新执行程序
- CyclicBarrier 提供 `getNumberWaiting()` 方法，可以获得 CyclicBarrier 阻塞的线程数量，还提供 `isBroken()` 方法，可以判断阻塞的线程是否被中断，等等。
- CountDownLatch 会阻塞主线程，CyclicBarrier 不会阻塞主线程，只会阻塞子线程。

## 11-22

### 什么是 CyclicBarrier？

`CyclicBarrier` 是一个同步工具类，它允许一组线程互相等待，直到到达某个公共屏障点（common barrier point）。因为该 barrier 在释放等待线程后可以重用，

```java
import java.util.concurrent.CyclicBarrier;

class Scratch {
    public static void main(String[] args) {
        // CyclicBarrier 示例程序
        CyclicBarrier cyclicBarrier = new CyclicBarrier(2, () -> {
            System.out.println("所有线程执行完毕");
        });
        // 测试运行
        new Thread(() -> {
            try {
                System.out.println("线程1开始执行");
                Thread.sleep(1000);
                System.out.println("线程1执行完毕");
                cyclicBarrier.await();
            } catch (Exception e) {
                e.printStackTrace();
            }
        }).start();
        new Thread(() -> {
            try {
                System.out.println("线程2开始执行");
                Thread.sleep(2000);
                System.out.println("线程2执行完毕");
                cyclicBarrier.await();
            } catch (Exception e) {
                e.printStackTrace();
            }
        }).start();
        System.out.println("主线程执行完毕");
    }
}
```

## 11-21

### 什么是 CountdownLatch？

`CountDownLatch` 是一个同步工具类，用来协调多个线程之间的同步。这个工具通常用来控制线程等待，它可以让某一个线程等待直到倒计时结束，再开始执行。

```java
import java.util.concurrent.CyclicBarrier;

class Scratch {
    public static void main(String[] args) {
        // CountDownLatch 示例程序
        CyclicBarrier barrier = new CyclicBarrier(2, () -> {
            System.out.println("barrier end");
        });
        new Thread(() -> {
            try {
                System.out.println("thread 1");
                barrier.await();
                System.out.println("thread 1 end");
            } catch (Exception e) {
                e.printStackTrace();
            }
        }).start();
        new Thread(() -> {
            try {
                System.out.println("thread 2");
                barrier.await();
                System.out.println("thread 2 end");
            } catch (Exception e) {
                e.printStackTrace();
            }
        }).start();
    }
}
```

## 11-20

### 线程池都有哪些状态？

> 可以通过 `Thread.State` 枚举类来表示线程的状态。
这个枚举包括 NEW（新建）、RUNNABLE（可运行）、BLOCKED（被阻塞）、WAITING（等待）、TIMED_WAITING（定时等待）和 TERMINATED（终止）等状态。
通过 `Thread.getState()` 方法可以获取线程的状态。

1. **RUNNING**：接受新任务并且处理阻塞队列中的任务
2. **SHUTDOWN**：不接受新任务，但是处理阻塞队列中的任务
3. **STOP**：不接受新任务，不处理阻塞队列中的任务，并且中断正在处理的任务
4. **TIDYING**：所有任务都终止了，`workerCount` 为 0，线程池的状态在转换为 TIDYING 状态时会执行钩子函数 `terminated()`
5. **TERMINATED**：`terminated()` 执行完成

## 11-19

### notify() 和 notifyAll() 有什么区别？

`notify()` 方法会随机唤醒等待队列中的一个线程，而 `notifyAll()` 方法会唤醒等待队列中的所有线程。

## 11-18

### sleep() 和 wait() 有什么区别？

- `sleep()` 方法是 Thread 类的静态方法，调用该方法会让当前线程进入休眠状态，不会释放锁，休眠时间到了之后会自动恢复运行状态。
- `wait()` 方法是 Object 类的方法，调用该方法会让当前线程进入等待状态，会释放锁，直到其他线程调用 notify() 或 notifyAll() 方法之后才会重新进入运行状态。

## 11-17

### ThreadLocal 内存泄漏原因，如何避免？

如果在线程池中使用 ThreadLocal 会造成内存泄漏，因为当 ThreadLocal 对象使用完之后，应该要把设置的key，value 也就是 Entry 对象进行回收，
但线程池中的线程不会回收，而线程对象是通过强引用指向 ThreadLocalMap，
ThreadLocalMap 也是通过强引用指向 Entry 对象，线程不被回收，Entry 对象也就不会被回收，从而出现内存泄漏。

#### 解决方法：

- 在使用了 ThreadLocal 对象之后，手动调用 ThreadLocal 的 remove 方法，手动清除 Entry 对象。
- 将 ThreadLocal 变量定义成 private static，这样就一直存在ThreadLocal的强引用，也就能保证任何时候都能将通过 ThreadLocal 的弱引用访问到 Entry 的 value 值，进而清除掉。

## 11-16

### 线程之间如何进行通信？

- 通过共享内存或基于网络通信
- 如果是基于共享内存进行通信，则需要考虑并发问题，什么时候阻塞，什么时候唤醒
- 想 Java 中的 wait()、notify() 就是阻塞唤醒
- 通过网络就比较简单，通过网络连接将数据发送给对方，当然也要考虑到并发问题，处理方式就是加锁等方式。

## 11-15

### 什么是 ThreadLocal？

ThreadLocal 是 Java 中所提供的线程本地存储机制，可以利用该机制将数据缓存在某个线程内部，该线程可以在任意时刻、任意方法中获取缓存的数据。

ThreadLocal 底层是通过 TreadLocalMap 来实现的，每个 Thread 对象中都存在一个 ThreadLocalMap，Map 的 key 为 ThreadLocal 对象，Ma p的 value 为需要缓存的值 。

## 11-14

### synchronized 关键字的作用？

synchronized 关键字可以用于修饰一段代码或一个方法，用于实现现成的同步，表示该段代码不能被多个线程同时执行。

当一个线程进入被 synchronized 关键字修饰的代码块或方法时，其他试图访问的线程将被阻塞。

synchronized 关键字的作用体现在两个方面：

1. 确保方法或代码块的互斥访问。（加锁与解锁）
2. 确保内存可见性。（强制从缓存加载数据）

## 11-13

### 线程池有几种创建方式？

1. newCachedThreadPool 创建一个可缓存线程池
2. newFixedThreadPool 创建一个定长线程池，可控制线程最大并发数 
3. newScheduledThreadPool 创建一个定长线程池，支持定时及周期性任务执行。 
4. newSingleThreadExecutor 创建一个单线程化的线程池，它只会用唯一的工作线程来执行任务

## 11-12

### 线程的 run()和 start()有什么区别？

每个线程都是通过某个特定 Thread 对象所对应的方法 run()来完成其操作的，run()方法称为线程体。通过调用 Thread 类的 start()方法来启动一个线程。

start() 方法用于启动线程，run() 方法用于执行线程的运行时代码。run() 可以重复调用，而 start()只能调用一次。

start() 方法来启动一个线程，真正实现了多线程运行。调用start()方法无需等待run方法体代码执行完毕，可以直接继续执行其他的代码；
此时线程是处于就绪状态，并没有运行。 然后通过此Thread类调用方法run()来完成其运行状态， run()方法运行结束， 此线程终止。然后CPU再调度其它线程。

run()方法是在本线程里的，只是线程里的一个函数，而不是多线程的。 如果直接调用 run()，其实就相当于是调用了一个普通函数而已，直接待用run()方法必须等待run()方法执行完毕才能执行下面的代码，
所以执行路径还是只有一条，根本就没有线程的特征，所以在多线程执行时要使用 start()方法而不是 run()方法。


## 11-11

### 守护线程与用户线程有什么区别？

- 守护线程：运行在后台，为其他前台线程服务。一旦所有用户线程都结束运行，守护线程会随 JVM 一起结束工作。
- 用户线程：运行在前台，执行具体的任务，如程序的主线程、连接网络的子线程等都是用户线程。

## 11-10

### 主线程是不是守护线程？

主线程不是守护线程，它是一个用户线程，它的优先级是普通优先级，当所有的用户线程都结束了，主线程才会结束，如果主线程结束了，其他用户线程还在运行，那么程序也会继续运行。

## 11-9

### 什么是守护线程？

守护线程是一种特殊的线程，它的优先级很低，通常用来做后台作业，比如垃圾回收线程就是一个很称职的守护者，并且它**不能持有任何资源**，
因为它会在任何时候被停止，如果它持有资源，那么其他线程就无法访问这些资源了。

## 11-8

### 线程的状态有哪些？

1. 新建状态（New）：当线程对象对创建后，即进入了新建状态; 
2. 就绪状态（Runnable）：当调用线程对象的 `start()` 方法，线程即进入就绪状态。
3. 运行状态（Running）：当CPU开始调度处于就绪状态的线程时，此时线程才得以真正执行，即进入到运行状态。
4. 阻塞状态（Blocked）：处于运行状态中的线程由于某种原因，暂时放弃对 CPU 的使用权，停止执行，此时进入阻塞状态，直到其进入到就绪状态，才 有机会再次被 CPU 调用以进入到运行状态。
根据阻塞产生的原因不同，阻塞状态又可以分为三种： 
    - 等待阻塞：运行状态中的线程执行 `wait()` 方法，使本线程进入到等待阻塞状态； 
    - 同步阻塞 — 线程在获取 synchronized 同步锁失败（因为锁被其它线程所占用），它会进入同步阻塞状态； 
    - 其他阻塞 — 通过调用线程的 `sleep()` 或 `join()` 或发出了I/O请求时，线程会进入到阻塞状态。当 `sleep()` 状态超时. `join()` 等待线程终止或者超时. 或者 I/O 处理完毕时，线程重新转入就绪状态。 
5. 死亡状态（Dead）：线程执行完了或者因异常退出了 `run()` 方法，该线程结束生命周期。

## 11-7

### 创建线程有哪几种方式？

1. 继承 Thread 类，重写 run() 方法，调用 start() 方法启动线程。
2. 实现 Runnable 接口，重写 run() 方法，创建 Thread 对象，调用 start() 方法启动线程。
3. 实现 Callable 接口，重写 call() 方法，创建 FutureTask 对象，创建 Thread 对象，调用 start() 方法启动线程。
4. 使用线程池创建线程。

> 使用线程池的方式创建是最优解，因为线程池可以有效的控制线程的数量，避免因为创建线程过多导致的内存溢出，提高了系统资源的利用率，同时线程池提供了更多更强大的功能。

## 11-6

### 都有哪些原子类？请举例说明。

`java.util.concurrent `这个包里面提供了一组原子类。其基本的特性就是在多线程环境下，当有多个线程同时执行这些类的实例包含的方法时，具有排他性。

- 原子类：AtomicBoolean，AtomicInteger，AtomicLong，AtomicReference
- 原子数组：AtomicIntegerArray，AtomicLongArray，AtomicReferenceArray
- 原子属性更新器：AtomicLongFieldUpdater，AtomicIntegerFieldUpdater，AtomicReferenceFieldUpdater
- 解决ABA问题的原子类：AtomicMarkableReference（通过引入一个boolean来反映中间有没有变过），AtomicStampedReference（通过引入一个int来累加来反映中间有没有变过）


## 11-5

### 什么是原子操作?

原子操作（atomic operation）意为”不可被中断的一个或一系列操作” 。处理器使用基于对缓存加锁或总线加锁的方式来实现多处理器之间的原子操作。
在Java中可以通过锁和循环CAS的方式来实现原子操作。CAS操作——Compare & Set，或是 Compare & Swap，现在几乎所有的CPU指令都支持CAS的原子操作。

原子操作是指一个不受其他操作影响的操作任务单元。原子操作是在多线程环境下避免数据不一致必须的手段。
`int++` 并不是一个原子操作，所以当一个线程读取它的值并加1时，另外一个线程有可能会读到之前的值，这就会引发错误。

为了解决这个问题，必须保证增加操作是原子的，在JDK1.5之前我们可以使用同步技术来做到这一点。
到JDK1.5，java.util.concurrent.atomic包提供了int和long类型的原子包装类，它们可以自动的保证对于他们的操作是原子的并且不需要使用同步。

## 11-4

### execute 与 submit 的用法与区别。

execute 执行后**没有返回结果**，只有1种用法

| 方法                               | 描述                                          |
|]]></description>
            <content:encoded><![CDATA[<h2 id="_11-30" tabindex="-1">11-30 <a class="header-anchor" href="#_11-30" aria-label="Permalink to &quot;11-30&quot;">&ZeroWidthSpace;</a></h2>
<h3 id="依赖注入的方法有哪些" tabindex="-1">依赖注入的方法有哪些？ <a class="header-anchor" href="#依赖注入的方法有哪些" aria-label="Permalink to &quot;依赖注入的方法有哪些？&quot;">&ZeroWidthSpace;</a></h3>
<ol>
<li>构造器注入</li>
<li>Setter 方法注入</li>
<li>接口注入</li>
<li>注解注入</li>
<li>工厂方法注入</li>
</ol>
<h2 id="_11-29" tabindex="-1">11-29 <a class="header-anchor" href="#_11-29" aria-label="Permalink to &quot;11-29&quot;">&ZeroWidthSpace;</a></h2>
<h3 id="beanfactory-和-factorybean-的区别" tabindex="-1">BeanFactory 和 FactoryBean 的区别？ <a class="header-anchor" href="#beanfactory-和-factorybean-的区别" aria-label="Permalink to &quot;BeanFactory 和 FactoryBean 的区别？&quot;">&ZeroWidthSpace;</a></h3>
<ul>
<li><strong>BeanFactory</strong>：管理 Bean 的容器，Spring 中生成的 Bean 都是由这个接口的实现来管理的。</li>
<li><strong>FactoryBean</strong>：通常是用来创建比较复杂的 bean，一般的 bean 直接用 xml 配置即可，但如果一个 bean 的创建过程中涉及到很多其他的 bean 和复杂的逻辑，
直接用 xml 配置比较麻烦，这时可以考虑用 FactoryBean，可以隐藏实例化复杂 Bean 的细节。</li>
</ul>
<h2 id="_11-28" tabindex="-1">11-28 <a class="header-anchor" href="#_11-28" aria-label="Permalink to &quot;11-28&quot;">&ZeroWidthSpace;</a></h2>
<h3 id="描述-bean-的生命周期。" tabindex="-1">描述 Bean 的生命周期。 <a class="header-anchor" href="#描述-bean-的生命周期。" aria-label="Permalink to &quot;描述 Bean 的生命周期。&quot;">&ZeroWidthSpace;</a></h3>
<blockquote>
<p>以下内容使用 <code>Github Copilot</code> 生成。</p>
</blockquote>
<ol>
<li>实例化 Bean：Spring 通过反射机制利用 <code>&lt;bean&gt;</code> 的 class 属性指定实现类实例化 Bean。</li>
<li>设置对象属性：Spring 利用 <code>&lt;bean&gt;</code> 的 <code>&lt;property&gt;</code> 子元素设置 Bean 的属性。</li>
<li>调用 Bean 的初始化方法：如果 <code>&lt;bean&gt;</code> 的 init-method 属性指定了初始化方法，则 Spring 通过反射机制调用初始化方法。</li>
<li>Bean 可以使用了：Bean 对象已经可以使用了，它是一个可用的 Bean 实例。</li>
<li>当容器关闭时，调用 Bean 的销毁方法：如果 <code>&lt;bean&gt;</code> 的 destory-method 属性指定了销毁方法，则 Spring 会通过反射机制调用销毁方法。</li>
</ol>
<h2 id="_11-27" tabindex="-1">11-27 <a class="header-anchor" href="#_11-27" aria-label="Permalink to &quot;11-27&quot;">&ZeroWidthSpace;</a></h2>
<h3 id="什么是-beandefinition" tabindex="-1">什么是 BeanDefinition？ <a class="header-anchor" href="#什么是-beandefinition" aria-label="Permalink to &quot;什么是 BeanDefinition？&quot;">&ZeroWidthSpace;</a></h3>
<p><code>BeanDefinition</code> 用于管理 Spring 应用的对象和对象之间的依赖关系，是对象依赖关系的数据抽象。</p>
<h2 id="_11-26" tabindex="-1">11-26 <a class="header-anchor" href="#_11-26" aria-label="Permalink to &quot;11-26&quot;">&ZeroWidthSpace;</a></h2>
<h3 id="描述-spring-的两种-ioc-容器。" tabindex="-1">描述 Spring 的两种 IOC 容器。 <a class="header-anchor" href="#描述-spring-的两种-ioc-容器。" aria-label="Permalink to &quot;描述 Spring 的两种 IOC 容器。&quot;">&ZeroWidthSpace;</a></h3>
<p>Spring 有两种 IOC 容器：<code>BeanFactory</code> 和 <code>ApplicationContext</code>。</p>
<ul>
<li>
<p><code>BeanFactory</code> ：延迟注入(使用到某个 bean 的时候才会注入)，相比于BeanFactory 来说会占用更少的内存，程序启动速度更快。
BeanFactory 提供了最基本的 ioc 容器的功能（最基本的依赖注入支持）。</p>
</li>
<li>
<p><code>ApplicationContext</code> ：容器启动的时候，一次性创建所有 bean。ApplicationContext 扩展了 BeanFactory ，
除了有BeanFactory的功能还有额外更多功能，所以一般开发人员使用 ApplicationContext 会更多。</p>
</li>
</ul>
<h2 id="_11-25" tabindex="-1">11-25 <a class="header-anchor" href="#_11-25" aria-label="Permalink to &quot;11-25&quot;">&ZeroWidthSpace;</a></h2>
<h3 id="请描述-spring-aop-的动态代理。" tabindex="-1">请描述 Spring AOP 的动态代理。 <a class="header-anchor" href="#请描述-spring-aop-的动态代理。" aria-label="Permalink to &quot;请描述 Spring AOP 的动态代理。&quot;">&ZeroWidthSpace;</a></h3>
<p>Spring AOP中的动态代理主要有两种方式：JDK动态代理和CGLIB动态代理。</p>
<h4 id="jdk动态代理" tabindex="-1">JDK动态代理 <a class="header-anchor" href="#jdk动态代理" aria-label="Permalink to &quot;JDK动态代理&quot;">&ZeroWidthSpace;</a></h4>
<p>如果目标类实现了接口，Spring AOP 会选择使用 JDK 动态代理目标类。代理类根据目标类实现的接口动态生成，不需要自己编写，
生成的动态代理类和目标类都实现相同的接口。JDK动态代理的核心是InvocationHandler接口和Proxy类。</p>
<blockquote>
<p>缺点：目标类必须有实现的接口。如果某个类没有实现接口，那么这个类就不能用JDK动态代理。</p>
</blockquote>
<h4 id="cglib动态代理" tabindex="-1">CGLIB动态代理 <a class="header-anchor" href="#cglib动态代理" aria-label="Permalink to &quot;CGLIB动态代理&quot;">&ZeroWidthSpace;</a></h4>
<p>如果目标类没有实现接口，那么Spring AOP会选择使用CGLIB来动态代理目标类。CGLIB（Code Generation Library）可以在运行时动态生成类的字节码，
动态创建目标类的子类对象，在子类对象中增强目标类。</p>
<p>CGLIB是通过继承的方式做的动态代理，因此如果某个类被标记为final，那么它是无法使用CGLIB做动态代理的。</p>
<blockquote>
<p>优点：目标类不需要实现特定的接口，更加灵活。</p>
</blockquote>
<h2 id="_11-24" tabindex="-1">11-24 <a class="header-anchor" href="#_11-24" aria-label="Permalink to &quot;11-24&quot;">&ZeroWidthSpace;</a></h2>
<h3 id="描述aop的两种实现方式。" tabindex="-1">描述AOP的两种实现方式。 <a class="header-anchor" href="#描述aop的两种实现方式。" aria-label="Permalink to &quot;描述AOP的两种实现方式。&quot;">&ZeroWidthSpace;</a></h3>
<p>AOP 有两种实现方式：<strong>静态代理</strong> 和 <strong>动态代理</strong>。</p>
<h4 id="静态代理" tabindex="-1">静态代理 <a class="header-anchor" href="#静态代理" aria-label="Permalink to &quot;静态代理&quot;">&ZeroWidthSpace;</a></h4>
<p>代理类在编译阶段生成，在编译阶段将通知织入Java字节码中，也称编译时增强。AspectJ使用的是静态代理。</p>
<blockquote>
<p>缺点： 代理对象需要与目标对象实现一样的接口，并且实现接口的方法，会有冗余代码。同时，一旦接口增加方法，目标对象与代理对象都要维护。</p>
</blockquote>
<h4 id="动态代理" tabindex="-1">动态代理 <a class="header-anchor" href="#动态代理" aria-label="Permalink to &quot;动态代理&quot;">&ZeroWidthSpace;</a></h4>
<p>代理类在程序运行时创建，AOP框架不会去修改字节码，而是在内存中临时生成一个代理对象，在运行期间对业务方法进行增强，不会生成新类。</p>
<p>1.2 动态代理</p>
<h2 id="_11-23" tabindex="-1">11-23 <a class="header-anchor" href="#_11-23" aria-label="Permalink to &quot;11-23&quot;">&ZeroWidthSpace;</a></h2>
<h3 id="countdownlatch-和-cyclicbarrier-的区别。" tabindex="-1">CountDownLatch 和 CyclicBarrier 的区别。 <a class="header-anchor" href="#countdownlatch-和-cyclicbarrier-的区别。" aria-label="Permalink to &quot;CountDownLatch 和 CyclicBarrier 的区别。&quot;">&ZeroWidthSpace;</a></h3>
<ul>
<li>CountDownLatch 的计数器只能使用一次。而 CyclicBarrier 的计数器可以使用 <code>reset()</code> 方法重置。</li>
<li>CyclicBarrier 能处理更为复杂的业务场景，比如计算发生错误，可以结束阻塞，重置计数器，重新执行程序</li>
<li>CyclicBarrier 提供 <code>getNumberWaiting()</code> 方法，可以获得 CyclicBarrier 阻塞的线程数量，还提供 <code>isBroken()</code> 方法，可以判断阻塞的线程是否被中断，等等。</li>
<li>CountDownLatch 会阻塞主线程，CyclicBarrier 不会阻塞主线程，只会阻塞子线程。</li>
</ul>
<h2 id="_11-22" tabindex="-1">11-22 <a class="header-anchor" href="#_11-22" aria-label="Permalink to &quot;11-22&quot;">&ZeroWidthSpace;</a></h2>
<h3 id="什么是-cyclicbarrier" tabindex="-1">什么是 CyclicBarrier？ <a class="header-anchor" href="#什么是-cyclicbarrier" aria-label="Permalink to &quot;什么是 CyclicBarrier？&quot;">&ZeroWidthSpace;</a></h3>
<p><code>CyclicBarrier</code> 是一个同步工具类，它允许一组线程互相等待，直到到达某个公共屏障点（common barrier point）。因为该 barrier 在释放等待线程后可以重用，</p>
<div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> java.util.concurrent.CyclicBarrier;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> Scratch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">[] </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">args</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">        // CyclicBarrier 示例程序</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        CyclicBarrier cyclicBarrier </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> CyclicBarrier</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">-></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">            System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"所有线程执行完毕"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        });</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">        // 测试运行</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">        new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> Thread</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">-></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">            try</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">                System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"线程1开始执行"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">                Thread.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">sleep</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">1000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">                System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"线程1执行完毕"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">                cyclicBarrier.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">            } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">catch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (Exception </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">e</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">                e.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">printStackTrace</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        }).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">start</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">        new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> Thread</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">-></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">            try</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">                System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"线程2开始执行"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">                Thread.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">sleep</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">2000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">                System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"线程2执行完毕"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">                cyclicBarrier.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">            } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">catch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (Exception </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">e</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">                e.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">printStackTrace</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        }).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">start</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"主线程执行完毕"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span></code></pre>
</div><h2 id="_11-21" tabindex="-1">11-21 <a class="header-anchor" href="#_11-21" aria-label="Permalink to &quot;11-21&quot;">&ZeroWidthSpace;</a></h2>
<h3 id="什么是-countdownlatch" tabindex="-1">什么是 CountdownLatch？ <a class="header-anchor" href="#什么是-countdownlatch" aria-label="Permalink to &quot;什么是 CountdownLatch？&quot;">&ZeroWidthSpace;</a></h3>
<p><code>CountDownLatch</code> 是一个同步工具类，用来协调多个线程之间的同步。这个工具通常用来控制线程等待，它可以让某一个线程等待直到倒计时结束，再开始执行。</p>
<div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> java.util.concurrent.CyclicBarrier;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> Scratch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">[] </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">args</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">        // CountDownLatch 示例程序</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        CyclicBarrier barrier </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> CyclicBarrier</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">-></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">            System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"barrier end"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        });</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">        new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> Thread</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">-></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">            try</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">                System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"thread 1"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">                barrier.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">                System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"thread 1 end"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">            } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">catch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (Exception </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">e</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">                e.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">printStackTrace</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        }).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">start</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">        new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> Thread</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">-></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">            try</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">                System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"thread 2"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">                barrier.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">                System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"thread 2 end"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">            } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">catch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (Exception </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">e</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">                e.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">printStackTrace</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        }).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">start</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span></code></pre>
</div><h2 id="_11-20" tabindex="-1">11-20 <a class="header-anchor" href="#_11-20" aria-label="Permalink to &quot;11-20&quot;">&ZeroWidthSpace;</a></h2>
<h3 id="线程池都有哪些状态" tabindex="-1">线程池都有哪些状态？ <a class="header-anchor" href="#线程池都有哪些状态" aria-label="Permalink to &quot;线程池都有哪些状态？&quot;">&ZeroWidthSpace;</a></h3>
<blockquote>
<p>可以通过 <code>Thread.State</code> 枚举类来表示线程的状态。
这个枚举包括 NEW（新建）、RUNNABLE（可运行）、BLOCKED（被阻塞）、WAITING（等待）、TIMED_WAITING（定时等待）和 TERMINATED（终止）等状态。
通过 <code>Thread.getState()</code> 方法可以获取线程的状态。</p>
</blockquote>
<ol>
<li><strong>RUNNING</strong>：接受新任务并且处理阻塞队列中的任务</li>
<li><strong>SHUTDOWN</strong>：不接受新任务，但是处理阻塞队列中的任务</li>
<li><strong>STOP</strong>：不接受新任务，不处理阻塞队列中的任务，并且中断正在处理的任务</li>
<li><strong>TIDYING</strong>：所有任务都终止了，<code>workerCount</code> 为 0，线程池的状态在转换为 TIDYING 状态时会执行钩子函数 <code>terminated()</code></li>
<li><strong>TERMINATED</strong>：<code>terminated()</code> 执行完成</li>
</ol>
<h2 id="_11-19" tabindex="-1">11-19 <a class="header-anchor" href="#_11-19" aria-label="Permalink to &quot;11-19&quot;">&ZeroWidthSpace;</a></h2>
<h3 id="notify-和-notifyall-有什么区别" tabindex="-1">notify() 和 notifyAll() 有什么区别？ <a class="header-anchor" href="#notify-和-notifyall-有什么区别" aria-label="Permalink to &quot;notify() 和 notifyAll() 有什么区别？&quot;">&ZeroWidthSpace;</a></h3>
<p><code>notify()</code> 方法会随机唤醒等待队列中的一个线程，而 <code>notifyAll()</code> 方法会唤醒等待队列中的所有线程。</p>
<h2 id="_11-18" tabindex="-1">11-18 <a class="header-anchor" href="#_11-18" aria-label="Permalink to &quot;11-18&quot;">&ZeroWidthSpace;</a></h2>
<h3 id="sleep-和-wait-有什么区别" tabindex="-1">sleep() 和 wait() 有什么区别？ <a class="header-anchor" href="#sleep-和-wait-有什么区别" aria-label="Permalink to &quot;sleep() 和 wait() 有什么区别？&quot;">&ZeroWidthSpace;</a></h3>
<ul>
<li><code>sleep()</code> 方法是 Thread 类的静态方法，调用该方法会让当前线程进入休眠状态，不会释放锁，休眠时间到了之后会自动恢复运行状态。</li>
<li><code>wait()</code> 方法是 Object 类的方法，调用该方法会让当前线程进入等待状态，会释放锁，直到其他线程调用 notify() 或 notifyAll() 方法之后才会重新进入运行状态。</li>
</ul>
<h2 id="_11-17" tabindex="-1">11-17 <a class="header-anchor" href="#_11-17" aria-label="Permalink to &quot;11-17&quot;">&ZeroWidthSpace;</a></h2>
<h3 id="threadlocal-内存泄漏原因-如何避免" tabindex="-1">ThreadLocal 内存泄漏原因，如何避免？ <a class="header-anchor" href="#threadlocal-内存泄漏原因-如何避免" aria-label="Permalink to &quot;ThreadLocal 内存泄漏原因，如何避免？&quot;">&ZeroWidthSpace;</a></h3>
<p>如果在线程池中使用 ThreadLocal 会造成内存泄漏，因为当 ThreadLocal 对象使用完之后，应该要把设置的key，value 也就是 Entry 对象进行回收，
但线程池中的线程不会回收，而线程对象是通过强引用指向 ThreadLocalMap，
ThreadLocalMap 也是通过强引用指向 Entry 对象，线程不被回收，Entry 对象也就不会被回收，从而出现内存泄漏。</p>
<h4 id="解决方法" tabindex="-1">解决方法： <a class="header-anchor" href="#解决方法" aria-label="Permalink to &quot;解决方法：&quot;">&ZeroWidthSpace;</a></h4>
<ul>
<li>在使用了 ThreadLocal 对象之后，手动调用 ThreadLocal 的 remove 方法，手动清除 Entry 对象。</li>
<li>将 ThreadLocal 变量定义成 private static，这样就一直存在ThreadLocal的强引用，也就能保证任何时候都能将通过 ThreadLocal 的弱引用访问到 Entry 的 value 值，进而清除掉。</li>
</ul>
<h2 id="_11-16" tabindex="-1">11-16 <a class="header-anchor" href="#_11-16" aria-label="Permalink to &quot;11-16&quot;">&ZeroWidthSpace;</a></h2>
<h3 id="线程之间如何进行通信" tabindex="-1">线程之间如何进行通信？ <a class="header-anchor" href="#线程之间如何进行通信" aria-label="Permalink to &quot;线程之间如何进行通信？&quot;">&ZeroWidthSpace;</a></h3>
<ul>
<li>通过共享内存或基于网络通信</li>
<li>如果是基于共享内存进行通信，则需要考虑并发问题，什么时候阻塞，什么时候唤醒</li>
<li>想 Java 中的 wait()、notify() 就是阻塞唤醒</li>
<li>通过网络就比较简单，通过网络连接将数据发送给对方，当然也要考虑到并发问题，处理方式就是加锁等方式。</li>
</ul>
<h2 id="_11-15" tabindex="-1">11-15 <a class="header-anchor" href="#_11-15" aria-label="Permalink to &quot;11-15&quot;">&ZeroWidthSpace;</a></h2>
<h3 id="什么是-threadlocal" tabindex="-1">什么是 ThreadLocal？ <a class="header-anchor" href="#什么是-threadlocal" aria-label="Permalink to &quot;什么是 ThreadLocal？&quot;">&ZeroWidthSpace;</a></h3>
<p>ThreadLocal 是 Java 中所提供的线程本地存储机制，可以利用该机制将数据缓存在某个线程内部，该线程可以在任意时刻、任意方法中获取缓存的数据。</p>
<p>ThreadLocal 底层是通过 TreadLocalMap 来实现的，每个 Thread 对象中都存在一个 ThreadLocalMap，Map 的 key 为 ThreadLocal 对象，Ma p的 value 为需要缓存的值 。</p>
<h2 id="_11-14" tabindex="-1">11-14 <a class="header-anchor" href="#_11-14" aria-label="Permalink to &quot;11-14&quot;">&ZeroWidthSpace;</a></h2>
<h3 id="synchronized-关键字的作用" tabindex="-1">synchronized 关键字的作用？ <a class="header-anchor" href="#synchronized-关键字的作用" aria-label="Permalink to &quot;synchronized 关键字的作用？&quot;">&ZeroWidthSpace;</a></h3>
<p>synchronized 关键字可以用于修饰一段代码或一个方法，用于实现现成的同步，表示该段代码不能被多个线程同时执行。</p>
<p>当一个线程进入被 synchronized 关键字修饰的代码块或方法时，其他试图访问的线程将被阻塞。</p>
<p>synchronized 关键字的作用体现在两个方面：</p>
<ol>
<li>确保方法或代码块的互斥访问。（加锁与解锁）</li>
<li>确保内存可见性。（强制从缓存加载数据）</li>
</ol>
<h2 id="_11-13" tabindex="-1">11-13 <a class="header-anchor" href="#_11-13" aria-label="Permalink to &quot;11-13&quot;">&ZeroWidthSpace;</a></h2>
<h3 id="线程池有几种创建方式" tabindex="-1">线程池有几种创建方式？ <a class="header-anchor" href="#线程池有几种创建方式" aria-label="Permalink to &quot;线程池有几种创建方式？&quot;">&ZeroWidthSpace;</a></h3>
<ol>
<li>newCachedThreadPool 创建一个可缓存线程池</li>
<li>newFixedThreadPool 创建一个定长线程池，可控制线程最大并发数</li>
<li>newScheduledThreadPool 创建一个定长线程池，支持定时及周期性任务执行。</li>
<li>newSingleThreadExecutor 创建一个单线程化的线程池，它只会用唯一的工作线程来执行任务</li>
</ol>
<h2 id="_11-12" tabindex="-1">11-12 <a class="header-anchor" href="#_11-12" aria-label="Permalink to &quot;11-12&quot;">&ZeroWidthSpace;</a></h2>
<h3 id="线程的-run-和-start-有什么区别" tabindex="-1">线程的 run()和 start()有什么区别？ <a class="header-anchor" href="#线程的-run-和-start-有什么区别" aria-label="Permalink to &quot;线程的 run()和 start()有什么区别？&quot;">&ZeroWidthSpace;</a></h3>
<p>每个线程都是通过某个特定 Thread 对象所对应的方法 run()来完成其操作的，run()方法称为线程体。通过调用 Thread 类的 start()方法来启动一个线程。</p>
<p>start() 方法用于启动线程，run() 方法用于执行线程的运行时代码。run() 可以重复调用，而 start()只能调用一次。</p>
<p>start() 方法来启动一个线程，真正实现了多线程运行。调用start()方法无需等待run方法体代码执行完毕，可以直接继续执行其他的代码；
此时线程是处于就绪状态，并没有运行。 然后通过此Thread类调用方法run()来完成其运行状态， run()方法运行结束， 此线程终止。然后CPU再调度其它线程。</p>
<p>run()方法是在本线程里的，只是线程里的一个函数，而不是多线程的。 如果直接调用 run()，其实就相当于是调用了一个普通函数而已，直接待用run()方法必须等待run()方法执行完毕才能执行下面的代码，
所以执行路径还是只有一条，根本就没有线程的特征，所以在多线程执行时要使用 start()方法而不是 run()方法。</p>
<h2 id="_11-11" tabindex="-1">11-11 <a class="header-anchor" href="#_11-11" aria-label="Permalink to &quot;11-11&quot;">&ZeroWidthSpace;</a></h2>
<h3 id="守护线程与用户线程有什么区别" tabindex="-1">守护线程与用户线程有什么区别？ <a class="header-anchor" href="#守护线程与用户线程有什么区别" aria-label="Permalink to &quot;守护线程与用户线程有什么区别？&quot;">&ZeroWidthSpace;</a></h3>
<ul>
<li>守护线程：运行在后台，为其他前台线程服务。一旦所有用户线程都结束运行，守护线程会随 JVM 一起结束工作。</li>
<li>用户线程：运行在前台，执行具体的任务，如程序的主线程、连接网络的子线程等都是用户线程。</li>
</ul>
<h2 id="_11-10" tabindex="-1">11-10 <a class="header-anchor" href="#_11-10" aria-label="Permalink to &quot;11-10&quot;">&ZeroWidthSpace;</a></h2>
<h3 id="主线程是不是守护线程" tabindex="-1">主线程是不是守护线程？ <a class="header-anchor" href="#主线程是不是守护线程" aria-label="Permalink to &quot;主线程是不是守护线程？&quot;">&ZeroWidthSpace;</a></h3>
<p>主线程不是守护线程，它是一个用户线程，它的优先级是普通优先级，当所有的用户线程都结束了，主线程才会结束，如果主线程结束了，其他用户线程还在运行，那么程序也会继续运行。</p>
<h2 id="_11-9" tabindex="-1">11-9 <a class="header-anchor" href="#_11-9" aria-label="Permalink to &quot;11-9&quot;">&ZeroWidthSpace;</a></h2>
<h3 id="什么是守护线程" tabindex="-1">什么是守护线程？ <a class="header-anchor" href="#什么是守护线程" aria-label="Permalink to &quot;什么是守护线程？&quot;">&ZeroWidthSpace;</a></h3>
<p>守护线程是一种特殊的线程，它的优先级很低，通常用来做后台作业，比如垃圾回收线程就是一个很称职的守护者，并且它<strong>不能持有任何资源</strong>，
因为它会在任何时候被停止，如果它持有资源，那么其他线程就无法访问这些资源了。</p>
<h2 id="_11-8" tabindex="-1">11-8 <a class="header-anchor" href="#_11-8" aria-label="Permalink to &quot;11-8&quot;">&ZeroWidthSpace;</a></h2>
<h3 id="线程的状态有哪些" tabindex="-1">线程的状态有哪些？ <a class="header-anchor" href="#线程的状态有哪些" aria-label="Permalink to &quot;线程的状态有哪些？&quot;">&ZeroWidthSpace;</a></h3>
<ol>
<li>新建状态（New）：当线程对象对创建后，即进入了新建状态;</li>
<li>就绪状态（Runnable）：当调用线程对象的 <code>start()</code> 方法，线程即进入就绪状态。</li>
<li>运行状态（Running）：当CPU开始调度处于就绪状态的线程时，此时线程才得以真正执行，即进入到运行状态。</li>
<li>阻塞状态（Blocked）：处于运行状态中的线程由于某种原因，暂时放弃对 CPU 的使用权，停止执行，此时进入阻塞状态，直到其进入到就绪状态，才 有机会再次被 CPU 调用以进入到运行状态。
根据阻塞产生的原因不同，阻塞状态又可以分为三种：
<ul>
<li>等待阻塞：运行状态中的线程执行 <code>wait()</code> 方法，使本线程进入到等待阻塞状态；</li>
<li>同步阻塞 — 线程在获取 synchronized 同步锁失败（因为锁被其它线程所占用），它会进入同步阻塞状态；</li>
<li>其他阻塞 — 通过调用线程的 <code>sleep()</code> 或 <code>join()</code> 或发出了I/O请求时，线程会进入到阻塞状态。当 <code>sleep()</code> 状态超时. <code>join()</code> 等待线程终止或者超时. 或者 I/O 处理完毕时，线程重新转入就绪状态。</li>
</ul>
</li>
<li>死亡状态（Dead）：线程执行完了或者因异常退出了 <code>run()</code> 方法，该线程结束生命周期。</li>
</ol>
<h2 id="_11-7" tabindex="-1">11-7 <a class="header-anchor" href="#_11-7" aria-label="Permalink to &quot;11-7&quot;">&ZeroWidthSpace;</a></h2>
<h3 id="创建线程有哪几种方式" tabindex="-1">创建线程有哪几种方式？ <a class="header-anchor" href="#创建线程有哪几种方式" aria-label="Permalink to &quot;创建线程有哪几种方式？&quot;">&ZeroWidthSpace;</a></h3>
<ol>
<li>继承 Thread 类，重写 run() 方法，调用 start() 方法启动线程。</li>
<li>实现 Runnable 接口，重写 run() 方法，创建 Thread 对象，调用 start() 方法启动线程。</li>
<li>实现 Callable 接口，重写 call() 方法，创建 FutureTask 对象，创建 Thread 对象，调用 start() 方法启动线程。</li>
<li>使用线程池创建线程。</li>
</ol>
<blockquote>
<p>使用线程池的方式创建是最优解，因为线程池可以有效的控制线程的数量，避免因为创建线程过多导致的内存溢出，提高了系统资源的利用率，同时线程池提供了更多更强大的功能。</p>
</blockquote>
<h2 id="_11-6" tabindex="-1">11-6 <a class="header-anchor" href="#_11-6" aria-label="Permalink to &quot;11-6&quot;">&ZeroWidthSpace;</a></h2>
<h3 id="都有哪些原子类-请举例说明。" tabindex="-1">都有哪些原子类？请举例说明。 <a class="header-anchor" href="#都有哪些原子类-请举例说明。" aria-label="Permalink to &quot;都有哪些原子类？请举例说明。&quot;">&ZeroWidthSpace;</a></h3>
<p><code>java.util.concurrent </code>这个包里面提供了一组原子类。其基本的特性就是在多线程环境下，当有多个线程同时执行这些类的实例包含的方法时，具有排他性。</p>
<ul>
<li>原子类：AtomicBoolean，AtomicInteger，AtomicLong，AtomicReference</li>
<li>原子数组：AtomicIntegerArray，AtomicLongArray，AtomicReferenceArray</li>
<li>原子属性更新器：AtomicLongFieldUpdater，AtomicIntegerFieldUpdater，AtomicReferenceFieldUpdater</li>
<li>解决ABA问题的原子类：AtomicMarkableReference（通过引入一个boolean来反映中间有没有变过），AtomicStampedReference（通过引入一个int来累加来反映中间有没有变过）</li>
</ul>
<h2 id="_11-5" tabindex="-1">11-5 <a class="header-anchor" href="#_11-5" aria-label="Permalink to &quot;11-5&quot;">&ZeroWidthSpace;</a></h2>
<h3 id="什么是原子操作" tabindex="-1">什么是原子操作? <a class="header-anchor" href="#什么是原子操作" aria-label="Permalink to &quot;什么是原子操作?&quot;">&ZeroWidthSpace;</a></h3>
<p>原子操作（atomic operation）意为”不可被中断的一个或一系列操作” 。处理器使用基于对缓存加锁或总线加锁的方式来实现多处理器之间的原子操作。
在Java中可以通过锁和循环CAS的方式来实现原子操作。CAS操作——Compare &amp; Set，或是 Compare &amp; Swap，现在几乎所有的CPU指令都支持CAS的原子操作。</p>
<p>原子操作是指一个不受其他操作影响的操作任务单元。原子操作是在多线程环境下避免数据不一致必须的手段。
<code>int++</code> 并不是一个原子操作，所以当一个线程读取它的值并加1时，另外一个线程有可能会读到之前的值，这就会引发错误。</p>
<p>为了解决这个问题，必须保证增加操作是原子的，在JDK1.5之前我们可以使用同步技术来做到这一点。
到JDK1.5，java.util.concurrent.atomic包提供了int和long类型的原子包装类，它们可以自动的保证对于他们的操作是原子的并且不需要使用同步。</p>
<h2 id="_11-4" tabindex="-1">11-4 <a class="header-anchor" href="#_11-4" aria-label="Permalink to &quot;11-4&quot;">&ZeroWidthSpace;</a></h2>
<h3 id="execute-与-submit-的用法与区别。" tabindex="-1">execute 与 submit 的用法与区别。 <a class="header-anchor" href="#execute-与-submit-的用法与区别。" aria-label="Permalink to &quot;execute 与 submit 的用法与区别。&quot;">&ZeroWidthSpace;</a></h3>
<p>execute 执行后<strong>没有返回结果</strong>，只有1种用法</p>
<table>
<thead>
<tr>
<th>方法</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>void execute(Runnable command)</code></td>
<td>常规使用方法，用没有返回值的 execute 执行没有返回值的 Runnable 任务</td>
</tr>
</tbody>
</table>
<p>submit 执行后<strong>有返回结果</strong>，有3种用法</p>
<table>
<thead>
<tr>
<th>方法</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>Future submit(Callable task)</code></td>
<td>常规使用方法，传入有返回值的 callable 任务，最终返回 task 的返回值</td>
</tr>
<tr>
<td><code>Future submit(Runnable task, T result)</code></td>
<td>由于 Runnable 没有返回值，但是可以自定义一个返回值用于返回</td>
</tr>
<tr>
<td><code>Future submit(Runnable task)</code></td>
<td>强行使用 submit 执行 Runnable 方法，忽略返回值</td>
</tr>
</tbody>
</table>
<h2 id="_11-3" tabindex="-1">11-3 <a class="header-anchor" href="#_11-3" aria-label="Permalink to &quot;11-3&quot;">&ZeroWidthSpace;</a></h2>
<h3 id="runnable-与-callable-的区别。" tabindex="-1">Runnable 与 Callable 的区别。 <a class="header-anchor" href="#runnable-与-callable-的区别。" aria-label="Permalink to &quot;Runnable 与 Callable 的区别。&quot;">&ZeroWidthSpace;</a></h3>
<p>Runnable 没有返回结果，即没有 return 语句；Callable 有返回结果。</p>
<p>可以通过 Executors 工厂类将 Runnable 封装为一个 Callable 对象。</p>
<h2 id="_11-2" tabindex="-1">11-2 <a class="header-anchor" href="#_11-2" aria-label="Permalink to &quot;11-2&quot;">&ZeroWidthSpace;</a></h2>
<h3 id="请描述-executor-框架的执行过程。" tabindex="-1">请描述 Executor 框架的执行过程。 <a class="header-anchor" href="#请描述-executor-框架的执行过程。" aria-label="Permalink to &quot;请描述 Executor 框架的执行过程。&quot;">&ZeroWidthSpace;</a></h3>
<p>1、通过实现 Runnable 接口或 Callable 接口创建任务。</p>
<p>2、通过Executors的工厂方法创建线程池。</p>
<p>3、通过 <code>ExecutorService.submit()</code>
提交一个有返回结果的任务，返回类型为一个实现Future接口的对象；或通过ExecutorService.execute()方法执行一个没有返回结果的任务。</p>
<p>4、通过 <code>FutureTask.get()</code> 获取返回结果（如果有）。</p>
<h2 id="_11-1" tabindex="-1">11-1 <a class="header-anchor" href="#_11-1" aria-label="Permalink to &quot;11-1&quot;">&ZeroWidthSpace;</a></h2>
<h3 id="说一说你理解的-executor-框架。" tabindex="-1">说一说你理解的 Executor 框架。 <a class="header-anchor" href="#说一说你理解的-executor-框架。" aria-label="Permalink to &quot;说一说你理解的 Executor 框架。&quot;">&ZeroWidthSpace;</a></h3>
<p>Executor 是线程池的调度工具，线程池是 Executor 的一部分。</p>
<p>Executor 框架由三大部分组成</p>
<p>1、<strong>任务：</strong> 即被执行任务需要实现的接口：Runnable 接口或 Callable 接口。</p>
<p>2、<strong>线程池：</strong> 主要通过 ExecutorService 接口调用线程池，有2个关键实现类 ThreadPoolExecutor 和
ScheduledThreadPoolExecutor。</p>
<p>3、<strong>异步计算的结果：</strong> Future 接口及其实现类 FutureTask。</p>
]]></content:encoded>
        </item>
        <item>
            <link>https://www.imufeng.cn/interview/question-by-day/2023/12.html</link>
            <guid>https://www.imufeng.cn/interview/question-by-day/2023/12.html</guid>
            <pubDate>Mon, 25 Mar 2024 08:19:18 GMT</pubDate>
            <content:encoded><![CDATA[<h2 id="_12-31" tabindex="-1">12-31 <a class="header-anchor" href="#_12-31" aria-label="Permalink to &quot;12-31&quot;">&ZeroWidthSpace;</a></h2>
<h3 id="spring-boot-如何配置多个数据源" tabindex="-1">Spring Boot 如何配置多个数据源？ <a class="header-anchor" href="#spring-boot-如何配置多个数据源" aria-label="Permalink to &quot;Spring Boot 如何配置多个数据源？&quot;">&ZeroWidthSpace;</a></h3>
<p>SpringBoot 可以通过 <code>@ConfigurationProperties</code> 注解来配置多个数据源，该注解可以用在类上，也可以用在方法上。</p>
<div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">Configuration</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> DataSourceConfig</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">Bean</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">ConfigurationProperties</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">prefix</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> "spring.datasource.one"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    public</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> DataSource </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">dataSourceOne</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> DataSourceBuilder.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">create</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">build</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">Bean</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">ConfigurationProperties</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">prefix</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> "spring.datasource.two"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    public</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> DataSource </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">dataSourceTwo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> DataSourceBuilder.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">create</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">build</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span></code></pre>
</div><div class="language-properties vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">properties</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">spring.datasource.one.url</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=jdbc:mysql://localhost:3306/test1?</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">useUnicode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=true&#x26;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">characterEncoding</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=utf-8&#x26;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">useSSL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=false&#x26;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">serverTimezone</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=UTC</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">spring.datasource.one.username</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=root</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">spring.datasource.one.password</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=root</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">spring.datasource.one.driver-class-name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=com.mysql.cj.jdbc.Driver</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">spring.datasource.two.url</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=jdbc:mysql://localhost:3306/test2?</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">useUnicode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=true&#x26;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">characterEncoding</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=utf-8&#x26;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">useSSL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=false&#x26;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">serverTimezone</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=UTC</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">spring.datasource.two.username</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=root</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">spring.datasource.two.password</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=root</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">spring.datasource.two.driver-class-name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=com.mysql.cj.jdbc.Driver</span></span></code></pre>
</div><h2 id="_12-30" tabindex="-1">12-30 <a class="header-anchor" href="#_12-30" aria-label="Permalink to &quot;12-30&quot;">&ZeroWidthSpace;</a></h2>
<h3 id="spring-boot-如何定义不同环境配置" tabindex="-1">Spring Boot 如何定义不同环境配置？ <a class="header-anchor" href="#spring-boot-如何定义不同环境配置" aria-label="Permalink to &quot;Spring Boot 如何定义不同环境配置？&quot;">&ZeroWidthSpace;</a></h3>
<p>SpringBoot 可以通过 <code>application-{profile}.properties</code> 或者 <code>application-{profile}.yml</code> 文件来定义不同环境配置。</p>
<p>配置可以通过 <code>spring.profiles.active</code> 属性来指定，也可以通过 <code>SPRING_PROFILES_ACTIVE</code> 环境变量来指定。</p>
<p>也可以在 maven 的 <code>pom.xml</code> 文件中指定，如下：</p>
<div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">profiles</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    &#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">profile</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        &#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>dev&#x3C;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        &#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">properties</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">            &#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">activatedProperties</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>dev&#x3C;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">activatedProperties</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        &#x3C;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">properties</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    &#x3C;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">profile</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    &#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">profile</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        &#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>prod&#x3C;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        &#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">properties</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">            &#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">activatedProperties</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>prod&#x3C;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">activatedProperties</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        &#x3C;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">properties</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    &#x3C;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">profile</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">profiles</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span></code></pre>
</div><h2 id="_12-29" tabindex="-1">12-29 <a class="header-anchor" href="#_12-29" aria-label="Permalink to &quot;12-29&quot;">&ZeroWidthSpace;</a></h2>
<h3 id="spring-boot-配置加载顺序是怎样的" tabindex="-1">Spring Boot 配置加载顺序是怎样的？ <a class="header-anchor" href="#spring-boot-配置加载顺序是怎样的" aria-label="Permalink to &quot;Spring Boot 配置加载顺序是怎样的？&quot;">&ZeroWidthSpace;</a></h3>
<p>SpringBoot 配置加载顺序是从外向内，从内向外，优先级从高到低。</p>
<ul>
<li>从外向内：SpringBoot 会从 <code>application.properties</code> 或者 <code>application.yml</code> 文件中加载配置。</li>
<li>从内向外：SpringBoot 会从 <code>@PropertySource</code> 注解中加载配置。</li>
</ul>
<p>优先级：</p>
<ol>
<li>命令行参数。</li>
<li>系统环境变量。</li>
<li><code>@PropertySource</code> 注解中的配置。</li>
<li><code>application.properties</code> 或者 <code>application.yml</code> 文件中的配置。</li>
</ol>
<h2 id="_12-28" tabindex="-1">12-28 <a class="header-anchor" href="#_12-28" aria-label="Permalink to &quot;12-28&quot;">&ZeroWidthSpace;</a></h2>
<h3 id="spring-boot-有哪几种热部署方式" tabindex="-1">Spring Boot 有哪几种热部署方式？ <a class="header-anchor" href="#spring-boot-有哪几种热部署方式" aria-label="Permalink to &quot;Spring Boot 有哪几种热部署方式？&quot;">&ZeroWidthSpace;</a></h3>
<p>SpringBoot 有两种热部署方式，分别是 <code>devtools</code> 和 <code>springloaded</code>。</p>
<ul>
<li><code>devtools</code>：devtools 是 SpringBoot 提供的一种热部署方式，可以实现代码修改后自动重启应用程序。</li>
<li><code>springloaded</code>：springloaded 是 SpringBoot 提供的一种热部署方式，可以实现代码修改后自动重载应用程序。</li>
</ul>
<h2 id="_12-27" tabindex="-1">12-27 <a class="header-anchor" href="#_12-27" aria-label="Permalink to &quot;12-27&quot;">&ZeroWidthSpace;</a></h2>
<h3 id="spring-boot-怎么注册-servlet" tabindex="-1">Spring Boot 怎么注册 Servlet？ <a class="header-anchor" href="#spring-boot-怎么注册-servlet" aria-label="Permalink to &quot;Spring Boot 怎么注册 Servlet？&quot;">&ZeroWidthSpace;</a></h3>
<p>SpringBoot 可以通过 <code>@ServletComponentScan</code> 注解来注册 Servlet，该注解可以用在类上，也可以用在方法上。</p>
<h2 id="_12-26" tabindex="-1">12-26 <a class="header-anchor" href="#_12-26" aria-label="Permalink to &quot;12-26&quot;">&ZeroWidthSpace;</a></h2>
<h3 id="spring-boot-中的-starters-是什么" tabindex="-1">Spring Boot 中的 Starters 是什么？ <a class="header-anchor" href="#spring-boot-中的-starters-是什么" aria-label="Permalink to &quot;Spring Boot 中的 Starters 是什么？&quot;">&ZeroWidthSpace;</a></h3>
<p>SpringBoot 中的 Starters 是一组依赖项的集合，可以通过引入 Starters 来快速构建 Spring 应用程序。</p>
<h2 id="_12-25" tabindex="-1">12-25 <a class="header-anchor" href="#_12-25" aria-label="Permalink to &quot;12-25&quot;">&ZeroWidthSpace;</a></h2>
<h3 id="springboot-如何开启自动注解" tabindex="-1">SpringBoot 如何开启自动注解？ <a class="header-anchor" href="#springboot-如何开启自动注解" aria-label="Permalink to &quot;SpringBoot 如何开启自动注解？&quot;">&ZeroWidthSpace;</a></h3>
<p>SpringBoot 可以通过 <code>@EnableAutoConfiguration</code> 注解来开启自动注解，该注解可以用在类上，也可以用在方法上。</p>
<p>由于 <code>@SpringBootApplication</code> 注解包含了 <code>@EnableAutoConfiguration</code> 注解，所以一般情况下不需要再使用 <code>@EnableAutoConfiguration</code> 注解。</p>
<h2 id="_12-24" tabindex="-1">12-24 <a class="header-anchor" href="#_12-24" aria-label="Permalink to &quot;12-24&quot;">&ZeroWidthSpace;</a></h2>
<h3 id="spring-boot-自动配置原理是什么" tabindex="-1">Spring Boot 自动配置原理是什么？ <a class="header-anchor" href="#spring-boot-自动配置原理是什么" aria-label="Permalink to &quot;Spring Boot 自动配置原理是什么？&quot;">&ZeroWidthSpace;</a></h3>
<p>SpringBoot 自动配置原理是基于 Spring 的条件注解实现的，SpringBoot 会根据条件注解的条件判断是否需要自动配置。</p>
<p>如下：</p>
<div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 使用 ChatGPT 生成</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 这是一个Spring Boot自动配置类，用于配置数据源（DataSource）。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">Configuration</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 当类路径中存在DataSource类时，才会启用这个配置类。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">ConditionalOnClass</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">({DataSource.class})</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 启用对DataSourceProperties类的配置属性支持。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">EnableConfigurationProperties</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(DataSourceProperties.class)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> DataSourceAutoConfiguration</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">    // 定义一个名为dataSource的Bean。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">Bean</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">    // 当容器中不存在同名的Bean时才会创建。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">ConditionalOnMissingBean</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    public</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> DataSource </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">dataSource</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(DataSourceProperties </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">properties</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">        // 调用DataSourceProperties的initializeDataSourceBuilder方法创建并返回一个数据源。</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> properties.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">initializeDataSourceBuilder</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">build</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span></code></pre>
</div><h2 id="_12-23" tabindex="-1">12-23 <a class="header-anchor" href="#_12-23" aria-label="Permalink to &quot;12-23&quot;">&ZeroWidthSpace;</a></h2>
<h3 id="spring-boot-中的默认内嵌容器是" tabindex="-1">Spring Boot 中的默认内嵌容器是？ <a class="header-anchor" href="#spring-boot-中的默认内嵌容器是" aria-label="Permalink to &quot;Spring Boot 中的默认内嵌容器是？&quot;">&ZeroWidthSpace;</a></h3>
<p>SpringBoot 默认内嵌容器是 Tomcat，但是也支持其他内嵌容器，比如 Jetty、Undertow 等。</p>
<h2 id="_12-22" tabindex="-1">12-22 <a class="header-anchor" href="#_12-22" aria-label="Permalink to &quot;12-22&quot;">&ZeroWidthSpace;</a></h2>
<h3 id="什么是-restful" tabindex="-1">什么是 restful？ <a class="header-anchor" href="#什么是-restful" aria-label="Permalink to &quot;什么是 restful？&quot;">&ZeroWidthSpace;</a></h3>
<p>restful 是一种软件架构风格，它是一种设计风格而不是标准，它提供了一组设计原则和约束条件，主要用于客户端和服务器之间的通信。</p>
<h2 id="_12-21" tabindex="-1">12-21 <a class="header-anchor" href="#_12-21" aria-label="Permalink to &quot;12-21&quot;">&ZeroWidthSpace;</a></h2>
<h3 id="springboot-如何提供网络服务" tabindex="-1">SpringBoot 如何提供网络服务？ <a class="header-anchor" href="#springboot-如何提供网络服务" aria-label="Permalink to &quot;SpringBoot 如何提供网络服务？&quot;">&ZeroWidthSpace;</a></h3>
<p>SpringBoot 可以通过 <code>@RestController</code> 注解来提供网络服务，该注解可以用在类上，也可以用在方法上。</p>
<div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">RestController</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> MyController</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">GetMapping</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"/hello"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    public</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> String </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">hello</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">        return</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> "hello"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span></code></pre>
</div><h2 id="_12-20" tabindex="-1">12-20 <a class="header-anchor" href="#_12-20" aria-label="Permalink to &quot;12-20&quot;">&ZeroWidthSpace;</a></h2>
<h3 id="springboot-怎么解决跨域问题" tabindex="-1">SpringBoot 怎么解决跨域问题？ <a class="header-anchor" href="#springboot-怎么解决跨域问题" aria-label="Permalink to &quot;SpringBoot 怎么解决跨域问题？&quot;">&ZeroWidthSpace;</a></h3>
<p>可以通过<code>@CrossOrigin</code> 注解来解决跨域问题，该注解可以用在类上，也可以用在方法上。也可以通过 <code>WebMvcConfigurer</code> 接口来配置跨域。</p>
<div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">RestController</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">CrossOrigin</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> MyController</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">GetMapping</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"/hello"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    public</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> String </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">hello</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">        return</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> "hello"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span></code></pre>
</div><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">Configuration</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> MyConfig</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> implements</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> WebMvcConfigurer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">Override</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> addCorsMappings</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(CorsRegistry </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">registry</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        registry.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">addMapping</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"/**"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">                .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">allowedHeaders</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"*"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">                .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">allowedMethods</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"*"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">                .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">allowedOrigins</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"*"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span></code></pre>
</div><h2 id="_12-19" tabindex="-1">12-19 <a class="header-anchor" href="#_12-19" aria-label="Permalink to &quot;12-19&quot;">&ZeroWidthSpace;</a></h2>
<h3 id="springboot-怎么根据指定条件注册-bean" tabindex="-1">SpringBoot 怎么根据指定条件注册 bean？ <a class="header-anchor" href="#springboot-怎么根据指定条件注册-bean" aria-label="Permalink to &quot;SpringBoot 怎么根据指定条件注册 bean？&quot;">&ZeroWidthSpace;</a></h3>
<p>SpringBoot 可以通过 <code>@Conditional</code> 注解来根据指定条件注册 bean，该注解可以用在类上，也可以用在方法上。</p>
<div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">Configuration</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> MyConfig</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">Bean</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">Conditional</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(MyCondition.class)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    public</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> MyBean </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">myBean</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">        return</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> MyBean</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span></code></pre>
</div><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> MyCondition</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> implements</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> Condition</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">Override</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> boolean</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> matches</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(ConditionContext </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">context</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, AnnotatedTypeMetadata </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">metadata</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">        return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span></code></pre>
</div><h2 id="_12-18" tabindex="-1">12-18 <a class="header-anchor" href="#_12-18" aria-label="Permalink to &quot;12-18&quot;">&ZeroWidthSpace;</a></h2>
<h3 id="什么是模板引擎" tabindex="-1">什么是模板引擎？ <a class="header-anchor" href="#什么是模板引擎" aria-label="Permalink to &quot;什么是模板引擎？&quot;">&ZeroWidthSpace;</a></h3>
<p>模板引擎是一种将模板和数据结合起来生成 html 文档的工具，模板引擎可以将模板和数据结合起来生成 html 文档，然后将 html 文档返回给浏览器。</p>
<p>常见的模板引擎有：Freemarker、Thymeleaf、Velocity 等。</p>
<h2 id="_12-18-1" tabindex="-1">12-18 <a class="header-anchor" href="#_12-18-1" aria-label="Permalink to &quot;12-18&quot;">&ZeroWidthSpace;</a></h2>
<h3 id="spring-boot-如何配置随机端口" tabindex="-1">Spring Boot 如何配置随机端口？ <a class="header-anchor" href="#spring-boot-如何配置随机端口" aria-label="Permalink to &quot;Spring Boot 如何配置随机端口？&quot;">&ZeroWidthSpace;</a></h3>
<p>SpringBoot 可以通过 <code>server.port=0</code> 来配置随机端口，也可以通过 <code>server.port=${random.int(1024,65535)}</code> 来配置随机端口。</p>
<h2 id="_12-17" tabindex="-1">12-17 <a class="header-anchor" href="#_12-17" aria-label="Permalink to &quot;12-17&quot;">&ZeroWidthSpace;</a></h2>
<h3 id="spring-boot-有哪几种运行方式" tabindex="-1">Spring Boot 有哪几种运行方式？ <a class="header-anchor" href="#spring-boot-有哪几种运行方式" aria-label="Permalink to &quot;Spring Boot 有哪几种运行方式？&quot;">&ZeroWidthSpace;</a></h3>
<p>SpringBoot 有三种运行方式，分别是打包运行、命令行运行和 Maven 插件运行。</p>
<h2 id="_12-16" tabindex="-1">12-16 <a class="header-anchor" href="#_12-16" aria-label="Permalink to &quot;12-16&quot;">&ZeroWidthSpace;</a></h2>
<h3 id="为什么要用-springboot" tabindex="-1">为什么要用 SpringBoot？ <a class="header-anchor" href="#为什么要用-springboot" aria-label="Permalink to &quot;为什么要用 SpringBoot？&quot;">&ZeroWidthSpace;</a></h3>
<p>SpringBoot 可以快速构建 Spring 应用程序，快速整合其他框架。并实现了对 Spring 的自动配置，且内置 Tomcat 应用服务器，能够简化 Spring 应用程序的初始搭建和开发过程。</p>
<h2 id="_12-15" tabindex="-1">12-15 <a class="header-anchor" href="#_12-15" aria-label="Permalink to &quot;12-15&quot;">&ZeroWidthSpace;</a></h2>
<h3 id="spring-boot-支持哪些日志框架" tabindex="-1">Spring Boot 支持哪些日志框架？ <a class="header-anchor" href="#spring-boot-支持哪些日志框架" aria-label="Permalink to &quot;Spring Boot 支持哪些日志框架？&quot;">&ZeroWidthSpace;</a></h3>
<p>SpringBoot 默认日志框架为 Logback，但是也支持其他日志框架，比如 Log4j、Log4j2、JUL（java.util.logging）和 Logback。</p>
<h2 id="_12-14" tabindex="-1">12-14 <a class="header-anchor" href="#_12-14" aria-label="Permalink to &quot;12-14&quot;">&ZeroWidthSpace;</a></h2>
<h3 id="springbootapplication-由哪些注解组成" tabindex="-1">SpringBootApplication 由哪些注解组成？ <a class="header-anchor" href="#springbootapplication-由哪些注解组成" aria-label="Permalink to &quot;SpringBootApplication 由哪些注解组成？&quot;">&ZeroWidthSpace;</a></h3>
<p><code>@SpringBootApplication</code> 注解源码如下：</p>
<div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">Target</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(ElementType.TYPE)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">Retention</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(RetentionPolicy.RUNTIME)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">Documented</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">Inherited</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">SpringBootConfiguration</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">EnableAutoConfiguration</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">ComponentScan</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">excludeFilters</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> { @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">Filter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">type</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> FilterType.CUSTOM, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">classes</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> TypeExcludeFilter.class),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">		@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">Filter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">type</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> FilterType.CUSTOM, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">classes</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> AutoConfigurationExcludeFilter.class) })</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">public</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">interface</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> SpringBootApplication</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    ......</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span></code></pre>
</div><p>该注解由 <code>@SpringBootConfiguration</code>、<code>@EnableAutoConfiguration</code> 和 <code>@ComponentScan</code> 注解组成。</p>
<ul>
<li><code>@SpringBootConfiguration</code> 注解标识一个配置类，该注解继承自 <code>@Configuration</code> 注解，用于定义配置类。</li>
<li><code>@EnableAutoConfiguration</code> 注解用于启用 SpringBoot 的自动配置特性。</li>
<li><code>@ComponentScan</code> 注解用于启用组件扫描，该注解继承自 <code>@ComponentScans</code> 注解，用于定义多个 <code>@ComponentScan</code> 注解。</li>
</ul>
<h2 id="_12-13" tabindex="-1">12-13 <a class="header-anchor" href="#_12-13" aria-label="Permalink to &quot;12-13&quot;">&ZeroWidthSpace;</a></h2>
<h3 id="spring-boot-的核心注解是什么" tabindex="-1">Spring Boot 的核心注解是什么？ <a class="header-anchor" href="#spring-boot-的核心注解是什么" aria-label="Permalink to &quot;Spring Boot 的核心注解是什么？&quot;">&ZeroWidthSpace;</a></h3>
<p>SpringBoot 核心注解是 <code>@SpringBootApplication</code>，该注解标识一个配置类，并同步启用自动配置以及组件扫描。是 SpringBoot 自动配置特性的核心。</p>
<h2 id="_12-12" tabindex="-1">12-12 <a class="header-anchor" href="#_12-12" aria-label="Permalink to &quot;12-12&quot;">&ZeroWidthSpace;</a></h2>
<h3 id="spring-boot-是什么" tabindex="-1">Spring Boot 是什么？ <a class="header-anchor" href="#spring-boot-是什么" aria-label="Permalink to &quot;Spring Boot 是什么？&quot;">&ZeroWidthSpace;</a></h3>
<p>根据 Spring 官网简介，SpringBoot 提供了丰富的 Spring 模块化支持，可以基于 SpringBoot 开发单个微服务，SpringBoot 可以快速构建基于 Spring 的应用程序。</p>
<p>它实现了自动配置，可以基于约定俗成的配置快速构建独立的 Spring 应用程序，简化了 Spring 应用程序的初始搭建和开发过程。</p>
<h2 id="_12-11" tabindex="-1">12-11 <a class="header-anchor" href="#_12-11" aria-label="Permalink to &quot;12-11&quot;">&ZeroWidthSpace;</a></h2>
<h3 id="spring-mvc-框架有什么用" tabindex="-1">Spring MVC 框架有什么用？ <a class="header-anchor" href="#spring-mvc-框架有什么用" aria-label="Permalink to &quot;Spring MVC 框架有什么用？&quot;">&ZeroWidthSpace;</a></h3>
<p>SpringMVC 解决了 V-C 交互的问题，即 V(View:视图) 和 C(Controller:控制器) 之间的交互问题。</p>
<p>用户可以通过视图将请求数据提交给服务器端的控制器，而控制器可以接收到相关数据后进行处理，最终，给予客户端某个视图，使得客户端得到响应结果。</p>
<h2 id="_12-10" tabindex="-1">12-10 <a class="header-anchor" href="#_12-10" aria-label="Permalink to &quot;12-10&quot;">&ZeroWidthSpace;</a></h2>
<h3 id="spring-框架用到了哪些设计模式" tabindex="-1">Spring 框架用到了哪些设计模式？ <a class="header-anchor" href="#spring-框架用到了哪些设计模式" aria-label="Permalink to &quot;Spring 框架用到了哪些设计模式？&quot;">&ZeroWidthSpace;</a></h3>
<ol>
<li>工厂方法：Spring 使用工厂方法模式通过 <code>BeanFactory</code>、<code>ApplicationContext</code> 创建 bean 实例。</li>
<li>单例模式：Spring 中的 bean 默认都是单例的。</li>
<li>代理模式：Spring AOP 功能的实现就是基于动态代理。</li>
<li>模板方法：Spring 中很多类都使用了模板方法模式，比如 <code>JdbcTemplate</code>、<code>RestTemplate</code> 等。</li>
<li>观察者模式：Spring 事件驱动模型就是观察者模式的一种实现。</li>
<li>适配器模式：Spring MVC 中的 <code>HandlerAdapter</code> 就是适配器模式的一种应用。</li>
<li>装饰器模式：Spring 中的 <code>BeanWrapperImpl</code> 就是装饰器模式的一种应用。</li>
<li>策略模式：Spring 中的 <code>InstantiationStrategy</code> 就是策略模式的一种应用。</li>
</ol>
<h2 id="_12-09" tabindex="-1">12-09 <a class="header-anchor" href="#_12-09" aria-label="Permalink to &quot;12-09&quot;">&ZeroWidthSpace;</a></h2>
<h3 id="spring-支持哪些事务管理类型" tabindex="-1">Spring 支持哪些事务管理类型？ <a class="header-anchor" href="#spring-支持哪些事务管理类型" aria-label="Permalink to &quot;Spring 支持哪些事务管理类型？&quot;">&ZeroWidthSpace;</a></h3>
<p>Spring 支持编程式事务管理和声明式事务管理。</p>
<ul>
<li>编程式事务可以满足在代码中显示的调用开启事务、提交事务、回滚事务的相关方法。</li>
<li>声明式事务是建立在 AOP 的基础之上，本质是对方法进行拦截，在目标方法之前创建或加入一个事务，在之后根据执行情况提交或回滚事务。</li>
</ul>
<h2 id="_12-08" tabindex="-1">12-08 <a class="header-anchor" href="#_12-08" aria-label="Permalink to &quot;12-08&quot;">&ZeroWidthSpace;</a></h2>
<h3 id="为什么不推荐使用-autowired-注解注入-bean" tabindex="-1">为什么不推荐使用 <code>@Autowired</code> 注解注入 bean？ <a class="header-anchor" href="#为什么不推荐使用-autowired-注解注入-bean" aria-label="Permalink to &quot;为什么不推荐使用 `@Autowired` 注解注入 bean？&quot;">&ZeroWidthSpace;</a></h3>
<p><code>@Autowired</code> 注解是 Spring 提供的，如果使用了这个注解，那么就会和 Spring 框架产生了耦合，不利于代码的解耦。</p>
<h2 id="_12-07" tabindex="-1">12-07 <a class="header-anchor" href="#_12-07" aria-label="Permalink to &quot;12-07&quot;">&ZeroWidthSpace;</a></h2>
<h3 id="spring-自动装配有哪些方式" tabindex="-1">Spring 自动装配有哪些方式？ <a class="header-anchor" href="#spring-自动装配有哪些方式" aria-label="Permalink to &quot;Spring 自动装配有哪些方式？&quot;">&ZeroWidthSpace;</a></h3>
<p>Spring 自动装配有三种方式，分别是 <code>byName</code>、<code>byType</code> 和 <code>constructor</code>。</p>
<ul>
<li><code>byName</code>：根据 bean 的名称进行装配，如果 bean 的名称和属性名称一致，那么就会进行装配。</li>
<li><code>byType</code>：根据 bean 的类型进行装配，如果 bean 的类型和属性类型一致，那么就会进行装配。</li>
<li><code>constructor</code>：根据构造器进行装配，如果 bean 的构造器参数类型和属性类型一致，那么就会进行装配。</li>
</ul>
<h2 id="_12-6" tabindex="-1">12-6 <a class="header-anchor" href="#_12-6" aria-label="Permalink to &quot;12-6&quot;">&ZeroWidthSpace;</a></h2>
<h3 id="spring-装配是指什么" tabindex="-1">Spring 装配是指什么？ <a class="header-anchor" href="#spring-装配是指什么" aria-label="Permalink to &quot;Spring 装配是指什么？&quot;">&ZeroWidthSpace;</a></h3>
<p>Spring 装配是指创建应用对象之间协作关系的行为，Spring 通过依赖注入（DI）来进行装配。</p>
<h2 id="_12-5" tabindex="-1">12-5 <a class="header-anchor" href="#_12-5" aria-label="Permalink to &quot;12-5&quot;">&ZeroWidthSpace;</a></h2>
<h3 id="spring-怎么注入-java-集合类型" tabindex="-1">Spring 怎么注入 Java 集合类型？ <a class="header-anchor" href="#spring-怎么注入-java-集合类型" aria-label="Permalink to &quot;Spring 怎么注入 Java 集合类型？&quot;">&ZeroWidthSpace;</a></h3>
<p>Spring 可以通过 <code>util</code> 命名空间注入集合类型，比如 <code>List</code>、<code>Set</code>、<code>Map</code> 等。</p>
<div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">util:list</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"list"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    &#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>1&#x3C;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    &#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>2&#x3C;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    &#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>3&#x3C;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">util:list</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span></code></pre>
</div><h2 id="_12-4" tabindex="-1">12-4 <a class="header-anchor" href="#_12-4" aria-label="Permalink to &quot;12-4&quot;">&ZeroWidthSpace;</a></h2>
<h3 id="spring-required-注解有什么用" tabindex="-1">Spring @Required 注解有什么用？ <a class="header-anchor" href="#spring-required-注解有什么用" aria-label="Permalink to &quot;Spring @Required 注解有什么用？&quot;">&ZeroWidthSpace;</a></h3>
<p><code>@Required</code> 注解可以用在字段、方法和构造器上，用来检查 bean 的必需属性是否已经被设置。</p>
<p>如果设置了 required 属性为 true，那么当检查到 bean 的属性没有被设置时，会抛出 <code>BeanInitializationException</code> 异常。</p>
<h2 id="_12-3" tabindex="-1">12-3 <a class="header-anchor" href="#_12-3" aria-label="Permalink to &quot;12-3&quot;">&ZeroWidthSpace;</a></h2>
<h3 id="spring-autowired-注解有什么用" tabindex="-1">Spring @Autowired 注解有什么用？ <a class="header-anchor" href="#spring-autowired-注解有什么用" aria-label="Permalink to &quot;Spring @Autowired 注解有什么用？&quot;">&ZeroWidthSpace;</a></h3>
<p><code>@Autowired</code> 注解可以用在字段、构造器、方法和参数上，让 Spring 完成 bean 的自动装配工作。</p>
<p>默认按照类匹配的方式进行装配，如果匹配到多个 bean，那么会按照字段名或者参数名进行匹配。
使用 <code>@Qualifier</code> 注解可以指定 bean 的名称，从而避免歧义。</p>
<h2 id="_12-2" tabindex="-1">12-2 <a class="header-anchor" href="#_12-2" aria-label="Permalink to &quot;12-2&quot;">&ZeroWidthSpace;</a></h2>
<h3 id="spring-bean-为什么默认为单例" tabindex="-1">Spring bean 为什么默认为单例？ <a class="header-anchor" href="#spring-bean-为什么默认为单例" aria-label="Permalink to &quot;Spring bean 为什么默认为单例？&quot;">&ZeroWidthSpace;</a></h3>
<p>Spring bean 默认为单例，这是因为 Spring 容器中的 bean 默认都是单例的，这样做的好处是减少了创建 bean 的开销，节省了内存资源。</p>
<p>但是单例的 bean 也有一些缺点，比如线程安全问题，如果一个单例的 bean 中有一个成员变量，如果这个成员变量是可变的，那么就会出现线程安全问题。</p>
<h2 id="_12-1" tabindex="-1">12-1 <a class="header-anchor" href="#_12-1" aria-label="Permalink to &quot;12-1&quot;">&ZeroWidthSpace;</a></h2>
<h3 id="请描述-bean-的作用域。" tabindex="-1">请描述 bean 的作用域。 <a class="header-anchor" href="#请描述-bean-的作用域。" aria-label="Permalink to &quot;请描述 bean 的作用域。&quot;">&ZeroWidthSpace;</a></h3>
<p>Spring 创建的 Bean 默认是单利的，每一个实例只会被创建一次，通过 <code>getBean()</code> 方法获取的是同一个实例。可以直接通过 scope 来制定一个 Bean 的作用域。</p>
<div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">&#x3C;!-- 作用域：prototype --></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">bean</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"accountDao"</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> scope</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"prototype"</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">     class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"com.zejian.spring.springIoc.dao.impl.AccountDaoImpl"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">/></span></span></code></pre>
</div>]]></content:encoded>
        </item>
        <item>
            <link>https://www.imufeng.cn/interview/question-by-day/2023/9.html</link>
            <guid>https://www.imufeng.cn/interview/question-by-day/2023/9.html</guid>
            <pubDate>Mon, 25 Mar 2024 08:19:18 GMT</pubDate>
            <content:encoded><![CDATA[<h2 id="_9-30" tabindex="-1">9-30 <a class="header-anchor" href="#_9-30" aria-label="Permalink to &quot;9-30&quot;">&ZeroWidthSpace;</a></h2>
<h3 id="java中的重载和重写有什么区别" tabindex="-1">Java中的重载和重写有什么区别？ <a class="header-anchor" href="#java中的重载和重写有什么区别" aria-label="Permalink to &quot;Java中的重载和重写有什么区别？&quot;">&ZeroWidthSpace;</a></h3>
<ul>
<li>重载（Overloading）：在同一个类中，方法名相同但参数列表不同，可以有不同的返回类型。编译器根据方法参数的类型、个数、顺序来选择调用相应的方法。</li>
<li>重写（Overriding）：在子类中重新实现父类的方法，方法名、参数列表和返回类型必须相同。重写用于改变父类方法的实现，以适应子类的特定需求。</li>
</ul>
<h2 id="_9-29" tabindex="-1">9-29 <a class="header-anchor" href="#_9-29" aria-label="Permalink to &quot;9-29&quot;">&ZeroWidthSpace;</a></h2>
<h3 id="java中的四种访问修饰符是什么" tabindex="-1">Java中的四种访问修饰符是什么？ <a class="header-anchor" href="#java中的四种访问修饰符是什么" aria-label="Permalink to &quot;Java中的四种访问修饰符是什么？&quot;">&ZeroWidthSpace;</a></h3>
<ul>
<li><code>public</code>：对所有类可见。</li>
<li><code>private</code>：仅对类本身可见。</li>
<li><code>protected</code>：对同一包内的类和所有子类可见。</li>
<li><code>default</code>（不使用修饰符）：对同一包内的类可见。</li>
</ul>
<h2 id="_9-28" tabindex="-1">9-28 <a class="header-anchor" href="#_9-28" aria-label="Permalink to &quot;9-28&quot;">&ZeroWidthSpace;</a></h2>
<h3 id="请用-java-写一个冒泡排序" tabindex="-1">请用 JAVA 写一个冒泡排序？ <a class="header-anchor" href="#请用-java-写一个冒泡排序" aria-label="Permalink to &quot;请用 JAVA 写一个冒泡排序？&quot;">&ZeroWidthSpace;</a></h3>
<p>冒泡排序原理是逐一比较相邻元素，通过交换位置逐步将较大的数移动到末尾。</p>
<div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> BubbleSort</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">    /**</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">     * 对整数数组进行冒泡排序，将数组按升序排列</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">     * </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">     * </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">@param</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70"> array</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D"> 待排序的整数数组</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">     */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> bubbleSort</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">[] </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">array</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">        int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> n </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> array.length;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">        // 外层循环控制每轮比较的次数</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">        for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">; i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> n </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">; i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">            // 内层循环比较相邻元素，将较大的元素移到后面</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">            for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> j </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">; j </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">&#x3C;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> n </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">; j</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">                // 如果前一个元素大于后一个元素，则交换它们的位置</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">                if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (array[j] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> array[j </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">]) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">                    int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> temp </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> array[j];</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">                    array[j] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> array[j </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">];</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">                    array[j </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> temp;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">                }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">[] </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">args</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">        int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">[] nums </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">64</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">34</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">25</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">12</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">22</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">11</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">90</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">};</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"原始数组:"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">        for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> num </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> nums) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">            System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(num </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">+</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> " "</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">        bubbleSort</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(nums);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">排序后的数组:"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">        for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> num </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> nums) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">            System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(num </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">+</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> " "</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span></code></pre>
</div><h2 id="_9-27" tabindex="-1">9-27 <a class="header-anchor" href="#_9-27" aria-label="Permalink to &quot;9-27&quot;">&ZeroWidthSpace;</a></h2>
<h3 id="什么是前后端分离" tabindex="-1">什么是前后端分离？ <a class="header-anchor" href="#什么是前后端分离" aria-label="Permalink to &quot;什么是前后端分离？&quot;">&ZeroWidthSpace;</a></h3>
<blockquote>
<p>前后端分离技术目前已经成为互联网项目研发的基础，JAVA 中一般使用 <code>Nginx</code> + <code>Tomcat</code> 的架构实现。将数据处理与页面展示有效的进行解耦。为多客户端、大型分布式架构、微服务架构等都打下了坚实的基础。</p>
</blockquote>
<p>这里以 <code>VUE</code> + <code>SpringBoot</code> 的系统举例，通常来讲，前端部署在 <code>Nginx</code>、<code>Apache</code> 等 Web 服务器，后端通常部署在 <code>Tomcat</code> 等应用服务器，使用 <code>JSON</code> 交互数据。后端根据 <code>Rustful Api</code>  规范开发数据接口，并通过 <code>Token</code>、<code>Session</code> 等安全机制进行认证，使用 <code>Mybatis</code> 等持久层框架与数据库进行通信。这些接口必须通过接口的相关规定进行调用。前端使用 <code>Ajax</code> 技术通过 <code>HTTP</code> 等协议实现对后端接口的调用，在后端主导的项目开发中，后端可以通过 <code>SpringDoc</code> 等方式提供接口文档，说明接口调用规范，供前端开发人员阅读。</p>
<p><strong>优点：</strong></p>
<p>前后端分离架构的主要优点是实现了数据与页面显示的解耦，开发人员能够专注于自己的方向，提升系统的开发效率、代码的可重用性及用户的体验感，并且由于后端所在的应用服务器一般都部署在内网，通过 web 服务器反向代理实现，能够增强后端数据的安全性。同时，能够同时利用 Web 服务器速度更快的优点以及应用服务器的动态资源处理，更便于开发及部署。</p>
<p><strong>缺点：</strong></p>
<ul>
<li>系统开发对于人员数量及团队的配合度要求变大。</li>
<li>由于系统调整需要同时对前后端都进行调整，这将增大系统迭代的周期。</li>
<li>前端开发通常都要基于后端接口，这增大了对前端开发的技术水平要求及上手难度。</li>
<li>前端开发需要编写更多的代码来处理数据交互和逻辑，这增加了前端开发的工作量。</li>
<li>前后端分离由于浏览器的同源策略限制，会导致前后端之间的访问出现跨域问题。</li>
</ul>
]]></content:encoded>
        </item>
        <item>
            <link>https://www.imufeng.cn/interview/question-by-day/2024/1.html</link>
            <guid>https://www.imufeng.cn/interview/question-by-day/2024/1.html</guid>
            <pubDate>Mon, 25 Mar 2024 08:19:18 GMT</pubDate>
            <content:encoded><![CDATA[<h2 id="_1-31" tabindex="-1">1-31 <a class="header-anchor" href="#_1-31" aria-label="Permalink to &quot;1-31&quot;">&ZeroWidthSpace;</a></h2>
<h3 id="什么是同步" tabindex="-1">什么是同步？ <a class="header-anchor" href="#什么是同步" aria-label="Permalink to &quot;什么是同步？&quot;">&ZeroWidthSpace;</a></h3>
<p>同步 IO 和 非同步 IO 是操作系统级别的，主要描述操作系统在收到程序请求 IO 操作后，
如果 IO 资源没有准备好，该如何响应程序的问题。前者不响应，直到 IO 资源准备好，后者返回标记，
当 IO 资源准备好之后，再通过事件机制返回给程序。</p>
<h2 id="_1-30" tabindex="-1">1-30 <a class="header-anchor" href="#_1-30" aria-label="Permalink to &quot;1-30&quot;">&ZeroWidthSpace;</a></h2>
<h3 id="什么是阻塞" tabindex="-1">什么是阻塞？ <a class="header-anchor" href="#什么是阻塞" aria-label="Permalink to &quot;什么是阻塞？&quot;">&ZeroWidthSpace;</a></h3>
<p>阻塞 IO 和 非阻塞 IO 是程序级别的，主要描述程序请求操作系统 IO 操作后，
如果 IO 资源没有准备好，那么程序该如何处理的问题，前者等待，后者继续执行（一直轮询）。</p>
<h2 id="_1-29" tabindex="-1">1-29 <a class="header-anchor" href="#_1-29" aria-label="Permalink to &quot;1-29&quot;">&ZeroWidthSpace;</a></h2>
<h3 id="如何理解-io-流" tabindex="-1">如何理解 IO 流？ <a class="header-anchor" href="#如何理解-io-流" aria-label="Permalink to &quot;如何理解 IO 流？&quot;">&ZeroWidthSpace;</a></h3>
<p>从数据传输方式来讲，IO 流分为字节流和字符流，字节流处理二进制文件，字符流读取单个字符，用于处理文本文件。</p>
<p>从数据流向来讲，IO 流分为输入流和输出流，输入流用于读取数据，输出流用于写入数据。</p>
<p>从数据操作类型来讲，IO 流分为文件流、管道流、缓冲流、数据流、对象流、序列化流、打印流、转换流等。</p>
<h2 id="_1-28" tabindex="-1">1-28 <a class="header-anchor" href="#_1-28" aria-label="Permalink to &quot;1-28&quot;">&ZeroWidthSpace;</a></h2>
<h3 id="描述异常的底层" tabindex="-1">描述异常的底层？ <a class="header-anchor" href="#描述异常的底层" aria-label="Permalink to &quot;描述异常的底层？&quot;">&ZeroWidthSpace;</a></h3>
<p>JAVA 代码编译之后，会生成一个异常表（Exception Table），如下：</p>
<div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> simpleTryCatch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">   try</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">       testNPE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">   } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">catch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (Exception </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">e</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">       e.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">printStackTrace</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">   }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span></code></pre>
</div><p>该段代码编译后生成的字节码如下：</p>
<div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span>//javap -c Main</span></span>
<span class="line"><span> public static void simpleTryCatch();</span></span>
<span class="line"><span>    Code:</span></span>
<span class="line"><span>       0: invokestatic  #3                  // Method testNPE:()V</span></span>
<span class="line"><span>       3: goto          11</span></span>
<span class="line"><span>       6: astore_0</span></span>
<span class="line"><span>       7: aload_0</span></span>
<span class="line"><span>       8: invokevirtual #5                  // Method java/lang/Exception.printStackTrace:()V</span></span>
<span class="line"><span>      11: return</span></span>
<span class="line"><span>    Exception table:</span></span>
<span class="line"><span>       from    to  target type</span></span>
<span class="line"><span>           0     3     6   Class java/lang/Exception</span></span></code></pre>
</div><p>异常表包含了可能发生异常的起始点、结束点、异常处理代码的起始点、异常类型等信息。当发生异常时，JVM 会根据异常表中的信息来决定如何处理异常。</p>
<h2 id="_1-27" tabindex="-1">1-27 <a class="header-anchor" href="#_1-27" aria-label="Permalink to &quot;1-27&quot;">&ZeroWidthSpace;</a></h2>
<h3 id="java-7-的-try-with-resource" tabindex="-1">Java 7 的 try-with-resource? <a class="header-anchor" href="#java-7-的-try-with-resource" aria-label="Permalink to &quot;Java 7 的 try-with-resource?&quot;">&ZeroWidthSpace;</a></h3>
<p>Java 7 引入了 try-with-resource 语句，该语句可以自动关闭实现了 AutoCloseable 接口的资源。
大部分的 JAVA 标准资源都继承了该接口。当在 try 代码块执行后货异常处理后，会自动调用资源的 close() 方法。</p>
<div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> TryWithResourceTest</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">Test</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> test</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">throws</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> IOException {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">        try</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (FileInputStream fis </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> FileInputStream</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"test.txt"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">)) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">            int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> data </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> fis.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">read</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">            while</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (data </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">!=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> -</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">                System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">((</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">char</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) data);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">                data </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> fis.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">read</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span></code></pre>
</div><h2 id="_1-26" tabindex="-1">1-26 <a class="header-anchor" href="#_1-26" aria-label="Permalink to &quot;1-26&quot;">&ZeroWidthSpace;</a></h2>
<h3 id="java-throw-和-throws-的区别" tabindex="-1">JAVA throw 和 throws 的区别？ <a class="header-anchor" href="#java-throw-和-throws-的区别" aria-label="Permalink to &quot;JAVA throw 和 throws 的区别？&quot;">&ZeroWidthSpace;</a></h3>
<ul>
<li>throw 用在方法体内，用来抛出一个异常对象，将这个异常对象传递到调用者处，并终止当前方法的执行。</li>
<li>throws 用在方法声明后面，跟的是异常类名，可以跟多个异常类名，用逗号隔开，表示当前方法不处理异常，而是提醒该方法的调用者来处理异常（将异常抛给调用者），
如果调用者也不处理异常，那么继续往上抛，最终抛给 JVM 处理，JVM 会终止程序的运行。</li>
</ul>
<h2 id="_1-25" tabindex="-1">1-25 <a class="header-anchor" href="#_1-25" aria-label="Permalink to &quot;1-25&quot;">&ZeroWidthSpace;</a></h2>
<h3 id="getname、getcanonicalname-与-getsimplename-的区别" tabindex="-1">getName、getCanonicalName 与 getSimpleName 的区别? <a class="header-anchor" href="#getname、getcanonicalname-与-getsimplename-的区别" aria-label="Permalink to &quot;getName、getCanonicalName 与 getSimpleName 的区别?&quot;">&ZeroWidthSpace;</a></h3>
<ul>
<li>getName()：获取全限定类名，包含包名。</li>
<li>getCanonicalName()：获取全限定类名，不包含包名。</li>
<li>getSimpleName()：获取类名，不包含包名。</li>
</ul>
<h2 id="_1-24" tabindex="-1">1-24 <a class="header-anchor" href="#_1-24" aria-label="Permalink to &quot;1-24&quot;">&ZeroWidthSpace;</a></h2>
<h3 id="什么是反射" tabindex="-1">什么是反射？ <a class="header-anchor" href="#什么是反射" aria-label="Permalink to &quot;什么是反射？&quot;">&ZeroWidthSpace;</a></h3>
<p>反射是指程序可以访问、检测和修改它本身状态或行为的一种能力。
Java 反射机制是在运行状态中，对于任意一个类，都能够知道这个类的所有属性和方法；
对于任意一个对象，都能够调用它的任意一个方法和属性。</p>
<p>如下：</p>
<div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">Test</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> classTest</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">() throws Exception {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">        // 获取Class对象的三种方式</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        logger.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">info</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"根据类名:  </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">\t</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> User.class);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        logger.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">info</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"根据对象:  </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">\t</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> +</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> User</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">getClass</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">());</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        logger.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">info</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"根据全限定类名:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">\t</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> Class.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">forName</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"com.test.User"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">));</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">        // 常用的方法</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        logger.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">info</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"获取全限定类名:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">\t</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> userClass.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">getName</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">());</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        logger.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">info</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"获取类名:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">\t</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> userClass.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">getSimpleName</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">());</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        logger.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">info</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"实例化:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">\t</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> userClass.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">newInstance</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">());</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    }</span></span></code></pre>
</div><h2 id="_1-23" tabindex="-1">1-23 <a class="header-anchor" href="#_1-23" aria-label="Permalink to &quot;1-23&quot;">&ZeroWidthSpace;</a></h2>
<h3 id="quartz是做什么用的" tabindex="-1">Quartz是做什么用的？ <a class="header-anchor" href="#quartz是做什么用的" aria-label="Permalink to &quot;Quartz是做什么用的？&quot;">&ZeroWidthSpace;</a></h3>
<p>Quartz 是开源的 JAVA 任务调度框架，能够灵活且简单的管理定时任务。支持数据库集成、集群、插件等。支持使用 <code>cron-like</code> 表达式。</p>
<h2 id="_1-22" tabindex="-1">1-22 <a class="header-anchor" href="#_1-22" aria-label="Permalink to &quot;1-22&quot;">&ZeroWidthSpace;</a></h2>
<h3 id="如何限制规定泛型的范围" tabindex="-1">如何限制规定泛型的范围？ <a class="header-anchor" href="#如何限制规定泛型的范围" aria-label="Permalink to &quot;如何限制规定泛型的范围？&quot;">&ZeroWidthSpace;</a></h3>
<p>可以使用 <code>extends</code> 关键字：
<code>class Test&lt;T extends Number&gt;</code> 限制泛型的范围为 Number 及其子类。</p>
<p>也可以使用 <code>interface</code> 关键字：
<code>class Test&lt;T implements Test&gt;</code> 限制泛型的范围为 Test 的实现方法。</p>
<h2 id="_1-21" tabindex="-1">1-21 <a class="header-anchor" href="#_1-21" aria-label="Permalink to &quot;1-21&quot;">&ZeroWidthSpace;</a></h2>
<h3 id="泛型类如何定义使用" tabindex="-1">泛型类如何定义使用？ <a class="header-anchor" href="#泛型类如何定义使用" aria-label="Permalink to &quot;泛型类如何定义使用？&quot;">&ZeroWidthSpace;</a></h3>
<div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> Test</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>{                  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 此处可以随便写标识符号，T是type的简称</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    private</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> T t;                </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 类型由T指定，即：由外部指定  </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> setT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(T </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">){</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">        this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">.t </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> t;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    public</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> T </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">getT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(){</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> t;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> TestDemo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">[] </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">args</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">){</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        Test&#x3C;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">> test </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> new</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> Test&#x3C;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        test.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">setT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"hello"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(test.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">getT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">());</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span></code></pre>
</div><h2 id="_1-20" tabindex="-1">1-20 <a class="header-anchor" href="#_1-20" aria-label="Permalink to &quot;1-20&quot;">&ZeroWidthSpace;</a></h2>
<h3 id="this-super-在构造方法中的区别" tabindex="-1">this() &amp; super() 在构造方法中的区别？ <a class="header-anchor" href="#this-super-在构造方法中的区别" aria-label="Permalink to &quot;this() &amp; super() 在构造方法中的区别？&quot;">&ZeroWidthSpace;</a></h3>
<ul>
<li>调用super()必须写在子类构造方法的第一行, 否则编译不通过</li>
<li>super从子类调用父类构造, this在同一类中调用其他构造均需要放在第一行</li>
<li>尽管可以用this调用一个构造器, 却不能调用2个</li>
<li>this和super不能出现在同一个构造器中, 否则编译不通过</li>
<li>this()、super()都指的对象,不可以在static环境中使用</li>
<li>本质this指向本对象的指针。super是一个关键字</li>
</ul>
<h2 id="_1-19" tabindex="-1">1-19 <a class="header-anchor" href="#_1-19" aria-label="Permalink to &quot;1-19&quot;">&ZeroWidthSpace;</a></h2>
<h3 id="什么是-java-移位运算符" tabindex="-1">什么是 Java 移位运算符？ <a class="header-anchor" href="#什么是-java-移位运算符" aria-label="Permalink to &quot;什么是 Java 移位运算符？&quot;">&ZeroWidthSpace;</a></h3>
<ul>
<li><code>&lt;&lt;</code> 左移运算符，num &lt;&lt; 1，相当于 num 乘以 2</li>
<li><code>&gt;&gt;</code> 右移运算符，num &gt;&gt; 1，相当于 num 除以 2</li>
<li><code>&gt;&gt;&gt;</code> 无符号右移运算符，忽略符号位，空位都以0补齐</li>
</ul>
<h2 id="_1-18" tabindex="-1">1-18 <a class="header-anchor" href="#_1-18" aria-label="Permalink to &quot;1-18&quot;">&ZeroWidthSpace;</a></h2>
<h3 id="java-能在-switch-中使用-string-吗" tabindex="-1">JAVA 能在 Switch 中使用 String 吗? <a class="header-anchor" href="#java-能在-switch-中使用-string-吗" aria-label="Permalink to &quot;JAVA 能在 Switch 中使用 String 吗?&quot;">&ZeroWidthSpace;</a></h3>
<p>在 Java 7 之前，switch 只能支持 byte、short、char、int、enum 类型，Java 7 之后，可以支持 String 类型。</p>
<h2 id="_1-17" tabindex="-1">1-17 <a class="header-anchor" href="#_1-17" aria-label="Permalink to &quot;1-17&quot;">&ZeroWidthSpace;</a></h2>
<h3 id="为什么dns通常基于-udp" tabindex="-1">为什么DNS通常基于 UDP？ <a class="header-anchor" href="#为什么dns通常基于-udp" aria-label="Permalink to &quot;为什么DNS通常基于 UDP？&quot;">&ZeroWidthSpace;</a></h3>
<p>DNS 通常基于 UDP，因为 UDP 没有连接的开销，而且 DNS 服务需要尽可能快地响应请求，而不是等待连接建立。但当数据长度大于512字节时，为保证传输质量，就会使用基于TCP的实现形式。</p>
<h2 id="_1-16" tabindex="-1">1-16 <a class="header-anchor" href="#_1-16" aria-label="Permalink to &quot;1-16&quot;">&ZeroWidthSpace;</a></h2>
<h3 id="tcp-三次握手中-最后一次回复丢失-会发生什么" tabindex="-1">TCP 三次握手中，最后一次回复丢失，会发生什么？ <a class="header-anchor" href="#tcp-三次握手中-最后一次回复丢失-会发生什么" aria-label="Permalink to &quot;TCP 三次握手中，最后一次回复丢失，会发生什么？&quot;">&ZeroWidthSpace;</a></h3>
<p>如果最后一次回复丢失，客户端会认为服务端没有收到确认信息，会再次发送确认信息，服务端收到确认信息后，会再次发送确认信息，客户端收到确认信息后，会再次发送确认信息，如此循环，直到连接超时。</p>
<h2 id="_1-15" tabindex="-1">1-15 <a class="header-anchor" href="#_1-15" aria-label="Permalink to &quot;1-15&quot;">&ZeroWidthSpace;</a></h2>
<h3 id="什么是-tcp-三次握手" tabindex="-1">什么是 TCP 三次握手？ <a class="header-anchor" href="#什么是-tcp-三次握手" aria-label="Permalink to &quot;什么是 TCP 三次握手？&quot;">&ZeroWidthSpace;</a></h3>
<p>TCP 三次握手是指建立 TCP 连接时，客户端和服务端需要进行三次通信，以确认双方的接收能力和发送能力是否正常。</p>
<ol>
<li>发送端首先发送一个带SYN（synchronize）标志的数据包给接收方【第一次的seq序列号是随机产生的，这样是为了网络安全，如果不是随机产生初始序列号，黑客将会以很容易的方式获取到你与其他主机之间的初始化序列号，并且伪造序列号进行攻击】</li>
<li>接收端收到后，回传一个带有SYN/ACK（acknowledgement）标志的数据包以示传达确认信息【SYN 是为了告诉发送端，发送方到接收方的通道没问题；ACK 用来验证接收方到发送方的通道没问题】</li>
<li>最后，发送端再回传一个带ACK标志的数据包，代表握手结束若在握手某个过程中某个阶段莫名中断，TCP协议会再次以相同的顺序发送相同的数据包</li>
</ol>
<h2 id="_1-14" tabindex="-1">1-14 <a class="header-anchor" href="#_1-14" aria-label="Permalink to &quot;1-14&quot;">&ZeroWidthSpace;</a></h2>
<h3 id="什么是754层网络模型" tabindex="-1">什么是754层网络模型？ <a class="header-anchor" href="#什么是754层网络模型" aria-label="Permalink to &quot;什么是754层网络模型？&quot;">&ZeroWidthSpace;</a></h3>
<p><img src="https://www.pdai.tech/images/develop/network/dev-network-protocol-1.png" alt="754网络模型及对应" title="754网络模型"></p>
<p>OSI依层次结构来划分：应用层（Application）、表示层（Presentation）、会话层（Session）、传输层（Transport）、网络层（Network）、数据链路层（Data Link）、物理层（Physical）</p>
<h2 id="_1-13" tabindex="-1">1-13 <a class="header-anchor" href="#_1-13" aria-label="Permalink to &quot;1-13&quot;">&ZeroWidthSpace;</a></h2>
<h3 id="什么是日志系统和日志门面" tabindex="-1">什么是日志系统和日志门面？ <a class="header-anchor" href="#什么是日志系统和日志门面" aria-label="Permalink to &quot;什么是日志系统和日志门面？&quot;">&ZeroWidthSpace;</a></h3>
<p><strong>日志系统</strong>是用来记录应用程序运行时的状态信息，比如错误日志、警告日志、调试日志等。</p>
<ul>
<li>Log4j</li>
<li>Logback</li>
<li>Log4j2</li>
</ul>
<p><strong>日志门面</strong>是一种日志系统的抽象，它定义了一组日志系统的公共接口，以便于应用程序通过这组公共接口来记录日志，而不用关心具体的日志系统实现。</p>
<ul>
<li>SLF4J</li>
<li>Commons Logging</li>
<li>Log4j-to-SLF4J</li>
</ul>
<h2 id="_1-12" tabindex="-1">1-12 <a class="header-anchor" href="#_1-12" aria-label="Permalink to &quot;1-12&quot;">&ZeroWidthSpace;</a></h2>
<h3 id="什么是-jwt" tabindex="-1">什么是 JWT? <a class="header-anchor" href="#什么是-jwt" aria-label="Permalink to &quot;什么是 JWT?&quot;">&ZeroWidthSpace;</a></h3>
<p>JWT（JSON Web Token）是一个开放标准（RFC 7519），它定义了一种紧凑且自包含的方式，用于作为 JSON 对象在各方之间安全地传输信息。</p>
<p>通过非对称加密算法，可以对 JWT 进行签名，从而保证 JWT 的真实性和完整性。</p>
<h2 id="_1-11" tabindex="-1">1-11 <a class="header-anchor" href="#_1-11" aria-label="Permalink to &quot;1-11&quot;">&ZeroWidthSpace;</a></h2>
<h3 id="spring-security-的原理" tabindex="-1">Spring Security 的原理? <a class="header-anchor" href="#spring-security-的原理" aria-label="Permalink to &quot;Spring Security 的原理?&quot;">&ZeroWidthSpace;</a></h3>
<p>SpringSecurity 的核心是一个过滤器链，它由一系列的过滤器组成，每个过滤器负责一项安全控制功能，比如认证、授权、会话管理等。</p>
<h2 id="_1-10" tabindex="-1">1-10 <a class="header-anchor" href="#_1-10" aria-label="Permalink to &quot;1-10&quot;">&ZeroWidthSpace;</a></h2>
<h3 id="什么是-spring-security" tabindex="-1">什么是 Spring Security？ <a class="header-anchor" href="#什么是-spring-security" aria-label="Permalink to &quot;什么是 Spring Security？&quot;">&ZeroWidthSpace;</a></h3>
<p>SpringSecurity 是基于 Spring 的安全框架，它提供了较为全面的一套安全性解决方案，并且可以与 SpringMVC、SpringBoot 等框架无缝集成。
它充分利用了依赖注入和 AOP 技术，可以将安全性应用到方法调用或 Web 请求上，为应用系统提供声明式的安全访问控制功能。</p>
<h2 id="_1-9" tabindex="-1">1-9 <a class="header-anchor" href="#_1-9" aria-label="Permalink to &quot;1-9&quot;">&ZeroWidthSpace;</a></h2>
<h3 id="谈谈你对-cglib-的理解" tabindex="-1">谈谈你对 CGLib 的理解？ <a class="header-anchor" href="#谈谈你对-cglib-的理解" aria-label="Permalink to &quot;谈谈你对 CGLib 的理解？&quot;">&ZeroWidthSpace;</a></h3>
<p>JDK 动态代理机制只能代理实现接口的类，一般没有实现接口的类不能进行代理。使用 CGLib 实现动态代理，完全不受代理类必须实现接口的限制。</p>
<p>CGLib 的原理是对指定目标类生成一个子类，并覆盖其中方法实现增强，但因为采用的是继承，所以不能对 final 修饰的类进行代理。</p>
<p>CGLib 的调用流程就是通过调用拦截器的 intercept 方法来实现对被代理类的调用。而拦截逻辑可以写在 intercept 方法的 invokeSuper(o, objects);的前后实现拦截。</p>
<h2 id="_1-8" tabindex="-1">1-8 <a class="header-anchor" href="#_1-8" aria-label="Permalink to &quot;1-8&quot;">&ZeroWidthSpace;</a></h2>
<h3 id="有哪些aop-advice通知的类型" tabindex="-1">有哪些AOP Advice通知的类型？ <a class="header-anchor" href="#有哪些aop-advice通知的类型" aria-label="Permalink to &quot;有哪些AOP Advice通知的类型？&quot;">&ZeroWidthSpace;</a></h3>
<ul>
<li><strong>前置通知（Before advice） ：</strong> 这些类型的 Advice 在 joinpoint 方法之前执行，并使用 @Before 注解标记进行配置。</li>
<li><strong>后置通知（After advice） ：</strong> 这些类型的 Advice 在连接点方法之后执行，无论方法退出是正常还是异常返回，并使用 @After 注解标记进行配置。</li>
<li><strong>返回后通知（After return advice） ：</strong> 这些类型的 Advice 在连接点方法正常执行后执行，并使用@AfterReturning 注解标记进行配置。</li>
<li><strong>环绕通知（Around advice） ：</strong> 些类型的 Advice 在连接点之前和之后执行，并使用 @Around 注解标记进行配置。</li>
<li><strong>抛出异常后通知（After throwing advice） ：</strong> 仅在 joinpoint 方法通过抛出异常退出并使用 @AfterThrowing 注解标记配置时执行。</li>
</ul>
<h2 id="_1-7" tabindex="-1">1-7 <a class="header-anchor" href="#_1-7" aria-label="Permalink to &quot;1-7&quot;">&ZeroWidthSpace;</a></h2>
<h3 id="aop-包含的几个概念" tabindex="-1">AOP 包含的几个概念? <a class="header-anchor" href="#aop-包含的几个概念" aria-label="Permalink to &quot;AOP 包含的几个概念?&quot;">&ZeroWidthSpace;</a></h3>
<ul>
<li><strong>切面（Aspect）：</strong> 一个关注点的模块化，这个关注点可能会横切多个对象。</li>
<li><strong>连接点（Joinpoint）：</strong> 程序执行过程中的某个特定的点，比如某方法调用的时候或者处理异常的时候。</li>
<li><strong>通知（Advice）：</strong> 在切面的某个特定的连接点上执行的动作。</li>
<li><strong>切入点（Pointcut）：</strong> 匹配连接点的断言，在 AOP 中通知和一个切入点表达式关联。</li>
<li><strong>引入（Introduction）：</strong> 在不修改代码的前提下，引入可以在运行期为类动态地添加一些方法或字段。</li>
<li><strong>目标对象（Target Object）：</strong> 被一个或者多个切面所通知的对象，也称为被通知（advised）对象。</li>
<li><strong>织入（Weaving）：</strong> 把切面连接到其它的应用程序类型或者对象上，并创建一个被通知的对象，这些可以在运行期完成，也可以在编译期完成。</li>
</ul>
<h2 id="_1-6" tabindex="-1">1-6 <a class="header-anchor" href="#_1-6" aria-label="Permalink to &quot;1-6&quot;">&ZeroWidthSpace;</a></h2>
<h3 id="列举一些重要的spring模块。" tabindex="-1">列举一些重要的Spring模块。 <a class="header-anchor" href="#列举一些重要的spring模块。" aria-label="Permalink to &quot;列举一些重要的Spring模块。&quot;">&ZeroWidthSpace;</a></h3>
<ul>
<li>Spring Core：核心容器，提供 IoC 和 DI 的功能。</li>
<li>Spring AOP：面向切面编程，提供声明式事务管理。</li>
<li>Spring Aspects：提供与 AspectJ 的集成功能。</li>
<li>Spring JDBC：提供了 JAVA 数据库连接功能。</li>
<li>Spring Web：提供了基本的 Web 开发功能。</li>
<li>Spring MVC：提供了 MVC 模式的 Web 开发功能。</li>
<li>Spring ORM：提供了对常见的 ORM 框架的支持，如 Hibernate、JPA 等。</li>
<li>Spring Test：提供了对 JUnit 和 TestNG 的支持。</li>
<li>Spring Session：提供了对 Session 的集成支持。</li>
<li>Spring Security：提供了对安全认证和授权的支持。</li>
</ul>
<h2 id="_1-5" tabindex="-1">1-5 <a class="header-anchor" href="#_1-5" aria-label="Permalink to &quot;1-5&quot;">&ZeroWidthSpace;</a></h2>
<h3 id="什么是监听器" tabindex="-1">什么是监听器？ <a class="header-anchor" href="#什么是监听器" aria-label="Permalink to &quot;什么是监听器？&quot;">&ZeroWidthSpace;</a></h3>
<p>监听器是 Servlet 规范中的一种组件，可以监听 ServletContext、HttpSession、ServletRequest 等域对象的创建和销毁，以及域对象中属性的变化。</p>
<p>配置示例：</p>
<div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> MyListener</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> implements</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> ServletContextListener</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">Override</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> contextInitialized</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(ServletContextEvent </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">sce</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">        // ServletContext 创建时执行</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">Override</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> contextDestroyed</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(ServletContextEvent </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">sce</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">        // ServletContext 销毁时执行</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span></code></pre>
</div><p>使用示例：</p>
<div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">Configuration</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> MyConfig</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">Bean</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    public</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> ServletListenerRegistrationBean&#x3C;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">MyListener</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">> </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">myListener</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">        return</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> new</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> ServletListenerRegistrationBean&#x3C;>(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> MyListener</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">());</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span></code></pre>
</div><h2 id="_1-4" tabindex="-1">1-4 <a class="header-anchor" href="#_1-4" aria-label="Permalink to &quot;1-4&quot;">&ZeroWidthSpace;</a></h2>
<h3 id="什么是拦截器" tabindex="-1">什么是拦截器？ <a class="header-anchor" href="#什么是拦截器" aria-label="Permalink to &quot;什么是拦截器？&quot;">&ZeroWidthSpace;</a></h3>
<p>拦截器是 SpringMVC 的一种组件，可以在请求到达控制器之前或之后执行一些操作，比如记录日志、权限校验等。</p>
<p>配置示例：</p>
<div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> MyInterceptor</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> implements</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> HandlerInterceptor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">Override</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> boolean</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> preHandle</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(HttpServletRequest </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">request</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, HttpServletResponse </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">response</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, Object </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">handler</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">throws</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> Exception {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">        // 在请求到达控制器之前执行</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">        return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">Override</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> postHandle</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(HttpServletRequest </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">request</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, HttpServletResponse </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">response</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, Object </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">handler</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, ModelAndView </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">modelAndView</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">throws</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> Exception {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">        // 在请求到达控制器之后，视图渲染之前执行</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">Override</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> afterCompletion</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(HttpServletRequest </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">request</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, HttpServletResponse </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">response</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, Object </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">handler</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, Exception </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">ex</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">throws</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> Exception {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">        // 在视图渲染之后执行</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span></code></pre>
</div><p>使用示例：</p>
<div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">Configuration</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> MyConfig</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> implements</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> WebMvcConfigurer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">Override</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> addInterceptors</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(InterceptorRegistry </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">registry</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        registry.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">addInterceptor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> MyInterceptor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">())</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">                .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">addPathPatterns</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"/**"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">                .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">excludePathPatterns</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"/hello"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span></code></pre>
</div><h2 id="_1-3" tabindex="-1">1-3 <a class="header-anchor" href="#_1-3" aria-label="Permalink to &quot;1-3&quot;">&ZeroWidthSpace;</a></h2>
<h3 id="spring-boot-的默认编码是" tabindex="-1">Spring Boot 的默认编码是？ <a class="header-anchor" href="#spring-boot-的默认编码是" aria-label="Permalink to &quot;Spring Boot 的默认编码是？&quot;">&ZeroWidthSpace;</a></h3>
<p>SpringBoot 的默认编码是 <code>UTF-8</code>。可以通过 <code>spring.http.encoding.charset</code> 属性来修改编码。</p>
<h2 id="_1-2" tabindex="-1">1-2 <a class="header-anchor" href="#_1-2" aria-label="Permalink to &quot;1-2&quot;">&ZeroWidthSpace;</a></h2>
<h3 id="spring-boot-应用如何优雅关闭" tabindex="-1">Spring Boot 应用如何优雅关闭？ <a class="header-anchor" href="#spring-boot-应用如何优雅关闭" aria-label="Permalink to &quot;Spring Boot 应用如何优雅关闭？&quot;">&ZeroWidthSpace;</a></h3>
<p>SpringBoot 应用可以通过 <code>SpringApplication.exit()</code> 方法来优雅关闭，该方法可以用在任何地方。</p>
<h2 id="_1-1" tabindex="-1">1-1 <a class="header-anchor" href="#_1-1" aria-label="Permalink to &quot;1-1&quot;">&ZeroWidthSpace;</a></h2>
<h3 id="spring-boot-怎么注册事件监听器" tabindex="-1">Spring Boot 怎么注册事件监听器？ <a class="header-anchor" href="#spring-boot-怎么注册事件监听器" aria-label="Permalink to &quot;Spring Boot 怎么注册事件监听器？&quot;">&ZeroWidthSpace;</a></h3>
<p>SpringBoot 可以通过 <code>@EventListener</code> 注解来注册事件监听器，该注解可以用在方法上，也可以用在类上。</p>
]]></content:encoded>
            <enclosure url="https://www.pdai.tech/images/develop/network/dev-network-protocol-1.png" length="0" type="image/png"/>
        </item>
        <item>
            <link>https://www.imufeng.cn/interview/question-by-day/2024/2.html</link>
            <guid>https://www.imufeng.cn/interview/question-by-day/2024/2.html</guid>
            <pubDate>Mon, 25 Mar 2024 08:19:18 GMT</pubDate>
            <content:encoded><![CDATA[<h2 id="_2-29" tabindex="-1">2-29 <a class="header-anchor" href="#_2-29" aria-label="Permalink to &quot;2-29&quot;">&ZeroWidthSpace;</a></h2>
<h3 id="mybatis-如何将查询结果封装为对象" tabindex="-1">Mybatis 如何将查询结果封装为对象？ <a class="header-anchor" href="#mybatis-如何将查询结果封装为对象" aria-label="Permalink to &quot;Mybatis 如何将查询结果封装为对象？&quot;">&ZeroWidthSpace;</a></h3>
<p>Mybatis 有两种映射形式，第一种是使用``标签，逐一定义数据库列名和对象属性名之间的映射关系。 第二种是使用sql列的别名功能，将列的别名书写为对象属性名。</p>
<p>有了列名与属性名的映射关系后，Mybatis通过反射创建对象，同时使用反射给对象的属性逐一赋值并返回，那些找不到映射关系的属性，是无法完成赋值的。</p>
<h2 id="_2-28" tabindex="-1">2-28 <a class="header-anchor" href="#_2-28" aria-label="Permalink to &quot;2-28&quot;">&ZeroWidthSpace;</a></h2>
<h3 id="dao-接口的工作原理是什么" tabindex="-1">Dao 接口的工作原理是什么 <a class="header-anchor" href="#dao-接口的工作原理是什么" aria-label="Permalink to &quot;Dao 接口的工作原理是什么&quot;">&ZeroWidthSpace;</a></h3>
<p>Dao 接口即 Mapper 接口，接口的全限名，就是映射文件中的namespace的值；接口的方法名，就是映射文件中 Mapper 的 Statement 的 id 值；
接口方法内的参数，就是传递给 sql 的参数。</p>
<p>Mapper 接口是没有实现类的，当调用接口方法时，接口全限名+方法名拼接字符串作为key值，可唯一定位一个 MapperStatement。
在 Mybatis 中每、、、标签，都会被解析为一个 MapperStatement 对象。</p>
<h2 id="_2-27" tabindex="-1">2-27 <a class="header-anchor" href="#_2-27" aria-label="Permalink to &quot;2-27&quot;">&ZeroWidthSpace;</a></h2>
<h3 id="mybatis-查询时当实体类中的属性名和表中的字段名不一样-怎么办" tabindex="-1">Mybatis 查询时当实体类中的属性名和表中的字段名不一样，怎么办？ <a class="header-anchor" href="#mybatis-查询时当实体类中的属性名和表中的字段名不一样-怎么办" aria-label="Permalink to &quot;Mybatis 查询时当实体类中的属性名和表中的字段名不一样，怎么办？&quot;">&ZeroWidthSpace;</a></h3>
<ol>
<li>通过在查询的sql语句中定义字段名的别名，让字段名的别名和实体类的属性名一致。</li>
<li>通过 `` 来映射字段名和实体类属性名的一一对应的关系。</li>
</ol>
<h2 id="_2-26" tabindex="-1">2-26 <a class="header-anchor" href="#_2-26" aria-label="Permalink to &quot;2-26&quot;">&ZeroWidthSpace;</a></h2>
<h3 id="mybatis-中-和-的区别是什么" tabindex="-1">Mybatis 中 <code>#{}</code> 和 <code>${}</code> 的区别是什么？ <a class="header-anchor" href="#mybatis-中-和-的区别是什么" aria-label="Permalink to &quot;Mybatis 中 `#{}` 和 `${}` 的区别是什么？&quot;">&ZeroWidthSpace;</a></h3>
<ul>
<li><code>#{}</code> 是预编译处理，可以防止 SQL 注入。</li>
<li><code>${}</code> 是字符串替换，不会进行预编译处理，可能会导致 SQL 注入。</li>
</ul>
<div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">select</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"selectBlog"</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> resultType</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"Blog"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">  &#x3C;!-- Mybatis在处理#{}时，会将sql中的#{}替换为?号，调用PreparedStatement的set方法来赋值； --></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  select * from blog where id = #{id}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">select</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span></code></pre>
</div><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">select</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"selectBlog"</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> resultType</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"Blog"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">  &#x3C;!-- Mybatis在处理${}时，就是把${}替换成变量的值。--></span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  select * from blog where id = ${id}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">&#x3C;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">select</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">></span></span></code></pre>
</div><h2 id="_2-25" tabindex="-1">2-25 <a class="header-anchor" href="#_2-25" aria-label="Permalink to &quot;2-25&quot;">&ZeroWidthSpace;</a></h2>
<h3 id="什么是-orm" tabindex="-1">什么是 ORM？ <a class="header-anchor" href="#什么是-orm" aria-label="Permalink to &quot;什么是 ORM？&quot;">&ZeroWidthSpace;</a></h3>
<p>ORM（Object-Relational Mapping）对象关系映射，是一种数据持久化技术。它在对象模型和关系型数据库直接建立起对应关系，并且提供一种机制，
通过JavaBean对象去操作数据库表的数据。 MyBatis通过简单的XML或者注解的方式进行配置和原始映射，将实体类和SQL语句之间建立映射关系，
是一种半自动（之所以说是半自动，因为我们要自己写SQL）的ORM实现。</p>
<h2 id="_2-24" tabindex="-1">2-24 <a class="header-anchor" href="#_2-24" aria-label="Permalink to &quot;2-24&quot;">&ZeroWidthSpace;</a></h2>
<h3 id="什么是数据持久化" tabindex="-1">什么是数据持久化？ <a class="header-anchor" href="#什么是数据持久化" aria-label="Permalink to &quot;什么是数据持久化？&quot;">&ZeroWidthSpace;</a></h3>
<p>数据持久化是将内存中的数据模型转换为存储模型，以及将存储模型转换为内存中的数据模型的统称。
例如，文件的存储、数据的读取等都是数据持久化操作。数据模型可以是任何数据结构或对象的模型、XML、二进制流等。
当我们编写应用程序操作数据库，对表数据进行增删改查的操作的时候就是数据持久化的操作。</p>
<h2 id="_2-23" tabindex="-1">2-23 <a class="header-anchor" href="#_2-23" aria-label="Permalink to &quot;2-23&quot;">&ZeroWidthSpace;</a></h2>
<h3 id="怎么确保一个集合不能被修改" tabindex="-1">怎么确保一个集合不能被修改？ <a class="header-anchor" href="#怎么确保一个集合不能被修改" aria-label="Permalink to &quot;怎么确保一个集合不能被修改？&quot;">&ZeroWidthSpace;</a></h3>
<p>可以使用 <code>Collections.unmodifiableList()</code> 方法来确保一个集合不能被修改。</p>
<div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">List&#x3C;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">> list </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> new</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> ArrayList&#x3C;>();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">list.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"a"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">list.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"b"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">list.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"c"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">List&#x3C;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">> unmodifiableList </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> Collections.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">unmodifiableList</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(list);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">unmodifiableList.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"d"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 运行时抛出 Java. lang. UnsupportedOperationException 异常。</span></span></code></pre>
</div><h2 id="_2-22" tabindex="-1">2-22 <a class="header-anchor" href="#_2-22" aria-label="Permalink to &quot;2-22&quot;">&ZeroWidthSpace;</a></h2>
<h3 id="iterator-是什么" tabindex="-1">Iterator 是什么？ <a class="header-anchor" href="#iterator-是什么" aria-label="Permalink to &quot;Iterator 是什么？&quot;">&ZeroWidthSpace;</a></h3>
<p>Iterator 是 JAVA 集合框架中的迭代器接口，它是一个对象，它可以遍历并选择集合中的元素。迭代器取代了 JAVA 集合框架中的 Enumeration，迭代器允许调用者在迭代过程中移除元素。</p>
<h2 id="_2-21" tabindex="-1">2-21 <a class="header-anchor" href="#_2-21" aria-label="Permalink to &quot;2-21&quot;">&ZeroWidthSpace;</a></h2>
<h3 id="什么是散列表" tabindex="-1">什么是散列表？ <a class="header-anchor" href="#什么是散列表" aria-label="Permalink to &quot;什么是散列表？&quot;">&ZeroWidthSpace;</a></h3>
<p>散列表（Hash table，也叫哈希表），是根据关键码值（Key value）而直接进行访问的数据结构。也就是说，它通过把关键码值映射到表中一个位置来访问记录，以加快查找的速度。</p>
<h2 id="_2-20" tabindex="-1">2-20 <a class="header-anchor" href="#_2-20" aria-label="Permalink to &quot;2-20&quot;">&ZeroWidthSpace;</a></h2>
<h3 id="hashmap-是怎么解决-hash-冲突的" tabindex="-1">HashMap 是怎么解决 hash 冲突的？ <a class="header-anchor" href="#hashmap-是怎么解决-hash-冲突的" aria-label="Permalink to &quot;HashMap 是怎么解决 hash 冲突的？&quot;">&ZeroWidthSpace;</a></h3>
<p>HashMap 是基于哈希表实现的，哈希表是数组和链表的结合体，数组是 HashMap 的主体，链表则是主要为了解决哈希冲突而存在的。
HashMap 的做法是用链表和红黑树存储相同 hash 值的 value。当 hash 冲突的个数比较少时，使用链表否则使用红黑树。</p>
<h2 id="_2-19" tabindex="-1">2-19 <a class="header-anchor" href="#_2-19" aria-label="Permalink to &quot;2-19&quot;">&ZeroWidthSpace;</a></h2>
<h3 id="简述快速排序的过程。" tabindex="-1">简述快速排序的过程。 <a class="header-anchor" href="#简述快速排序的过程。" aria-label="Permalink to &quot;简述快速排序的过程。&quot;">&ZeroWidthSpace;</a></h3>
<ol>
<li>选择一个基准元素（第一个或最后一个）。</li>
<li>通过一趟排序将待排序的记录分割成独立的两个部分，其中一部分记录的元素值均比基准元素值小，另一部分记录的元素值比基准值大。</li>
<li>此时基准元素在其排好序后的正确位置。</li>
<li>然后分别对这两部分记录使用相同方法进行排序，直到整个序列有序。</li>
</ol>
<h2 id="_2-18" tabindex="-1">2-18 <a class="header-anchor" href="#_2-18" aria-label="Permalink to &quot;2-18&quot;">&ZeroWidthSpace;</a></h2>
<h3 id="arraylist-和-linkedlist-的区别是什么" tabindex="-1">ArrayList 和 LinkedList 的区别是什么？ <a class="header-anchor" href="#arraylist-和-linkedlist-的区别是什么" aria-label="Permalink to &quot;ArrayList 和 LinkedList 的区别是什么？&quot;">&ZeroWidthSpace;</a></h3>
<ul>
<li>ArrayList 是基于动态数组实现的，LinkedList 是基于双向链表实现的。</li>
<li>ArrayList 支持随机访问，LinkedList 只能顺序访问。</li>
<li>LinkedList 在插入和删除时效率较高，因为 ArrayList 增删操作可能要影响其他数据的下标。</li>
</ul>
<h2 id="_2-17" tabindex="-1">2-17 <a class="header-anchor" href="#_2-17" aria-label="Permalink to &quot;2-17&quot;">&ZeroWidthSpace;</a></h2>
<h3 id="hashmap-的实现原理" tabindex="-1">HashMap 的实现原理？ <a class="header-anchor" href="#hashmap-的实现原理" aria-label="Permalink to &quot;HashMap 的实现原理？&quot;">&ZeroWidthSpace;</a></h3>
<p>HashMap 是基于哈希表实现的，哈希表是数组和链表的结合体，数组是 HashMap 的主体，链表则是主要为了解决哈希冲突而存在的。HashMap 的做法是用链表和红黑树存储相同 hash 值的 value。当 hash 冲突的个数比较少时，使用链表否则使用红黑树。</p>
<h2 id="_2-16" tabindex="-1">2-16 <a class="header-anchor" href="#_2-16" aria-label="Permalink to &quot;2-16&quot;">&ZeroWidthSpace;</a></h2>
<h3 id="hashset-的实现原理" tabindex="-1">HashSet 的实现原理？ <a class="header-anchor" href="#hashset-的实现原理" aria-label="Permalink to &quot;HashSet 的实现原理？&quot;">&ZeroWidthSpace;</a></h3>
<p>HashSet 是基于 HashMap 实现的，HashSet 的元素存储在 HashMap 的 key 上，value 是一个固定的 Object 对象。</p>
<h2 id="_2-15" tabindex="-1">2-15 <a class="header-anchor" href="#_2-15" aria-label="Permalink to &quot;2-15&quot;">&ZeroWidthSpace;</a></h2>
<h3 id="如何决定使用-hashmap-还是-treemap" tabindex="-1">如何决定使用 HashMap 还是 TreeMap？ <a class="header-anchor" href="#如何决定使用-hashmap-还是-treemap" aria-label="Permalink to &quot;如何决定使用 HashMap 还是 TreeMap？&quot;">&ZeroWidthSpace;</a></h3>
<ul>
<li>如果需要按自然顺序或者自定义顺序遍历键，那么使用 TreeMap。</li>
<li>如果需要快速查找键或者值，那么使用 HashMap。</li>
</ul>
<h2 id="_2-14" tabindex="-1">2-14 <a class="header-anchor" href="#_2-14" aria-label="Permalink to &quot;2-14&quot;">&ZeroWidthSpace;</a></h2>
<h3 id="hashmap-和-hashtable-的区别" tabindex="-1">HashMap 和 HashTable 的区别？ <a class="header-anchor" href="#hashmap-和-hashtable-的区别" aria-label="Permalink to &quot;HashMap 和 HashTable 的区别？&quot;">&ZeroWidthSpace;</a></h3>
<ul>
<li>HashMap 是非线程安全的，HashTable 是线程安全的。</li>
<li>HashMap 允许 <code>null</code> 键和 <code>null</code> 值，HashTable 不允许 <code>null</code> 键和 <code>null</code> 值。</li>
</ul>
<h2 id="_2-13" tabindex="-1">2-13 <a class="header-anchor" href="#_2-13" aria-label="Permalink to &quot;2-13&quot;">&ZeroWidthSpace;</a></h2>
<h3 id="hashmap-什么样的类适合作为键" tabindex="-1">HashMap 什么样的类适合作为键？ <a class="header-anchor" href="#hashmap-什么样的类适合作为键" aria-label="Permalink to &quot;HashMap 什么样的类适合作为键？&quot;">&ZeroWidthSpace;</a></h3>
<ul>
<li>作为键的类必须重写 <code>hashCode()</code> 和 <code>equals()</code> 方法。</li>
<li>作为键的类应该是不可变的，不可变的类是指创建后不可改变的类，如 String、Integer、Long 等。</li>
<li>作为键的类应该是唯一的，如果两个键的 <code>hashCode()</code> 相同，那么它们的 <code>equals()</code> 方法也应该返回 <code>true</code>。</li>
</ul>
<h2 id="_2-12" tabindex="-1">2-12 <a class="header-anchor" href="#_2-12" aria-label="Permalink to &quot;2-12&quot;">&ZeroWidthSpace;</a></h2>
<h3 id="list-和-map-的区别" tabindex="-1">List 和 Map 的区别？ <a class="header-anchor" href="#list-和-map-的区别" aria-label="Permalink to &quot;List 和 Map 的区别？&quot;">&ZeroWidthSpace;</a></h3>
<ul>
<li>List 是有序的单列数据集合，可以有重复的元素。</li>
<li>Map 是无序的键值对集合，不允许重复的键，但是允许重复的值。</li>
</ul>
<h2 id="_2-11" tabindex="-1">2-11 <a class="header-anchor" href="#_2-11" aria-label="Permalink to &quot;2-11&quot;">&ZeroWidthSpace;</a></h2>
<h3 id="力扣题库-计算数组最大连续-1-的个数。" tabindex="-1">（力扣题库）计算数组最大连续 1 的个数。 <a class="header-anchor" href="#力扣题库-计算数组最大连续-1-的个数。" aria-label="Permalink to &quot;（力扣题库）计算数组最大连续 1 的个数。&quot;">&ZeroWidthSpace;</a></h3>
<p><strong>输入：</strong> <code>nums = [1,1,0,1,1,1]</code></p>
<p><strong>输出：</strong> <code>3</code></p>
<p><strong>输入：</strong> <code>nums = [1,0,1,1,0,1]</code></p>
<p><strong>输出：</strong> <code>2</code></p>
<blockquote>
<p>开头的两位和最后的三位都是连续 1 ，所以最大连续 1 的个数是 3.</p>
<p>1 &lt;= nums.length &lt;= 105</p>
<p>nums[i] 不是 0 就是 1.</p>
</blockquote>
<p><strong>题解：</strong></p>
<div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> findMaxConsecutiveOnes</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">[] nums) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> max </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, cur </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> nums) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    cur </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> 0</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> ?</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> 0</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> :</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> cur </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    max </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> Math.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">max</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(max, cur);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> max;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span></code></pre>
</div><h2 id="_2-10" tabindex="-1">2-10 <a class="header-anchor" href="#_2-10" aria-label="Permalink to &quot;2-10&quot;">&ZeroWidthSpace;</a></h2>
<h3 id="什么是栈-什么是队列" tabindex="-1">什么是栈，什么是队列？ <a class="header-anchor" href="#什么是栈-什么是队列" aria-label="Permalink to &quot;什么是栈，什么是队列？&quot;">&ZeroWidthSpace;</a></h3>
<p><strong>栈（Stack）</strong> 是一种先进后出（FILO）的数据结构，只允许在栈顶进行插入和删除操作。</p>
<p><strong>队列（Queue）</strong> 是一种先进先出（FIFO）的数据结构，只允许在队列的两端进行插入和删除操作。</p>
<h2 id="_2-9" tabindex="-1">2-9 <a class="header-anchor" href="#_2-9" aria-label="Permalink to &quot;2-9&quot;">&ZeroWidthSpace;</a></h2>
<h3 id="什么是快速失败和安全失败机制" tabindex="-1">什么是快速失败和安全失败机制？ <a class="header-anchor" href="#什么是快速失败和安全失败机制" aria-label="Permalink to &quot;什么是快速失败和安全失败机制？&quot;">&ZeroWidthSpace;</a></h3>
<p><strong>快速失败（Fail-Fast）：</strong> 在用迭代器对集合对象进行遍历的时候，如果A线程正在对集合进行遍历，此时B线程或A线程对集合进行修改（增删改）操作，
都会导致A线程抛出 ConcurrentModificationException 异常。 这是因为迭代器在便利是直接访问集合中的内容，
并且使用一个 modCount 变量，集合在被遍历期间如果内容发生变化，modCount 也会发生变化，迭代器就会抛出异常。</p>
<p><strong>安全失败（Fail-Safe）：</strong> 安全失败机制的集合容器，在便利是不直接访问集合内容吗，而是先复制原有集合，并操作拷贝后的集合。</p>
<h2 id="_2-8" tabindex="-1">2-8 <a class="header-anchor" href="#_2-8" aria-label="Permalink to &quot;2-8&quot;">&ZeroWidthSpace;</a></h2>
<h3 id="arraylist-底层是什么" tabindex="-1">ArrayList 底层是什么？ <a class="header-anchor" href="#arraylist-底层是什么" aria-label="Permalink to &quot;ArrayList 底层是什么？&quot;">&ZeroWidthSpace;</a></h3>
<p>ArrayList 采用 List 数组作为底层实现，是顺序容器，允许放入 <code>null</code> 元素。
ArrayList 具有自动增加底层数组容量的能力，当数组容量不足时，会自动增加容量。</p>
<h2 id="_2-7" tabindex="-1">2-7 <a class="header-anchor" href="#_2-7" aria-label="Permalink to &quot;2-7&quot;">&ZeroWidthSpace;</a></h2>
<h3 id="java-集合有哪些类" tabindex="-1">JAVA 集合有哪些类？ <a class="header-anchor" href="#java-集合有哪些类" aria-label="Permalink to &quot;JAVA 集合有哪些类？&quot;">&ZeroWidthSpace;</a></h3>
<ul>
<li>Set
<ul>
<li>TreeSet 基于红黑树实现，支持有序性操作。</li>
<li>HashSet 基于哈希表实现，支持快速查找。</li>
<li>LinkedHashSet 具有可预知迭代顺序的 Set 接口的哈希表和链接列表实现。</li>
</ul>
</li>
<li>List
<ul>
<li>ArrayList 基于动态数组实现，支持随机访问。</li>
<li>Vector 和 ArrayList 类似，但是它是线程安全的。</li>
<li>LinkedList 基于双向链表实现，只能顺序访问，但是可以快速插入和删除，也可以用作堆栈、队列。</li>
</ul>
</li>
<li>Queue
<ul>
<li>PriorityQueue 基于堆结构实现，可以用它来实现优先队列。</li>
<li>LinkedList 也可以实现双向队列。</li>
</ul>
</li>
</ul>
<h2 id="_2-6" tabindex="-1">2-6 <a class="header-anchor" href="#_2-6" aria-label="Permalink to &quot;2-6&quot;">&ZeroWidthSpace;</a></h2>
<h3 id="所有的-final-修饰的字段都是编译期常量吗" tabindex="-1">所有的 final 修饰的字段都是编译期常量吗? <a class="header-anchor" href="#所有的-final-修饰的字段都是编译期常量吗" aria-label="Permalink to &quot;所有的 final 修饰的字段都是编译期常量吗?&quot;">&ZeroWidthSpace;</a></h3>
<p>不是，final 修饰的字段，如果是基本数据类型或者是不可变对象，那么它是编译期常量，否则不是。</p>
<div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> FinalTest</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> final</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> 6</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;     </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 编译期常量</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> final</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> b </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> Random</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">nextInt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">);     </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 运行期常量</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> final</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> c </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> 6</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;      </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 编译期常量</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> final</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> d </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> Random</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">nextInt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">);      </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 运行期常量</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> final</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> String e </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> "hello"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;      </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 运行期常量</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> final</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> String f </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"hello"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">);      </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 运行期常量</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span></code></pre>
</div><h2 id="_2-5" tabindex="-1">2-5 <a class="header-anchor" href="#_2-5" aria-label="Permalink to &quot;2-5&quot;">&ZeroWidthSpace;</a></h2>
<h3 id="什么是重复注解" tabindex="-1">什么是重复注解？ <a class="header-anchor" href="#什么是重复注解" aria-label="Permalink to &quot;什么是重复注解？&quot;">&ZeroWidthSpace;</a></h3>
<p>重复注解指允许在同一申明类型(类，属性，或方法)的多次使用同一个注解。</p>
<p>在 JAVA 之前，对于重复注解的解决方案如下，不是很友好：</p>
<div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">public</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">interface</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> Authority</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">     String </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">role</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">public</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">interface</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> Authorities</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    Authority</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">[] </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> RepeatAnnotationUseOldVersion</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">Authorities</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">({@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">Authority</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">role</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"Admin"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">),@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">Authority</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">role</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"Manager"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">)})</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> doSomeThing</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(){</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span></code></pre>
</div><p>JAVA 8 之后：</p>
<div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">Repeatable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(Authorities.class)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">public</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">interface</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> Authority</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">String </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">role</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">public</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">interface</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> Authorities</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">Authority</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">[] </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> RepeatAnnotationUseNewVersion</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">Authority</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">role</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"Admin"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">Authority</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">role</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"Manager"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> doSomeThing</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(){ }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span></code></pre>
</div><h2 id="_2-4" tabindex="-1">2-4 <a class="header-anchor" href="#_2-4" aria-label="Permalink to &quot;2-4&quot;">&ZeroWidthSpace;</a></h2>
<h3 id="什么是类型注解" tabindex="-1">什么是类型注解？ <a class="header-anchor" href="#什么是类型注解" aria-label="Permalink to &quot;什么是类型注解？&quot;">&ZeroWidthSpace;</a></h3>
<p>注解类型被用来支持在 JAVA 程序中做强类型检查。配合插件式的 <code>check framework</code>，可以在编译时检测出 runtime error，以提高代码质量。</p>
<p>创建类实例：<code>new @Interned MyObject();</code></p>
<p>类型映射：<code>myString = (@NonNull String) str;</code></p>
<p>implements 语句中：<code>class UnmodifiableList&lt;T&gt; implements @Readonly List&lt;@Readonly T&gt; { … }</code></p>
<p>throw exception 声明：<code>void monitorTemperature() throws @Critical TemperatureException { … }</code></p>
<blockquote>
<p>类型注解只是语法而不是语义，并不会影响 java 的编译时间，加载时间，以及运行时间，也就是说，编译成 class 文件的时候并不包含类型注解。</p>
</blockquote>
<h2 id="_2-3" tabindex="-1">2-3 <a class="header-anchor" href="#_2-3" aria-label="Permalink to &quot;2-3&quot;">&ZeroWidthSpace;</a></h2>
<h3 id="optional-要解决什么问题" tabindex="-1">Optional 要解决什么问题？ <a class="header-anchor" href="#optional-要解决什么问题" aria-label="Permalink to &quot;Optional 要解决什么问题？&quot;">&ZeroWidthSpace;</a></h3>
<p>在调用一个方法得到了返回值却不能直接将返回值作为参数去调用别的方法，我们首先要判断这个返回值是否为 null，
只有在非空的前提下才能将其作为其他方法的参数。Java 8 引入了一个新的 Optional 类：这是一个可以为 null 的容器对象，
如果值存在则 <code>isPresent()</code> 方法会返回 true，调用 <code>get()</code> 方法会返回该对象。</p>
<div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">Optional.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">of</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> Outer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">())</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">map</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(Outer</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">::</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">getNested)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">map</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(Nested</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">::</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">getInner)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">map</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(Inner</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">::</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">getFoo)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">ifPresent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(System.out</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">::</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">println);</span></span></code></pre>
</div><p>还有一种实现相同作用的方式就是通过利用一个 supplier 函数来解决嵌套路径的问题:</p>
<div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">Outer obj </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> Outer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">();</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">resolve</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">-></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> obj.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">getNested</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">getInner</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">getFoo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">())</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">ifPresent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(System.out</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">::</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">println);</span></span></code></pre>
</div><h2 id="_2-2" tabindex="-1">2-2 <a class="header-anchor" href="#_2-2" aria-label="Permalink to &quot;2-2&quot;">&ZeroWidthSpace;</a></h2>
<h3 id="什么是-functionalinterface" tabindex="-1">什么是 FunctionalInterface？ <a class="header-anchor" href="#什么是-functionalinterface" aria-label="Permalink to &quot;什么是 FunctionalInterface？&quot;">&ZeroWidthSpace;</a></h3>
<div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">Documented</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">Retention</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(RetentionPolicy.RUNTIME)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">Target</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(ElementType.TYPE)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">public</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">interface</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> FunctionalInterface</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">{}</span></span></code></pre>
</div><p>FunctionalInterface 函数式接口，是 JAVA 8 中一类特殊类型接口的称呼，这种类只包含一个抽象方法（除了隐含的 Object 对象的公共方法）</p>
<ul>
<li>只能有一个抽象方法。</li>
<li>可以有多个静态方法和默认方法。</li>
<li>默认包含 Object 类的方法。</li>
</ul>
<h2 id="_2-1" tabindex="-1">2-1 <a class="header-anchor" href="#_2-1" aria-label="Permalink to &quot;2-1&quot;">&ZeroWidthSpace;</a></h2>
<h3 id="类加载的生命周期" tabindex="-1">类加载的生命周期？ <a class="header-anchor" href="#类加载的生命周期" aria-label="Permalink to &quot;类加载的生命周期？&quot;">&ZeroWidthSpace;</a></h3>
<p>了加载的过程包括了 加载、验证。准备。解析、初始化五个阶段，
除了解析之外，其余阶段的顺序是确定的，解析阶段可以在初始化之后进行。</p>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[每日一题]]></title>
            <link>https://www.imufeng.cn/interview/question-by-day/2024/3.html</link>
            <guid>https://www.imufeng.cn/interview/question-by-day/2024/3.html</guid>
            <pubDate>Mon, 25 Mar 2024 08:19:18 GMT</pubDate>
            <content:encoded><![CDATA[<h1 id="每日一题" tabindex="-1">每日一题 <a class="header-anchor" href="#每日一题" aria-label="Permalink to &quot;每日一题&quot;">&ZeroWidthSpace;</a></h1>
<h2 id="_3-25" tabindex="-1">3-25 <a class="header-anchor" href="#_3-25" aria-label="Permalink to &quot;3-25&quot;">&ZeroWidthSpace;</a></h2>
<h3 id="什么是-nio" tabindex="-1">什么是 NIO？ <a class="header-anchor" href="#什么是-nio" aria-label="Permalink to &quot;什么是 NIO？&quot;">&ZeroWidthSpace;</a></h3>
<p>NIO 是 New I/O 的缩写，是 Java 1.4 引入的一种新的 I/O 模型，它提供了一种高效的 I/O 操作方式，可以使用单线程处理多个连接，提高了 I/O 的效率。</p>
<h2 id="_3-24" tabindex="-1">3-24 <a class="header-anchor" href="#_3-24" aria-label="Permalink to &quot;3-24&quot;">&ZeroWidthSpace;</a></h2>
<h3 id="什么是-bio" tabindex="-1">什么是 BIO？ <a class="header-anchor" href="#什么是-bio" aria-label="Permalink to &quot;什么是 BIO？&quot;">&ZeroWidthSpace;</a></h3>
<p>BIO 是指同步阻塞 I/O 模型，是 Java 传统的 I/O 模型，它的特点是阻塞，即当一个线程调用 read() 或 write() 时，该线程被阻塞，直到有数据可读或可写。</p>
<h2 id="_3-23" tabindex="-1">3-23 <a class="header-anchor" href="#_3-23" aria-label="Permalink to &quot;3-23&quot;">&ZeroWidthSpace;</a></h2>
<h3 id="java-中有哪些流" tabindex="-1">JAVA 中有哪些流？ <a class="header-anchor" href="#java-中有哪些流" aria-label="Permalink to &quot;JAVA 中有哪些流？&quot;">&ZeroWidthSpace;</a></h3>
<ul>
<li><strong>IO 流</strong> 数据传输的抽象，对文件中内容进行读写操作。包括输入和输出流，又根据传输数据类型分为字节流、字符流。</li>
<li><strong>Stream 流</strong> JAVA 8 新特性，基于函数式编程操作处理数据，元素流在管道中经过中间操作（intermediate operation）的处理，
最后由最终操作(terminal operation)得到前面处理的结果。</li>
</ul>
<h2 id="_3-22" tabindex="-1">3-22 <a class="header-anchor" href="#_3-22" aria-label="Permalink to &quot;3-22&quot;">&ZeroWidthSpace;</a></h2>
<h3 id="什么是建造者模式" tabindex="-1">什么是建造者模式? <a class="header-anchor" href="#什么是建造者模式" aria-label="Permalink to &quot;什么是建造者模式?&quot;">&ZeroWidthSpace;</a></h3>
<p>建造者模式是将一个复杂的对象的构建与它的表示分离，使得同样的构建过程可以创建不同的方式进行创建。 工厂类模式是提供的是创建单个类的产品，
而建造者模式则是将各种产品集中起来进行管理，用来具有不同的属性的产品</p>
<div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 产品</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> Product</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    private</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> String partA;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    private</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> String partB;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    private</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> String partC;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> setPartA</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(String </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">partA</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">        this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">.partA </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> partA;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> setPartB</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(String </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">partB</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">        this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">.partB </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> partB;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> setPartC</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(String </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">partC</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">        this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">.partC </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> partC;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> show</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(partA </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> partB </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> partC);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 抽象建造者</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">abstract</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> Builder</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> abstract</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> buildPartA</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> abstract</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> buildPartB</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> abstract</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> buildPartC</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> abstract</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> Product </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">getResult</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 具体建造者</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> ConcreteBuilder</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> extends</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> Builder</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    private</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> Product product </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> Product</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">Override</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> buildPartA</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        product.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">setPartA</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"A"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">Override</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> buildPartB</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        product.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">setPartB</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"B"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">Override</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> buildPartC</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        product.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">setPartC</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"C"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">Override</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    public</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> Product </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">getResult</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> product;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 指挥者</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> Director</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    private</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> Builder builder;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    public</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> Director</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(Builder </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">builder</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">        this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">.builder </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> builder;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    public</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> Product </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">construct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        builder.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">buildPartA</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        builder.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">buildPartB</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        builder.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">buildPartC</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> builder.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">getResult</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 测试</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> Test</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">[] </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">args</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        Builder builder </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> ConcreteBuilder</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        Director director </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> Director</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(builder);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        Product product </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> director.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">construct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        product.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">show</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span></code></pre>
</div><h2 id="_3-22-1" tabindex="-1">3-22 <a class="header-anchor" href="#_3-22-1" aria-label="Permalink to &quot;3-22&quot;">&ZeroWidthSpace;</a></h2>
<h3 id="什么是动态代理" tabindex="-1">什么是动态代理？ <a class="header-anchor" href="#什么是动态代理" aria-label="Permalink to &quot;什么是动态代理？&quot;">&ZeroWidthSpace;</a></h3>
<p>动态代理是指在运行时动态生成代理类，通过 Java 的反射机制动态生成代理类，然后在代理类中实现接口方法，实现对目标对象的代理访问。</p>
<div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">//接口</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> UserDao</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> save</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">//接口实现类</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> UserDaoImpl</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> implements</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> UserDao</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> save</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"保存数据方法"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 每次生成动态代理类对象时,实现了InvocationHandler接口的调用处理器对象</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> InvocationHandlerImpl</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> implements</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> InvocationHandler</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">    // 这其实业务实现类对象，用来调用具体的业务方法</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    private</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> Object target;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">    // 通过构造函数传入目标对象</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    public</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> InvocationHandlerImpl</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(Object </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">target</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">        this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">.target </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> target;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">    //动态代理实际运行的代理方法</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    public</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> Object </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">invoke</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(Object </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">proxy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, Method </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">method</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">Object</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">[] </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">args</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">throws</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> Throwable {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"调用开始处理"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">        //下面invoke()方法是以反射的方式来创建对象，第一个参数是要创建的对象，第二个是构成方法的参数，由第二个参数来决定创建对象使用哪个构造方法</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        Object result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> method.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">invoke</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(target, args);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"调用结束处理"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> result;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">//测试</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> Test</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">[] </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">args</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">        // 被代理对象</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        UserDao userDaoImpl </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> UserDaoImpl</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        InvocationHandlerImpl invocationHandlerImpl </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> InvocationHandlerImpl</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(userDaoImpl);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">        //类加载器</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        ClassLoader loader </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> userDaoImpl.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">getClass</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">getClassLoader</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        Class&#x3C;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">?</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">>[] interfaces </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> userDaoImpl.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">getClass</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">getInterfaces</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">        // 主要装载器、一组接口及调用处理动态代理实例</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        UserDao newProxyInstance </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (UserDao) Proxy.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">newProxyInstance</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(loader, interfaces, invocationHandlerImpl);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        newProxyInstance.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">save</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span></code></pre>
</div><h2 id="_3-21" tabindex="-1">3-21 <a class="header-anchor" href="#_3-21" aria-label="Permalink to &quot;3-21&quot;">&ZeroWidthSpace;</a></h2>
<h3 id="什么是静态代理" tabindex="-1">什么是静态代理？ <a class="header-anchor" href="#什么是静态代理" aria-label="Permalink to &quot;什么是静态代理？&quot;">&ZeroWidthSpace;</a></h3>
<p>静态代理是指在编译时就已经确定代理的对象，通过在代码中显式定义一个代理类，代理类通过实现与目标对象相同的接口
然后在代理类中维护一个目标对象，通过构造方法或者其他方式传入目标对象，同时在代理类中实现接口方法，实现对目标对象的代理访问。</p>
<p>示例：</p>
<div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 接口</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> ISubject</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> request</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 目标对象</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> RealSubject</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> implements</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> ISubject</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">Override</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> request</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"RealSubject request"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 代理对象</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> ProxySubject</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> implements</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> ISubject</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    private</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> ISubject realSubject;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    public</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> ProxySubject</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(ISubject </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">realSubject</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">        this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">.realSubject </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> realSubject;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">Override</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> request</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"ProxySubject before request"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        realSubject.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">request</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"ProxySubject after request"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// 测试</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> Test</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">[] </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">args</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        ISubject realSubject </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> RealSubject</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        ISubject proxySubject </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> ProxySubject</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(realSubject);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        proxySubject.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">request</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span></code></pre>
</div><h2 id="_3-20" tabindex="-1">3-20 <a class="header-anchor" href="#_3-20" aria-label="Permalink to &quot;3-20&quot;">&ZeroWidthSpace;</a></h2>
<h3 id="代理模式的分类" tabindex="-1">代理模式的分类？ <a class="header-anchor" href="#代理模式的分类" aria-label="Permalink to &quot;代理模式的分类？&quot;">&ZeroWidthSpace;</a></h3>
<p><strong>静态代理：</strong> 简单代理模式，是动态代理的理论基础。常见使用在代理模式
<strong>jdk动态代理：</strong> 使用反射完成代理。需要有顶层接口才能使用，常见是mybatis的mapper文件是代理。
<strong>cglib：</strong> 第三方动态代理，使用反射完成代理，可以直接代理类（jdk动态代理不行），使用字节码技术，不能对 final类进行继承。</p>
<h2 id="_3-19" tabindex="-1">3-19 <a class="header-anchor" href="#_3-19" aria-label="Permalink to &quot;3-19&quot;">&ZeroWidthSpace;</a></h2>
<h3 id="什么是代理模式" tabindex="-1">什么是代理模式？ <a class="header-anchor" href="#什么是代理模式" aria-label="Permalink to &quot;什么是代理模式？&quot;">&ZeroWidthSpace;</a></h3>
<p>通过代理控制对象的访问，可以在这个对象调用方法之前、调用方法之后去处理/添加新的功能。(也就是AOP的微实现)</p>
<p>代理在原有代码乃至原业务流程都不修改的情况下，直接在业务流程中切入新代码，增加新功能，这也和 Spring 的（面向切面编程）很相似</p>
<h2 id="_3-18" tabindex="-1">3-18 <a class="header-anchor" href="#_3-18" aria-label="Permalink to &quot;3-18&quot;">&ZeroWidthSpace;</a></h2>
<h3 id="什么是工厂模式" tabindex="-1">什么是工厂模式？ <a class="header-anchor" href="#什么是工厂模式" aria-label="Permalink to &quot;什么是工厂模式？&quot;">&ZeroWidthSpace;</a></h3>
<p>定义一个创建对象的接口，让其子类自己决定实例化哪一个工厂类，工厂模式使其创建过程延迟到子类进行。
工厂模式提供了一种创建对象的最佳方式。在工厂模式中，我们在创建对象时不会对客户端暴露创建逻辑，并且是通过使用一个共同的接口来指向新创建的对象。
实现了创建者和调用者分离，工厂模式分为简单工厂、工厂方法、抽象工厂模式。</p>
<h2 id="_3-17" tabindex="-1">3-17 <a class="header-anchor" href="#_3-17" aria-label="Permalink to &quot;3-17&quot;">&ZeroWidthSpace;</a></h2>
<h3 id="单例模式有哪些创建方式" tabindex="-1">单例模式有哪些创建方式？ <a class="header-anchor" href="#单例模式有哪些创建方式" aria-label="Permalink to &quot;单例模式有哪些创建方式？&quot;">&ZeroWidthSpace;</a></h3>
<ul>
<li><strong>饿汉式:</strong> 类初始化时,会立即加载该对象，线程天生安全,调用效率高。</li>
<li><strong>懒汉式:</strong>  类初始化时,不会初始化该对象,真正需要使用的时候才会创建该对象,具备懒加载功能。</li>
<li><strong>静态内部方式:</strong> 结合了懒汉式和饿汉式各自的优点，真正需要对象的时候才会加载，加载类是线程安全的。</li>
<li><strong>枚举单例:</strong>  使用枚举实现单例模式 优点:实现简单、调用效率高，枚举本身就是单例，由jvm从根本上提供保障!避免通过反射和反序列化的漏洞， 缺点没有延迟加载。</li>
</ul>
<h2 id="_3-16" tabindex="-1">3-16 <a class="header-anchor" href="#_3-16" aria-label="Permalink to &quot;3-16&quot;">&ZeroWidthSpace;</a></h2>
<h3 id="什么是合成复用原则" tabindex="-1">什么是合成复用原则？ <a class="header-anchor" href="#什么是合成复用原则" aria-label="Permalink to &quot;什么是合成复用原则？&quot;">&ZeroWidthSpace;</a></h3>
<ul>
<li><strong>原则思想：</strong>  它要求在软件复用时，要尽量先使用组合或者聚合等关联关系来实现，其次才考虑使用继承关系来实现。</li>
<li><strong>描述：</strong> 合成复用原则是通过将已有的对象纳入新对象中，作为新对象的成员对象来实现的，新对象可以调用已有对象的功能，从而达到复用。</li>
<li><strong>优点：</strong> 它维持了类的封装性，新旧类之间的耦合度低，复用的灵活性高。</li>
</ul>
<h2 id="_3-15" tabindex="-1">3-15 <a class="header-anchor" href="#_3-15" aria-label="Permalink to &quot;3-15&quot;">&ZeroWidthSpace;</a></h2>
<h3 id="什么是迪米特法则" tabindex="-1">什么是迪米特法则？ <a class="header-anchor" href="#什么是迪米特法则" aria-label="Permalink to &quot;什么是迪米特法则？&quot;">&ZeroWidthSpace;</a></h3>
<blockquote>
<p>迪米特法则又称最少知识原则。</p>
</blockquote>
<ul>
<li><strong>原则思想：</strong> 一个对象应该对其他对象保持最少的了解。</li>
<li><strong>描述：</strong> 一个对象应该对其他对象保持最少的了解，即一个类对自己依赖的类知道的越少越好。也就是说，对于被依赖的类不管多么复杂，都应该将逻辑封装在类的内部，对外提供的方法越少越好。</li>
<li><strong>优点：</strong> 迪米特法则可以减少类间的耦合性，提高系统的稳定性，提高代码的可读性和可维护性。</li>
</ul>
<h2 id="_3-14" tabindex="-1">3-14 <a class="header-anchor" href="#_3-14" aria-label="Permalink to &quot;3-14&quot;">&ZeroWidthSpace;</a></h2>
<h3 id="什么是接口隔离原则" tabindex="-1">什么是接口隔离原则？ <a class="header-anchor" href="#什么是接口隔离原则" aria-label="Permalink to &quot;什么是接口隔离原则？&quot;">&ZeroWidthSpace;</a></h3>
<ul>
<li><strong>原则思想：</strong> 使用多个专门的接口，而不使用单一的总接口。</li>
<li><strong>描述：</strong> 接口隔离原则是指客户端不应该依赖它不需要的接口，即一个类对另一个类的依赖应该建立在最小的接口上。</li>
<li><strong>优点：</strong> 接口隔离原则可以减少类间的耦合性，提高系统的稳定性，提高代码的可读性和可维护性。</li>
</ul>
<h2 id="_3-13" tabindex="-1">3-13 <a class="header-anchor" href="#_3-13" aria-label="Permalink to &quot;3-13&quot;">&ZeroWidthSpace;</a></h2>
<h3 id="什么是依赖倒置原则" tabindex="-1">什么是依赖倒置原则？ <a class="header-anchor" href="#什么是依赖倒置原则" aria-label="Permalink to &quot;什么是依赖倒置原则？&quot;">&ZeroWidthSpace;</a></h3>
<ul>
<li><strong>原则思想：</strong> 面向接口编程，依赖于抽象而不依赖于具体。</li>
<li><strong>描述：</strong> 依赖倒置原则是指在设计软件结构时，高层模块不应该依赖于底层模块，二者都应该依赖于抽象。抽象不应该依赖于细节，细节应该依赖于抽象。</li>
<li><strong>优点：</strong> 依赖倒置原则可以减少类间的耦合性，提高系统的稳定性，提高代码的可读性和可维护性。</li>
</ul>
<h2 id="_3-12" tabindex="-1">3-12 <a class="header-anchor" href="#_3-12" aria-label="Permalink to &quot;3-12&quot;">&ZeroWidthSpace;</a></h2>
<h3 id="什么是里氏替换原则" tabindex="-1">什么是里氏替换原则？ <a class="header-anchor" href="#什么是里氏替换原则" aria-label="Permalink to &quot;什么是里氏替换原则？&quot;">&ZeroWidthSpace;</a></h3>
<ul>
<li><strong>原则思想：</strong> 使用的基类可以在任何地方使用继承的子类，完美的替换基类。</li>
<li><strong>描述：</strong> 子类可以扩展父类的功能，但不能改变父类原有的功能。子类可以实现父类的抽象方法，但不能覆盖父类的非抽象方法，子类中可以增加自己特有的方法。</li>
<li><strong>优点：</strong> 增加程序的健壮性，即使增加了子类，原有的子类还可以继续运行，互不影响。</li>
</ul>
<h2 id="_3-11" tabindex="-1">3-11 <a class="header-anchor" href="#_3-11" aria-label="Permalink to &quot;3-11&quot;">&ZeroWidthSpace;</a></h2>
<h3 id="什么是开放封闭原则" tabindex="-1">什么是开放封闭原则？ <a class="header-anchor" href="#什么是开放封闭原则" aria-label="Permalink to &quot;什么是开放封闭原则？&quot;">&ZeroWidthSpace;</a></h3>
<ul>
<li><strong>思想：</strong> 尽量通过扩展软件实体来解决需求变化，而不是通过修改已有的代码来完成变化</li>
<li><strong>描述：</strong> 一个软件产品在生命周期内，都会发生变化，既然变化是一个既定的事实，我们就应该在设计的时候尽量适应这些变化，以提高项目的稳定性和灵活性。</li>
<li><strong>优点：</strong> 单一原则告诉我们，每个类都有自己负责的职责，里氏替换原则不能破坏继承关系的体系。</li>
</ul>
<h2 id="_3-10" tabindex="-1">3-10 <a class="header-anchor" href="#_3-10" aria-label="Permalink to &quot;3-10&quot;">&ZeroWidthSpace;</a></h2>
<h3 id="设计模式的六大原则" tabindex="-1">设计模式的六大原则？ <a class="header-anchor" href="#设计模式的六大原则" aria-label="Permalink to &quot;设计模式的六大原则？&quot;">&ZeroWidthSpace;</a></h3>
<ol>
<li>开闭原则：对扩展开放，对修改关闭。</li>
<li>里氏替换原则：子类可以替换父类。</li>
<li>依赖倒置原则：面向接口编程，依赖于抽象而不依赖于具体。</li>
<li>接口隔离原则：使用多个专门的接口，而不使用单一的总接口。</li>
<li>迪米特法则：一个对象应该对其他对象保持最少的了解。</li>
<li>合成复用原则：尽量使用合成/聚合的方式，而不是使用继承。</li>
</ol>
<h2 id="_3-9" tabindex="-1">3-9 <a class="header-anchor" href="#_3-9" aria-label="Permalink to &quot;3-9&quot;">&ZeroWidthSpace;</a></h2>
<h3 id="设计模式有哪些" tabindex="-1">设计模式有哪些？ <a class="header-anchor" href="#设计模式有哪些" aria-label="Permalink to &quot;设计模式有哪些？&quot;">&ZeroWidthSpace;</a></h3>
<p>创建型模式，共五种：工厂方法模式、抽象工厂模式、单例模式、建造者模式、原型模式。</p>
<p>结构型模式，共七种：适配器模式、装饰器模式、代理模式、外观模式、桥接模式、组合模式、享元模式。</p>
<p>行为型模式，共十一种：策略模式、模板方法模式、观察者模式、迭代子模式、责任链模式、命令模式、备忘录模式、状态模式、访问者模式、中介者模式、解释器模式。</p>
<h2 id="_3-8" tabindex="-1">3-8 <a class="header-anchor" href="#_3-8" aria-label="Permalink to &quot;3-8&quot;">&ZeroWidthSpace;</a></h2>
<h3 id="设计模式有哪些类别" tabindex="-1">设计模式有哪些类别？ <a class="header-anchor" href="#设计模式有哪些类别" aria-label="Permalink to &quot;设计模式有哪些类别？&quot;">&ZeroWidthSpace;</a></h3>
<p>设计模式有 23 种，分为创建型模式、结构型模式和行为型模式。</p>
<h2 id="_3-7" tabindex="-1">3-7 <a class="header-anchor" href="#_3-7" aria-label="Permalink to &quot;3-7&quot;">&ZeroWidthSpace;</a></h2>
<h3 id="什么是设计模式" tabindex="-1">什么是设计模式? <a class="header-anchor" href="#什么是设计模式" aria-label="Permalink to &quot;什么是设计模式?&quot;">&ZeroWidthSpace;</a></h3>
<p>设计模式是一套被反复使用、多数人知晓的、经过分类编目的、代码设计经验的总结。</p>
<p>使用设计模式是为了可重用代码、让代码更容易被理解、保证代码的可靠性、程序的可维护性。</p>
<h2 id="_3-6" tabindex="-1">3-6 <a class="header-anchor" href="#_3-6" aria-label="Permalink to &quot;3-6&quot;">&ZeroWidthSpace;</a></h2>
<h3 id="mybatis-plus-有哪些主要的-api" tabindex="-1">Mybatis Plus 有哪些主要的 API？ <a class="header-anchor" href="#mybatis-plus-有哪些主要的-api" aria-label="Permalink to &quot;Mybatis Plus 有哪些主要的 API？&quot;">&ZeroWidthSpace;</a></h3>
<ul>
<li>Wrapper API：条件构造器，用于构造查询条件。包括 QueryWrapper、UpdateWrapper、LambdaQueryWrapper、LambdaUpdateWrapper。</li>
<li>Service API：Service 接口，用于定义 Service 层的接口。</li>
<li>Page API：分页插件，用于分页查询。</li>
<li>Entity API：实体类接口，用于定义实体类。</li>
</ul>
<h2 id="_3-5" tabindex="-1">3-5 <a class="header-anchor" href="#_3-5" aria-label="Permalink to &quot;3-5&quot;">&ZeroWidthSpace;</a></h2>
<h3 id="什么是-mybatis-plus" tabindex="-1">什么是 Mybatis Plus？ <a class="header-anchor" href="#什么是-mybatis-plus" aria-label="Permalink to &quot;什么是 Mybatis Plus？&quot;">&ZeroWidthSpace;</a></h3>
<p>Mybatis Plus 是 Mybatis 的增强工具包，它是在 Mybatis 的基础上进行了扩展，简化了 Mybatis 的开发，提供了很多实用的功能，
比如分页、逻辑删除、自动填充、性能分析等。</p>
<h2 id="_3-4" tabindex="-1">3-4 <a class="header-anchor" href="#_3-4" aria-label="Permalink to &quot;3-4&quot;">&ZeroWidthSpace;</a></h2>
<h3 id="mybatis-的接口绑定和实现方式" tabindex="-1">MyBatis 的接口绑定和实现方式 <a class="header-anchor" href="#mybatis-的接口绑定和实现方式" aria-label="Permalink to &quot;MyBatis 的接口绑定和实现方式&quot;">&ZeroWidthSpace;</a></h3>
<p>接口绑定是指在 Mybatis 中任意定义接口，然后把接口中的方法和 SQL 语句绑定，我们直接调用接口方法就可以，
这样比原来 SqlSession 提供的方法更加直观和简洁，也可以更加灵活。</p>
<p>实现方式如下：</p>
<ul>
<li>注解绑定，就是在接口的方法上加<code> @Select</code>，<code>@Update</code> 等注解。</li>
<li>XML 绑定，就是在 XML 文件中定义接口的方法和 SQL 语句的映射关系。</li>
</ul>
<h2 id="_3-3" tabindex="-1">3-3 <a class="header-anchor" href="#_3-3" aria-label="Permalink to &quot;3-3&quot;">&ZeroWidthSpace;</a></h2>
<h3 id="请描述-mybatis-的动态-sql。" tabindex="-1">请描述 Mybatis 的动态 SQL。 <a class="header-anchor" href="#请描述-mybatis-的动态-sql。" aria-label="Permalink to &quot;请描述 Mybatis 的动态 SQL。&quot;">&ZeroWidthSpace;</a></h3>
<p>Mybatis 的动态 SQL 是通过<code>标签来实现的，</code>标签可以根据条件来动态拼接 SQL 语句。</p>
<ul>
<li>if 标签：判断条件是否成立，成立则拼接 SQL 语句。</li>
<li>choose 标签：类似于 Java 中的 switch 语句，根据条件来选择拼接 SQL 语句。</li>
<li>when 标签：配合 choose 标签使用，表示条件成立时拼接 SQL 语句。</li>
<li>otherwise 标签：配合 choose 标签使用，表示条件不成立时拼接 SQL 语句。</li>
<li>trim 标签：去除 SQL 语句中的多余字符。</li>
<li>where 标签：配合 trim 标签使用，去除 SQL 语句中的多余字符。</li>
<li>set 标签：配合 trim 标签使用，去除 SQL 语句中的多余字符。</li>
<li>foreach 标签：遍历集合，拼接 SQL 语句。</li>
</ul>
<h2 id="_3-2" tabindex="-1">3-2 <a class="header-anchor" href="#_3-2" aria-label="Permalink to &quot;3-2&quot;">&ZeroWidthSpace;</a></h2>
<h3 id="请描述-mybatis-的缓存机制。" tabindex="-1">请描述 Mybatis 的缓存机制。 <a class="header-anchor" href="#请描述-mybatis-的缓存机制。" aria-label="Permalink to &quot;请描述 Mybatis 的缓存机制。&quot;">&ZeroWidthSpace;</a></h3>
<p>Mybatis 的缓存机制分为一级缓存和二级缓存。</p>
<p><strong>一级缓存</strong> 是 SqlSession 级别的缓存，当调用 SqlSession 的查询方法时，Mybatis 会将查询结果放入到缓存中，
当再次查询相同的数据时，直接从缓存中获取，不会再次查询数据库。</p>
<p><strong>二级缓存</strong> 是 Mapper 级别的缓存，多个 SqlSession 共享同一个 Mapper 的二级缓存，当调用 SqlSession 的查询方法时，
Mybatis 会将查询结果放入到缓存中，当再次查询相同的数据时，直接从缓存中获取，不会再次查询数据库。</p>
<h2 id="_3-1" tabindex="-1">3-1 <a class="header-anchor" href="#_3-1" aria-label="Permalink to &quot;3-1&quot;">&ZeroWidthSpace;</a></h2>
<h3 id="mybatis-实现一对一有几种方式" tabindex="-1">MyBatis 实现一对一有几种方式? <a class="header-anchor" href="#mybatis-实现一对一有几种方式" aria-label="Permalink to &quot;MyBatis 实现一对一有几种方式?&quot;">&ZeroWidthSpace;</a></h3>
<p>有联合查询和嵌套查询。</p>
<p><strong>联合查询</strong> 是几个表联合查询,只查询一次, 通过在resultMap里面配置association节点配置一对一的类就可以完成；</p>
<p><strong>嵌套查询</strong> 是先查一个表，根据这个表里面的结果的 外键 id，去再另外一个表里面查询数据,也是通过 association 配置，但另外一个表的查询通过 select 属性配置。</p>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[每日一题 - 2024]]></title>
            <link>https://www.imufeng.cn/interview/question-by-day/2024/</link>
            <guid>https://www.imufeng.cn/interview/question-by-day/2024/</guid>
            <pubDate>Mon, 25 Mar 2024 08:19:18 GMT</pubDate>
            <description><![CDATA[每天至少一道面试题，范围不限，欢迎留言监督。]]></description>
            <content:encoded><![CDATA[<blockquote>
<p>每日一题从 <code>2023年09月27日</code> 开始记录，2024年的在这里，之前的请<a href="./../">点击查看</a>。</p>
</blockquote>
<h3 id="目录" tabindex="-1">目录 <a class="header-anchor" href="#目录" aria-label="Permalink to &quot;目录&quot;">&ZeroWidthSpace;</a></h3>
<table>
<thead>
<tr>
<th>时间</th>
<th>问题</th>
</tr>
</thead>
<tbody>
<tr>
<td>04/25</td>
<td><a href="./3.html#_3-25">什么是 NIO？</a></td>
</tr>
<tr>
<td>03/24</td>
<td><a href="./3.html#_3-24">什么是 BIO？</a></td>
</tr>
<tr>
<td>03/23</td>
<td><a href="./3.html#_3-23">JAVA 中有哪些流？</a></td>
</tr>
<tr>
<td>03/22</td>
<td><a href="./3.html#_3-22">什么是动态代理？</a></td>
</tr>
<tr>
<td>03/21</td>
<td><a href="./3.html#_3-21">什么是静态代理？</a></td>
</tr>
<tr>
<td>03/20</td>
<td><a href="./3.html#_3-20">代理模式的分类？</a></td>
</tr>
<tr>
<td>03/19</td>
<td><a href="./3.html#_3-19">什么是代理模式？</a></td>
</tr>
<tr>
<td>03/18</td>
<td><a href="./3.html#_3-18">什么是工厂模式？</a></td>
</tr>
<tr>
<td>03/17</td>
<td><a href="./3.html#_3-17">单例模式有哪些创建方式？</a></td>
</tr>
<tr>
<td>03/16</td>
<td><a href="./3.html#_3-16">什么是合成复用原则？</a></td>
</tr>
<tr>
<td>03/15</td>
<td><a href="./3.html#_3-15">什么是迪米特法则？</a></td>
</tr>
<tr>
<td>03/14</td>
<td><a href="./3.html#_3-14">什么是接口隔离原则？</a></td>
</tr>
<tr>
<td>03/13</td>
<td><a href="./3.html#_3-13">什么是依赖倒置原则？</a></td>
</tr>
<tr>
<td>03/12</td>
<td><a href="./3.html#_3-12">什么是里氏替换原则？</a></td>
</tr>
<tr>
<td>03/11</td>
<td><a href="./3.html#_3-11">什么是开放封闭原则？</a></td>
</tr>
<tr>
<td>03/10</td>
<td><a href="./3.html#_3-10">设计模式的六大原则？</a></td>
</tr>
<tr>
<td>03/09</td>
<td><a href="./3.html#_3-9">设计模式有哪些？</a></td>
</tr>
<tr>
<td>03/08</td>
<td><a href="./3.html#_3-8">设计模式有哪些类别？</a></td>
</tr>
<tr>
<td>03/07</td>
<td><a href="./3.html#_3-7">什么是设计模式?</a></td>
</tr>
<tr>
<td>03/06</td>
<td><a href="./3.html#_3-6">Mybatis Plus 有哪些主要的 API？</a></td>
</tr>
<tr>
<td>03/05</td>
<td><a href="./3.html#_3-5">什么是 Mybatis Plus？</a></td>
</tr>
<tr>
<td>03/04</td>
<td><a href="./3.html#_3-4">Mybatis 的动态 SQL 是什么？</a></td>
</tr>
<tr>
<td>03/03</td>
<td><a href="./3.html#_3-3">请描述 Mybatis 的动态 SQL。</a></td>
</tr>
<tr>
<td>03/02</td>
<td><a href="./3.html#_3-2">请描述 Mybatis 的缓存机制。</a></td>
</tr>
<tr>
<td>03/01</td>
<td><a href="./3.html#_3-1">MyBatis 实现一对一有几种方式?</a></td>
</tr>
<tr>
<td>02/29</td>
<td><a href="./2.html#_2-29">Mybatis 如何将查询结果封装为对象？</a></td>
</tr>
<tr>
<td>02/28</td>
<td><a href="./2.html#_2-28">Dao 接口的工作原理是什么</a></td>
</tr>
<tr>
<td>02/27</td>
<td><a href="./2.html#_2-27">Mybatis 查询时当实体类中的属性名和表中的字段名不一样，怎么办？</a></td>
</tr>
<tr>
<td>02/26</td>
<td><a href="./2.html#_2-26">Mybatis 中 <code>#{}</code> 和 <code>${}</code> 的区别是什么？</a></td>
</tr>
<tr>
<td>02/25</td>
<td><a href="./2.html#_2-25">什么是 ORM？</a></td>
</tr>
<tr>
<td>02/24</td>
<td><a href="./2.html#_2-24">什么是数据持久化？</a></td>
</tr>
<tr>
<td>02/23</td>
<td><a href="./2.html#_2-23">怎么确保一个集合不能被修改？</a></td>
</tr>
<tr>
<td>02/22</td>
<td><a href="./2.html#_2-22">Iterator 是什么？</a></td>
</tr>
<tr>
<td>02/21</td>
<td><a href="./2.html#_2-21">什么是散列表？</a></td>
</tr>
<tr>
<td>02/20</td>
<td><a href="./2.html#_2-20">HashMap 是怎么解决 hash 冲突的？</a></td>
</tr>
<tr>
<td>02/19</td>
<td><a href="./2.html#_2-19">简述快速排序的过程。</a></td>
</tr>
<tr>
<td>02/18</td>
<td><a href="./2.html#_2-18">ArrayList 和 LinkedList 的区别是什么？</a></td>
</tr>
<tr>
<td>02/17</td>
<td><a href="./2.html#_2-17">HashMap 的实现原理？</a></td>
</tr>
<tr>
<td>02/16</td>
<td><a href="./2.html#_2-16">HashSet 的实现原理？</a></td>
</tr>
<tr>
<td>02/15</td>
<td><a href="./2.html#_2-15">如何决定使用 HashMap 还是 TreeMap？</a></td>
</tr>
<tr>
<td>02/14</td>
<td><a href="./2.html#_2-14">HashMap 和 HashTable 的区别？</a></td>
</tr>
<tr>
<td>02/13</td>
<td><a href="./2.html#_2-13">HashMap 什么样的类适合作为键？</a></td>
</tr>
<tr>
<td>02/12</td>
<td><a href="./2.html#_2-12">List 和 Map 的区别？</a></td>
</tr>
<tr>
<td>02/11</td>
<td><a href="./2.html#_2-11">（力扣题库）计算数组最大连续 1 的个数。</a></td>
</tr>
<tr>
<td>02/10</td>
<td><a href="./2.html#_2-10">什么是栈，什么是队列？</a></td>
</tr>
<tr>
<td>02/09</td>
<td><a href="./2.html#_2-9">什么是快速失败和安全失败机制？</a></td>
</tr>
<tr>
<td>02/08</td>
<td><a href="./2.html#_2-8">ArrayList 底层是什么？</a></td>
</tr>
<tr>
<td>02/07</td>
<td><a href="./2.html#_2-7">JAVA 集合有哪些类？</a></td>
</tr>
<tr>
<td>02/06</td>
<td><a href="./2.html#_2-6">所有的 final 修饰的字段都是编译期常量吗?</a></td>
</tr>
<tr>
<td>02/05</td>
<td><a href="./2.html#_2-5">什么是重复注解？</a></td>
</tr>
<tr>
<td>02/04</td>
<td><a href="./2.html#_2-4">什么是类型注解？</a></td>
</tr>
<tr>
<td>02/03</td>
<td><a href="./2.html#_2-3">Optional 要解决什么问题？</a></td>
</tr>
<tr>
<td>02/02</td>
<td><a href="./2.html#_2-2">什么是 FunctionalInterface？</a></td>
</tr>
<tr>
<td>02/01</td>
<td><a href="./2.html#_2-1">类加载的生命周期？</a></td>
</tr>
<tr>
<td>01/31</td>
<td><a href="./1.html#_1-31">什么是同步？</a></td>
</tr>
<tr>
<td>01/30</td>
<td><a href="./1.html#_1-30">什么是阻塞？</a></td>
</tr>
<tr>
<td>01/29</td>
<td><a href="./1.html#_1-29">如何理解 IO 流？</a></td>
</tr>
<tr>
<td>01/28</td>
<td><a href="./1.html#_1-28">描述异常的底层？</a></td>
</tr>
<tr>
<td>01/27</td>
<td><a href="./1.html#_1-27">Java 7 的 try-with-resource?</a></td>
</tr>
<tr>
<td>01/26</td>
<td><a href="./1.html#_1-26">JAVA throw 和 throws 的区别？</a></td>
</tr>
<tr>
<td>01/25</td>
<td><a href="./1.html#_1-25">getName、getCanonicalName 与 getSimpleName 的区别?</a></td>
</tr>
<tr>
<td>01/24</td>
<td><a href="./1.html#_1-24">什么是反射？</a></td>
</tr>
<tr>
<td>01/23</td>
<td><a href="./1.html#_1-23">Quartz 是做什么用的？</a></td>
</tr>
<tr>
<td>01/22</td>
<td><a href="./1.html#_1-22">如何限制规定泛型的范围？</a></td>
</tr>
<tr>
<td>01/21</td>
<td><a href="./1.html#_1-21">泛型类如何定义使用？</a></td>
</tr>
<tr>
<td>01/20</td>
<td><a href="./1.html#_1-20">this() &amp; super() 在构造方法中的区别？</a></td>
</tr>
<tr>
<td>01/19</td>
<td><a href="./1.html#_1-19">什么是 Java 移位运算符？</a></td>
</tr>
<tr>
<td>01/18</td>
<td><a href="./1.html#_1-18">JAVA 能在 Switch 中使用 String 吗?</a></td>
</tr>
<tr>
<td>01/17</td>
<td><a href="./1.html#_1-17">为什么 DNS 通常基于 UDP？</a></td>
</tr>
<tr>
<td>01/16</td>
<td><a href="./1.html#_1-16">TCP 三次握手中，最后一次回复丢失，会发生什么？</a></td>
</tr>
<tr>
<td>01/15</td>
<td><a href="./1.html#_1-15">什么是 TCP 三次握手？</a></td>
</tr>
<tr>
<td>01/14</td>
<td><a href="./1.html#_1-14">什么是754层网络模型？</a></td>
</tr>
<tr>
<td>01/13</td>
<td><a href="./1.html#_1-13">什么是日志系统和日志门面？</a></td>
</tr>
<tr>
<td>01/12</td>
<td><a href="./1.html#_1-12">什么是 JWT？</a></td>
</tr>
<tr>
<td>01/11</td>
<td><a href="./1.html#_1-11">Spring Security 的原理？</a></td>
</tr>
<tr>
<td>01/10</td>
<td><a href="./1.html#_1-10">什么是 Spring Security？</a></td>
</tr>
<tr>
<td>01/09</td>
<td><a href="./1.html#_1-9">谈谈你对 CGLib 的理解？</a></td>
</tr>
<tr>
<td>01/08</td>
<td><a href="./1.html#_1-8">有哪些AOP Advice通知的类型？</a></td>
</tr>
<tr>
<td>01/07</td>
<td><a href="./1.html#_1-7">AOP 包含的几个概念?</a></td>
</tr>
<tr>
<td>01/06</td>
<td><a href="./1.html#_1-6">列举一些重要的Spring模块。</a></td>
</tr>
<tr>
<td>01/05</td>
<td><a href="./1.html#_1-5">什么是监听器？</a></td>
</tr>
<tr>
<td>01/04</td>
<td><a href="./1.html#_1-4">什么是拦截器？</a></td>
</tr>
<tr>
<td>01/03</td>
<td><a href="./1.html#_1-3">Spring Boot 的默认编码是？</a></td>
</tr>
<tr>
<td>01/02</td>
<td><a href="./1.html#_1-2">Spring Boot 应用如何优雅关闭？</a></td>
</tr>
<tr>
<td>01/01</td>
<td><a href="./1.html#_1-1">Spring Boot 怎么注册事件监听器？</a></td>
</tr>
</tbody>
</table>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[重学JAVA设计模式]]></title>
            <link>https://www.imufeng.cn/full-stack/java/design-patterns/</link>
            <guid>https://www.imufeng.cn/full-stack/java/design-patterns/</guid>
            <pubDate>Mon, 25 Mar 2024 07:49:17 GMT</pubDate>
            <description><![CDATA[设计模式（Design Patterns），是一套被反复使用、多数人知晓的、经过分类的、代码设计经验的总结。使用设计模式是为了重用代码、让代码更容易被他人理解、保证代码可靠性。]]></description>
            <content:encoded><![CDATA[<h1 id="重学-java-设计模式" tabindex="-1">重学 JAVA 设计模式 <a class="header-anchor" href="#重学-java-设计模式" aria-label="Permalink to &quot;重学 JAVA 设计模式&quot;">&ZeroWidthSpace;</a></h1>
<h2 id="简介" tabindex="-1">简介 <a class="header-anchor" href="#简介" aria-label="Permalink to &quot;简介&quot;">&ZeroWidthSpace;</a></h2>
<p>为了尽量复用代码，降低代码的耦合度，基于面向对象编程（OOP）的设计模式应运而生。</p>
<p>设计模式（Design Patterns），是一套被反复使用、多数人知晓的、经过分类的、代码设计经验的总结。使用设计模式是为了重用代码、让代码更容易被他人理解、保证代码可靠性。</p>
<p>设计模式有以下几个原则：</p>
<ul>
<li>开闭原原则</li>
<li>里氏替换原则</li>
<li>依赖倒置原则</li>
<li>接口隔离原则</li>
<li>迪米特法则</li>
<li>合成复用原则</li>
<li>单一职责原则</li>
</ul>
<p>设计模式主要分为三大类：<strong>创建型模式</strong>、<strong>结构型模式</strong>、<strong>行为型模式</strong>。受到<a href="https://www.liaoxuefeng.com/wiki/1252599548343744/1264742167474528" target="_blank" rel="noreferrer">廖雪峰老师的教程</a>启发，
这一系列的博客将从这三个方面来学习设计模式，并做以记录。</p>
<h3 id="创建型模式" tabindex="-1">创建型模式 <a class="header-anchor" href="#创建型模式" aria-label="Permalink to &quot;创建型模式&quot;">&ZeroWidthSpace;</a></h3>
<ul>
<li><a href="./creation-mode/factory-method.html">工厂方法</a></li>
</ul>
<h3 id="结构型模式" tabindex="-1">结构型模式 <a class="header-anchor" href="#结构型模式" aria-label="Permalink to &quot;结构型模式&quot;">&ZeroWidthSpace;</a></h3>
<h3 id="行为型模式" tabindex="-1">行为型模式 <a class="header-anchor" href="#行为型模式" aria-label="Permalink to &quot;行为型模式&quot;">&ZeroWidthSpace;</a></h3>
]]></content:encoded>
        </item>
        <item>
            <link>https://www.imufeng.cn/full-stack/java/design-patterns/creation-mode/factory-method.html</link>
            <guid>https://www.imufeng.cn/full-stack/java/design-patterns/creation-mode/factory-method.html</guid>
            <pubDate>Mon, 25 Mar 2024 07:49:17 GMT</pubDate>
            <description><![CDATA[设计模式（Design Patterns），是一套被反复使用、多数人知晓的、经过分类的、代码设计经验的总结。使用设计模式是为了重用代码、让代码更容易被他人理解、保证代码可靠性。]]></description>
            <content:encoded><![CDATA[<h1 id="" tabindex="-1"> <a class="header-anchor" href="#" aria-label="Permalink to &quot;&quot;">&ZeroWidthSpace;</a></h1>
]]></content:encoded>
        </item>
        <item>
            <link>https://www.imufeng.cn/full-stack/java/design-patterns/creation-mode/singleton.html</link>
            <guid>https://www.imufeng.cn/full-stack/java/design-patterns/creation-mode/singleton.html</guid>
            <pubDate>Mon, 25 Mar 2024 07:49:17 GMT</pubDate>
            <description><![CDATA[在一个较为复杂的继承链中，祖先类更具有一般性，作为派生其他类的基类而不糊将其作为用来构造实例。]]></description>
        </item>
        <item>
            <title><![CDATA[每日一题 - 2023]]></title>
            <link>https://www.imufeng.cn/interview/question-by-day/2023/</link>
            <guid>https://www.imufeng.cn/interview/question-by-day/2023/</guid>
            <pubDate>Fri, 15 Mar 2024 08:14:35 GMT</pubDate>
            <description><![CDATA[每天至少一道面试题，范围不限。]]></description>
            <content:encoded><![CDATA[<blockquote>
<p>每日一题从 <code>2023年09月27日</code> 开始记录，不限分类，欢迎留言监督。</p>
</blockquote>
<h3 id="目录" tabindex="-1">目录 <a class="header-anchor" href="#目录" aria-label="Permalink to &quot;目录&quot;">&ZeroWidthSpace;</a></h3>
<table>
<thead>
<tr>
<th>时间</th>
<th>问题</th>
</tr>
</thead>
<tbody>
<tr>
<td>12/31</td>
<td><a href="./12.html#_12-31">Spring Boot 如何配置多个数据源？</a></td>
</tr>
<tr>
<td>12/30</td>
<td><a href="./12.html#_12-30">Spring Boot 如何定义不同环境配置？</a></td>
</tr>
<tr>
<td>12/29</td>
<td><a href="./12.html#_12-29">Spring Boot 配置加载顺序是怎样的？</a></td>
</tr>
<tr>
<td>12/28</td>
<td><a href="./12.html#_12-28">Spring Boot 有哪几种热部署方式？</a></td>
</tr>
<tr>
<td>12/27</td>
<td><a href="./12.html#_12-27">Spring Boot 怎么注册 Servlet？</a></td>
</tr>
<tr>
<td>12/26</td>
<td><a href="./12.html#_12-26">Spring Boot 中的 Starters 是什么？</a></td>
</tr>
<tr>
<td>12/25</td>
<td><a href="./12.html#_12-25">SpringBoot 如何开启自动注解？</a></td>
</tr>
<tr>
<td>12/24</td>
<td><a href="./12.html#_12-24">Spring Boot 自动配置原理是什么？</a></td>
</tr>
<tr>
<td>12/23</td>
<td><a href="./12.html#_12-23">Spring Boot 中的默认内嵌容器是？</a></td>
</tr>
<tr>
<td>12/22</td>
<td><a href="./12.html#_12-22">什么是 restful？</a></td>
</tr>
<tr>
<td>12/21</td>
<td><a href="./12.html#_12-21">SpringBoot 如何提供网络服务？</a></td>
</tr>
<tr>
<td>12/20</td>
<td><a href="./12.html#_12-20">SpringBoot 怎么解决跨域问题？</a></td>
</tr>
<tr>
<td>12/19</td>
<td><a href="./12.html#_12-19">SpringBoot 怎么根据指定条件注册 bean？</a></td>
</tr>
<tr>
<td>12/18</td>
<td><a href="./12.html#_12-18">Spring Boot 如何配置随机端口？</a></td>
</tr>
<tr>
<td>12/17</td>
<td><a href="./12.html#_12-17">Spring Boot 有哪几种运行方式？</a></td>
</tr>
<tr>
<td>12/16</td>
<td><a href="./12.html#_12-16">为什么要用 SpringBoot？</a></td>
</tr>
<tr>
<td>12/15</td>
<td><a href="./12.html#_12-15">Spring Boot 支持哪些日志框架？</a></td>
</tr>
<tr>
<td>12/14</td>
<td><a href="./12.html#_12-14">SpringBootApplication 由哪些注解组成？</a></td>
</tr>
<tr>
<td>12/13</td>
<td><a href="./12.html#_12-13">SpringBootApplication 由哪些注解组成？</a></td>
</tr>
<tr>
<td>12/12</td>
<td><a href="./12.html#_12-12">Spring Boot 是什么？</a></td>
</tr>
<tr>
<td>12/11</td>
<td><a href="./12.html#_12-11">Spring MVC 框架有什么用？</a></td>
</tr>
<tr>
<td>12/10</td>
<td><a href="./12.html#_12-10">Spring 框架用到了哪些设计模式？</a></td>
</tr>
<tr>
<td>12/09</td>
<td><a href="./12.html#_12-9">Spring 支持哪些事务管理类型？</a></td>
</tr>
<tr>
<td>12/08</td>
<td><a href="./12.html#_12-8">为什么不推荐使用 <code>@Autowired</code> 注解注入 bean？</a></td>
</tr>
<tr>
<td>12/07</td>
<td><a href="./12.html#_12-7">Spring 自动装配有哪些方式？</a></td>
</tr>
<tr>
<td>12/06</td>
<td><a href="./12.html#_12-6">Spring 装配是指什么？</a></td>
</tr>
<tr>
<td>12/05</td>
<td><a href="./12.html#_12-5">Spring 怎么注入 Java 集合类型？</a></td>
</tr>
<tr>
<td>12/04</td>
<td><a href="./12.html#_12-4">Spring @Required 注解有什么用？</a></td>
</tr>
<tr>
<td>12/03</td>
<td><a href="./12.html#_12-3">Spring @Autowired 注解有什么用？</a></td>
</tr>
<tr>
<td>12/02</td>
<td><a href="./12.html#_12-2">Spring Bean 的生命周期有哪些？</a></td>
</tr>
<tr>
<td>12/01</td>
<td><a href="./12.html#_12-1">请描述 bean 的作用域。</a></td>
</tr>
<tr>
<td>11/30</td>
<td><a href="./11.html#_11-30">依赖注入的方法有哪些？</a></td>
</tr>
<tr>
<td>11/29</td>
<td><a href="./11.html#_11-29">BeanFactory 和 FactoryBean 的区别？</a></td>
</tr>
<tr>
<td>11/28</td>
<td><a href="./11.html#_11-28">描述 Bean 的生命周期.</a></td>
</tr>
<tr>
<td>11/27</td>
<td><a href="./11.html#_11-27">什么是 BeanDefinition？</a></td>
</tr>
<tr>
<td>11/26</td>
<td><a href="./11.html#_11-26">描述 Spring 的两种 IOC 容器。</a></td>
</tr>
<tr>
<td>11/25</td>
<td><a href="./11.html#_11-25">请描述 Spring AOP 的动态代理。</a></td>
</tr>
<tr>
<td>11/24</td>
<td><a href="./11.html#_11-24">描述 AOP 的两种实现方式。</a></td>
</tr>
<tr>
<td>11/23</td>
<td><a href="./11.html#_11-23">CountDownLatch 和 CyclicBarrier 的区别。</a></td>
</tr>
<tr>
<td>11/22</td>
<td><a href="./11.html#_11-22">什么是 CyclicBarrier？</a></td>
</tr>
<tr>
<td>11/21</td>
<td><a href="./11.html#_11-21">什么是 CountdownLatch？</a></td>
</tr>
<tr>
<td>11/20</td>
<td><a href="./11.html#_11-20">线程池都有哪些状态？</a></td>
</tr>
<tr>
<td>11/19</td>
<td><a href="./11.html#_11-19">notify() 和 notifyAll() 有什么区别？</a></td>
</tr>
<tr>
<td>11/18</td>
<td><a href="./11.html#_11-18">sleep() 和 wait() 有什么区别？</a></td>
</tr>
<tr>
<td>11/17</td>
<td><a href="./11.html#_11-17">ThreadLocal 内存泄漏原因，如何避免？</a></td>
</tr>
<tr>
<td>11/16</td>
<td><a href="./11.html#_11-16">线程之间如何进行通信？</a></td>
</tr>
<tr>
<td>11/15</td>
<td><a href="./11.html#_11-15">什么是 ThreadLocal？</a></td>
</tr>
<tr>
<td>11/14</td>
<td><a href="./11.html#_11-14">synchronized 关键字的作用？</a></td>
</tr>
<tr>
<td>11/13</td>
<td><a href="./11.html#_11-13">线程池有几种创建方式？</a></td>
</tr>
<tr>
<td>11/12</td>
<td><a href="./11.html#_11-12">线程的 run()和 start()有什么区别？</a></td>
</tr>
<tr>
<td>11/11</td>
<td><a href="./11.html#_11-11">守护线程与用户线程有什么区别？</a></td>
</tr>
<tr>
<td>11/10</td>
<td><a href="./11.html#_11-10">主线程是不是守护线程？</a></td>
</tr>
<tr>
<td>11/09</td>
<td><a href="./11.html#_11-8">什么是守护线程？</a></td>
</tr>
<tr>
<td>11/08</td>
<td><a href="./11.html#_11-8">线程的状态有哪些？</a></td>
</tr>
<tr>
<td>11/07</td>
<td><a href="./11.html#_11-7">创建线程有哪几种方式？</a></td>
</tr>
<tr>
<td>11/06</td>
<td><a href="./11.html#_11-6">都有哪些原子类？请举例说明。</a></td>
</tr>
<tr>
<td>11/05</td>
<td><a href="./11.html#_11-5">什么是原子操作?</a></td>
</tr>
<tr>
<td>11/04</td>
<td><a href="./11.html#_11-4">execute 与 submit 的用法与区别。</a></td>
</tr>
<tr>
<td>11/03</td>
<td><a href="./11.html#_11-3">Runnable 与 Callable 的区别。</a></td>
</tr>
<tr>
<td>11/02</td>
<td><a href="./11.html#_11-2">请描述 Executor 框架的执行过程。</a></td>
</tr>
<tr>
<td>11/01</td>
<td><a href="./11.html#_11-1">说一说你理解的 Executor 框架。</a></td>
</tr>
<tr>
<td>10/31</td>
<td><a href="./10.html#_10-31">什么是原子操作？</a></td>
</tr>
<tr>
<td>10/30</td>
<td><a href="./10.html#_10-30">为什么使用Executor框架？</a></td>
</tr>
<tr>
<td>10/29</td>
<td><a href="./10.html#_10-29">什么是Executor框架？</a></td>
</tr>
<tr>
<td>10/28</td>
<td><a href="./10.html#_10-28">什么是线程组？</a></td>
</tr>
<tr>
<td>10/27</td>
<td><a href="./10.html#_10-27">产生死锁的必要条件。</a></td>
</tr>
<tr>
<td>10/26</td>
<td><a href="./10.html#_10-26">什么是上下文切换？</a></td>
</tr>
<tr>
<td>10/25</td>
<td><a href="./10.html#_10-25">如何停止一个正在运行的线程？</a></td>
</tr>
<tr>
<td>10/24</td>
<td><a href="./10.html#_10-24">出现线程不安全的本质什么？</a></td>
</tr>
<tr>
<td>10/23</td>
<td><a href="./10.html#_10-23">AOP 的实现方式？</a></td>
</tr>
<tr>
<td>10/22</td>
<td><a href="./10.html#_10-22">什么是 AOP？</a></td>
</tr>
<tr>
<td>10/21</td>
<td><a href="./10.html#_10-21">什么是 IOC？</a></td>
</tr>
<tr>
<td>10/20</td>
<td><a href="./10.html#_10-20">请简单介绍JAVA8新特性？</a></td>
</tr>
<tr>
<td>10/19</td>
<td><a href="./10.html#_10-19">Integer和int的区别？</a></td>
</tr>
<tr>
<td>10/18</td>
<td><a href="./10.html#_10-18">抽象类和接口的区别？</a></td>
</tr>
<tr>
<td>10/17</td>
<td><a href="./10.html#_10-17">构造器是否可被重写？</a></td>
</tr>
<tr>
<td>10/16</td>
<td><a href="./10.html#_10-16">请描述 &amp; 和 &amp;&amp; 的区别。</a></td>
</tr>
<tr>
<td>10/15</td>
<td><a href="./10.html#_10-15">请描述面向对象的特征。</a></td>
</tr>
<tr>
<td>10/14</td>
<td><a href="./10.html#_10-14">Java 中 throw 和 throws 区别？</a></td>
</tr>
<tr>
<td>10/13</td>
<td><a href="./10.html#_10-13">运行时异常与受检异常有何异同？</a></td>
</tr>
<tr>
<td>10/12</td>
<td><a href="./10.html#_10-12">是否可以继承String类？</a></td>
</tr>
<tr>
<td>10/11</td>
<td><a href="./10.html#_10-11">String 类的长度有限制吗？</a></td>
</tr>
<tr>
<td>10/10</td>
<td><a href="./10.html#_10-10">什么是<strong>节流</strong>和<strong>防抖</strong>？应用场景有哪些？</a></td>
</tr>
<tr>
<td>10/09</td>
<td><a href="./10.html#_10-9">请描述 static 修饰符</a></td>
</tr>
<tr>
<td>10/08</td>
<td><a href="./10.html#_10-8">请描述修饰符、访问修饰符，非访问修饰符。</a></td>
</tr>
<tr>
<td>10/07</td>
<td><a href="./10.html#_10-7">什么是方法签名？</a></td>
</tr>
<tr>
<td>10/06</td>
<td><a href="./10.html#_10-6">重载和重写是什么意思？有什么区别？</a></td>
</tr>
<tr>
<td>10/05</td>
<td><a href="./10.html#_10-5">String、StringBuilder、StringBuffer 的区别及使用场景？</a></td>
</tr>
<tr>
<td>10/04</td>
<td><a href="./10.html#_10-4">请描述 <code>instanceof</code> 关键字。</a></td>
</tr>
<tr>
<td>10/03</td>
<td><a href="./10.html#_10-3"><code>==</code> 与 <code>equals</code> 的区别是什么？</a></td>
</tr>
<tr>
<td>10/02</td>
<td><a href="./10.html#_10-2"><code>3*0.1 == 0.3</code> 将会返回什么?</a></td>
</tr>
<tr>
<td>10/01</td>
<td><a href="./10.html#_10-1">请详述 <code>JDK</code> <code>JRE</code> <code>JVM</code> 等的关系。</a></td>
</tr>
<tr>
<td>09/30</td>
<td><a href="./9.html#_9-30">Java中的重载和重写有什么区别？</a></td>
</tr>
<tr>
<td>09/29</td>
<td><a href="./9.html#_9-29">Java中的四种访问修饰符是什么？</a></td>
</tr>
<tr>
<td>09/28</td>
<td><a href="./9.html#_9-28">请用 JAVA 写一个冒泡排序？</a></td>
</tr>
<tr>
<td>09/27</td>
<td><a href="./9.html#_9-27">什么是前后端分离？</a></td>
</tr>
</tbody>
</table>
]]></content:encoded>
        </item>
        <item>
            <link>https://www.imufeng.cn/interview/question-by-day/2024/10.html</link>
            <guid>https://www.imufeng.cn/interview/question-by-day/2024/10.html</guid>
            <pubDate>Fri, 15 Mar 2024 08:14:35 GMT</pubDate>
        </item>
        <item>
            <link>https://www.imufeng.cn/interview/question-by-day/2024/11.html</link>
            <guid>https://www.imufeng.cn/interview/question-by-day/2024/11.html</guid>
            <pubDate>Fri, 15 Mar 2024 08:14:35 GMT</pubDate>
        </item>
        <item>
            <link>https://www.imufeng.cn/interview/question-by-day/2024/12.html</link>
            <guid>https://www.imufeng.cn/interview/question-by-day/2024/12.html</guid>
            <pubDate>Fri, 15 Mar 2024 08:14:35 GMT</pubDate>
        </item>
        <item>
            <link>https://www.imufeng.cn/interview/question-by-day/2024/4.html</link>
            <guid>https://www.imufeng.cn/interview/question-by-day/2024/4.html</guid>
            <pubDate>Fri, 15 Mar 2024 08:14:35 GMT</pubDate>
        </item>
        <item>
            <link>https://www.imufeng.cn/interview/question-by-day/2024/5.html</link>
            <guid>https://www.imufeng.cn/interview/question-by-day/2024/5.html</guid>
            <pubDate>Fri, 15 Mar 2024 08:14:35 GMT</pubDate>
        </item>
        <item>
            <link>https://www.imufeng.cn/interview/question-by-day/2024/6.html</link>
            <guid>https://www.imufeng.cn/interview/question-by-day/2024/6.html</guid>
            <pubDate>Fri, 15 Mar 2024 08:14:35 GMT</pubDate>
        </item>
        <item>
            <link>https://www.imufeng.cn/interview/question-by-day/2024/7.html</link>
            <guid>https://www.imufeng.cn/interview/question-by-day/2024/7.html</guid>
            <pubDate>Fri, 15 Mar 2024 08:14:35 GMT</pubDate>
        </item>
        <item>
            <link>https://www.imufeng.cn/interview/question-by-day/2024/8.html</link>
            <guid>https://www.imufeng.cn/interview/question-by-day/2024/8.html</guid>
            <pubDate>Fri, 15 Mar 2024 08:14:35 GMT</pubDate>
        </item>
        <item>
            <link>https://www.imufeng.cn/interview/question-by-day/2024/9.html</link>
            <guid>https://www.imufeng.cn/interview/question-by-day/2024/9.html</guid>
            <pubDate>Fri, 15 Mar 2024 08:14:35 GMT</pubDate>
        </item>
        <item>
            <link>https://www.imufeng.cn/friend-link-list/</link>
            <guid>https://www.imufeng.cn/friend-link-list/</guid>
            <pubDate>Fri, 15 Mar 2024 07:48:47 GMT</pubDate>
            <content:encoded><![CDATA[<details class="details custom-block"><summary>友链申请格式</summary>
<ul>
<li>
<p><strong>站点名称：</strong> <code>沐风的小站</code></p>
</li>
<li>
<p><strong>站点地址：</strong> <code>https://imufeng.cn</code></p>
</li>
<li>
<p><strong>一句话：</strong> <code>但愿岁月如客，来去皆从容。</code></p>
</li>
<li>
<p><strong>头像链接：</strong> <code>https://cravatar.cn/avatar/f1dcdc8fa782b81824df5d67022e4d4a</code></p>
</li>
<li>
<p><strong>其他平台：</strong> <code>[Github/Twitter...](link)</code></p>
</li>
</ul>
</details>
<h3 id="膜拜大佬" tabindex="-1">膜拜大佬 <a class="header-anchor" href="#膜拜大佬" aria-label="Permalink to &quot;膜拜大佬&quot;">&ZeroWidthSpace;</a></h3>
<VPTeamMembers size="medium" :members="authoritys" /><h3 id="友链" tabindex="-1">友链 <a class="header-anchor" href="#友链" aria-label="Permalink to &quot;友链&quot;">&ZeroWidthSpace;</a></h3>
<VPTeamMembers size="small" :members="friends" />]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Linux企业级运维]]></title>
            <link>https://www.imufeng.cn/training/linux/</link>
            <guid>https://www.imufeng.cn/training/linux/</guid>
            <pubDate>Fri, 15 Mar 2024 07:48:47 GMT</pubDate>
            <content:encoded><![CDATA[<h1 id="linux-企业级运维" tabindex="-1">Linux 企业级运维 <a class="header-anchor" href="#linux-企业级运维" aria-label="Permalink to &quot;Linux 企业级运维&quot;">&ZeroWidthSpace;</a></h1>
<h2 id="目录" tabindex="-1">目录 <a class="header-anchor" href="#目录" aria-label="Permalink to &quot;目录&quot;">&ZeroWidthSpace;</a></h2>
<ol>
<li><a href="./acme-sh.html">使用 <code>acme.sh</code> 部署泛域名证书</a></li>
<li><a href="./linux-lamp/">LAMP 架构的编译安装</a></li>
<li><a href="./wordpress-by-docker-compose.html">WordPress 容器化部署</a></li>
</ol>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[软件工具分享]]></title>
            <link>https://www.imufeng.cn/training/software/</link>
            <guid>https://www.imufeng.cn/training/software/</guid>
            <pubDate>Fri, 15 Mar 2024 07:48:47 GMT</pubDate>
            <content:encoded><![CDATA[<h1 id="软件工具分享" tabindex="-1">软件工具分享 <a class="header-anchor" href="#软件工具分享" aria-label="Permalink to &quot;软件工具分享&quot;">&ZeroWidthSpace;</a></h1>
<h2 id="目录" tabindex="-1">目录 <a class="header-anchor" href="#目录" aria-label="Permalink to &quot;目录&quot;">&ZeroWidthSpace;</a></h2>
<ol>
<li><a href="./mysql-for-win-install.html">Mysql for Windows 安装及初始化</a></li>
</ol>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[MysqlforWindows安装及初始化]]></title>
            <link>https://www.imufeng.cn/training/software/mysql-for-win-install.html</link>
            <guid>https://www.imufeng.cn/training/software/mysql-for-win-install.html</guid>
            <pubDate>Fri, 15 Mar 2024 07:48:47 GMT</pubDate>
            <description><![CDATA[Mysql for Windows 安装及初始化。]]></description>
            <content:encoded><![CDATA[<h1 id="mysql-for-windows-安装及初始化" tabindex="-1">Mysql for Windows 安装及初始化 <a class="header-anchor" href="#mysql-for-windows-安装及初始化" aria-label="Permalink to &quot;Mysql for Windows 安装及初始化&quot;">&ZeroWidthSpace;</a></h1>
<h2 id="一、简介" tabindex="-1">一、简介 <a class="header-anchor" href="#一、简介" aria-label="Permalink to &quot;一、简介&quot;">&ZeroWidthSpace;</a></h2>
<p>Windows 安装 Mysql 主要还是为了本地调试的方便。8.x 的版本和 5.7 的版本安装过程大差不差，这里以 8.0.35（8.2版本发布前的最新版）举例。</p>
<h2 id="二、下载安装" tabindex="-1">二、下载安装 <a class="header-anchor" href="#二、下载安装" aria-label="Permalink to &quot;二、下载安装&quot;">&ZeroWidthSpace;</a></h2>
<p>Windows 端 Mysql 只需要在 <a href="https://dev.mysql.com/downloads/mysql/" target="_blank" rel="noreferrer">MySQL :: Download MySQL Community Server</a> 页面选择对应版本下载 mysql-xxx-winx64.zip，该压缩包为编译后文件，并非源码， 可以直接运行。</p>
<p>目录结构如下：</p>
<div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span>Directory: D:\Element\mysql-8.0.35</span></span>
<span class="line"><span></span></span>
<span class="line"><span>Mode                 LastWriteTime         Length Name</span></span>
<span class="line"><span>----                 -------------         ------ ----</span></span>
<span class="line"><span>da---            2024/1/4    15:00                bin</span></span>
<span class="line"><span>da---            2024/1/4    15:00                docs</span></span>
<span class="line"><span>da---            2024/1/4    15:00                include</span></span>
<span class="line"><span>da---            2024/1/4    15:00                lib</span></span>
<span class="line"><span>da---            2024/1/4    15:00                share</span></span>
<span class="line"><span>-a---          2023/10/12    19:45         279355 LICENSE</span></span>
<span class="line"><span>-a---          2023/10/12    19:45            666 README</span></span></code></pre>
</div><h2 id="四、配置" tabindex="-1">四、配置 <a class="header-anchor" href="#四、配置" aria-label="Permalink to &quot;四、配置&quot;">&ZeroWidthSpace;</a></h2>
<h3 id="配置环境变量" tabindex="-1">配置环境变量 <a class="header-anchor" href="#配置环境变量" aria-label="Permalink to &quot;配置环境变量&quot;">&ZeroWidthSpace;</a></h3>
<p>为方便 Mysql 服务的使用和管理，可以在 PATH 中加入 Mysql 的 bin 目录。</p>
<h3 id="修改配置文件" tabindex="-1">修改配置文件 <a class="header-anchor" href="#修改配置文件" aria-label="Permalink to &quot;修改配置文件&quot;">&ZeroWidthSpace;</a></h3>
<p>Mysql 配置默认读取自安装目录下 <code>my.ini</code>，如没有需要创建一个，Mysql 默认有一套配置，如端口默认为 3306 等，<code>my.ini</code> 并非必须，只需要在其中写明需要的配置即可，如下：</p>
<div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span>[mysqld]</span></span>
<span class="line"><span></span></span>
<span class="line"><span>lower_case_table_names=2</span></span></code></pre>
</div><blockquote>
<p>注意：此处 lower_case_table_names 有三种取值：</p>
<ul>
<li>0：表示表名区分大小写。</li>
<li>1：表示将表名转换为小写，但在比较时仍然区分大小写。</li>
<li>2：表示将表名转换为小写，并且在比较时也不区分大小写。</li>
</ul>
</blockquote>
<h3 id="初始化" tabindex="-1">初始化 <a class="header-anchor" href="#初始化" aria-label="Permalink to &quot;初始化&quot;">&ZeroWidthSpace;</a></h3>
<p>初始化 Mysql 需要管理员权限，需要管理员权限运行 Powershell 或 CMD。执行 <code>mysqld --initialize  --console</code> 既可初始化并在控制台显示密码。</p>
<p><code>Mysqld</code> 服务初始化过程如下：</p>
<div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span>PS D:\Element\mysql-8.0.35> ./bin/mysqld --initialize  --console</span></span>
<span class="line"><span>2024-01-04T07:08:20.705336Z 0 [System] [MY-013169] [Server] D:\Element\mysql-8.0.35\bin\mysqld.exe (mysqld 8.0.35) initializing of server in progress as process 3008</span></span>
<span class="line"><span>2024-01-04T07:08:20.730739Z 1 [System] [MY-013576] [InnoDB] InnoDB initialization has started.</span></span>
<span class="line"><span>2024-01-04T07:08:21.033652Z 1 [System] [MY-013577] [InnoDB] InnoDB initialization has ended.</span></span>
<span class="line"><span>2024-01-04T07:08:22.291288Z 6 [Note] [MY-010454] [Server] A temporary password is generated for root@localhost: /YlA-/3M_yny</span></span></code></pre>
</div><p>初始化完成后，会在 Mysql 安装目录生成一个 <code>data</code> 目录，即为 Mysql 数据存储目录。初始化日志最后一行显示的即为初始化的随机密码，权限为 <code>root@localhost</code>。</p>
<h3 id="安装服务" tabindex="-1">安装服务 <a class="header-anchor" href="#安装服务" aria-label="Permalink to &quot;安装服务&quot;">&ZeroWidthSpace;</a></h3>
<p>运行 <code>mysqld install</code> 即可在 Windows 系统中安装 Mysql 服务。</p>
<div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span>PS D:\Element\mysql-8.0.35> .\bin\mysqld install</span></span>
<span class="line"><span>Service successfully installed.</span></span></code></pre>
</div><h3 id="启动服务" tabindex="-1">启动服务 <a class="header-anchor" href="#启动服务" aria-label="Permalink to &quot;启动服务&quot;">&ZeroWidthSpace;</a></h3>
<p>可以使用 <code>net start mysql</code> 命令启动 Mysql 服务，如出现如下内容，即为启动成功：</p>
<div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span>PS C:\Users\mufeng> net start mysql</span></span>
<span class="line"><span>MySQL 服务正在启动 .</span></span>
<span class="line"><span>MySQL 服务已经启动成功。</span></span></code></pre>
</div><h3 id="测试" tabindex="-1">测试 <a class="header-anchor" href="#测试" aria-label="Permalink to &quot;测试&quot;">&ZeroWidthSpace;</a></h3>
<p>服务启动之后，即可连接 Mysql：</p>
<div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span>PS C:\Users\mufeng> mysql -uroot -p</span></span>
<span class="line"><span>Enter password: ************</span></span>
<span class="line"><span>Welcome to the MySQL monitor.  Commands end with ; or \g.</span></span>
<span class="line"><span>Your MySQL connection id is 8</span></span>
<span class="line"><span>Server version: 8.0.35</span></span>
<span class="line"><span></span></span>
<span class="line"><span>Copyright (c) 2000, 2023, Oracle and/or its affiliates.</span></span>
<span class="line"><span></span></span>
<span class="line"><span>Oracle is a registered trademark of Oracle Corporation and/or its</span></span>
<span class="line"><span>affiliates. Other names may be trademarks of their respective</span></span>
<span class="line"><span>owners.</span></span>
<span class="line"><span></span></span>
<span class="line"><span>Type 'help;' or '\h' for help. Type '\c' to clear the current input statement.</span></span>
<span class="line"><span></span></span>
<span class="line"><span>mysql></span></span></code></pre>
</div><h3 id="修改-mysql-默认密码" tabindex="-1">修改 Mysql 默认密码 <a class="header-anchor" href="#修改-mysql-默认密码" aria-label="Permalink to &quot;修改 Mysql 默认密码&quot;">&ZeroWidthSpace;</a></h3>
<p>Mysql 权限管理是基于 <code>域 + 用户 + 权限</code> 的方式，本地对安全性要求不高，此处修改 root 用户随处可以登录。</p>
<p>如下：</p>
<div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span>mysql> ALTER USER 'root'@'localhost' IDENTIFIED WITH mysql_native_password BY 'root';</span></span>
<span class="line"><span>Query OK, 0 rows affected (0.01 sec)</span></span>
<span class="line"><span>mysql> use mysql;</span></span>
<span class="line"><span>Database changed</span></span>
<span class="line"><span>mysql> update user set host = '%' where host = 'localhost' and user = 'root';</span></span>
<span class="line"><span>Query OK, 1 row affected (0.00 sec)</span></span>
<span class="line"><span>Rows matched: 1  Changed: 1  Warnings: 0</span></span></code></pre>
</div><p>测试：</p>
<div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span>PS C:\Users\mufeng> mysql -uroot -proot</span></span>
<span class="line"><span>mysql: [Warning] Using a password on the command line interface can be insecure.</span></span>
<span class="line"><span>Welcome to the MySQL monitor.  Commands end with ; or \g.</span></span>
<span class="line"><span>Your MySQL connection id is 10</span></span>
<span class="line"><span>Server version: 8.0.35 MySQL Community Server - GPL</span></span>
<span class="line"><span></span></span>
<span class="line"><span>Copyright (c) 2000, 2023, Oracle and/or its affiliates.</span></span>
<span class="line"><span></span></span>
<span class="line"><span>Oracle is a registered trademark of Oracle Corporation and/or its</span></span>
<span class="line"><span>affiliates. Other names may be trademarks of their respective</span></span>
<span class="line"><span>owners.</span></span>
<span class="line"><span></span></span>
<span class="line"><span>Type 'help;' or '\h' for help. Type '\c' to clear the current input statement.</span></span>
<span class="line"><span></span></span>
<span class="line"><span>mysql></span></span></code></pre>
</div><p>登录成功！至此，Mysql For Windows 安装完成。</p>
<h2 id="五、其他" tabindex="-1">五、其他 <a class="header-anchor" href="#五、其他" aria-label="Permalink to &quot;五、其他&quot;">&ZeroWidthSpace;</a></h2>
<h3 id="mysql-服务无法启动" tabindex="-1">Mysql 服务无法启动 <a class="header-anchor" href="#mysql-服务无法启动" aria-label="Permalink to &quot;Mysql 服务无法启动&quot;">&ZeroWidthSpace;</a></h3>
<p>Mysql 初始化顺序为先修改配置文件，再初始化，如果先初始化，然后修改了诸如忽略大小写等与现有数据冲突的配置，可能会造成无法启动。</p>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[第一步编译安装httpd服务器]]></title>
            <link>https://www.imufeng.cn/training/linux/linux-lamp/first.html</link>
            <guid>https://www.imufeng.cn/training/linux/linux-lamp/first.html</guid>
            <pubDate>Fri, 15 Mar 2024 07:48:47 GMT</pubDate>
            <content:encoded><![CDATA[<h1 id="第一步-编译安装httpd服务器" tabindex="-1">第一步 编译安装httpd服务器 <a class="header-anchor" href="#第一步-编译安装httpd服务器" aria-label="Permalink to &quot;第一步 编译安装httpd服务器&quot;">&ZeroWidthSpace;</a></h1>
<h2 id="_1、安装前准备" tabindex="-1">1、安装前准备 <a class="header-anchor" href="#_1、安装前准备" aria-label="Permalink to &quot;1、安装前准备&quot;">&ZeroWidthSpace;</a></h2>
<p>解压apr apr-util pcre httpd expat包</p>
<div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span>[root@localhost app]# tar -xvf apr-1.6.5.tar.xz -C /app/</span></span>
<span class="line"><span>[root@localhost app]# tar -xvf apr-util-1.6.1.tar.xz -C /app/</span></span>
<span class="line"><span>[root@localhost app]# tar -xvf pcre-8.42.tar.xz -C /app/</span></span>
<span class="line"><span>[root@localhost app]# tar -xvf httpd-2.4.46.tar.xz -C /app/</span></span>
<span class="line"><span></span></span>
<span class="line"><span>[root@localhost app]# ls</span></span>
<span class="line"><span>apr-1.6.5  apr-util-1.6.1  httpd-2.4.46  packages  pcre-8.42</span></span></code></pre>
</div><p>安装软件支持</p>
<div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span>[root@localhost apr-1.6.5]# dnf -y install gcc gcc-c++ make cmake gdb libstdc++*</span></span></code></pre>
</div><h2 id="_2、编译安装apr" tabindex="-1">2、编译安装apr <a class="header-anchor" href="#_2、编译安装apr" aria-label="Permalink to &quot;2、编译安装apr&quot;">&ZeroWidthSpace;</a></h2>
<div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span>[root@localhost apr-1.6.5]# pwd</span></span>
<span class="line"><span>/app/apr-1.6.5</span></span>
<span class="line"><span></span></span>
<span class="line"><span>[root@localhost apr-1.6.5]# ./configure --prefix=/usr/local/apr</span></span>
<span class="line"><span></span></span>
<span class="line"><span>[root@localhost apr-1.6.5]# make &#x26;&#x26; make install</span></span></code></pre>
</div><p>这里运行编译文件时可能会报错</p>
<div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span>rm: cannot remove 'libtoolT': No such file or directory</span></span></code></pre>
</div><p>解决：</p>
<div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span>[root@localhost apr-1.6.5]# vim configure</span></span>
<span class="line"><span>#把RM='$RM'改为RM='$RM  -f'</span></span></code></pre>
</div><h2 id="_3、编译安装expat" tabindex="-1">3、编译安装expat <a class="header-anchor" href="#_3、编译安装expat" aria-label="Permalink to &quot;3、编译安装expat&quot;">&ZeroWidthSpace;</a></h2>
<div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span>[root@localhost expat-2.2.3]# pwd</span></span>
<span class="line"><span>/app/expat-2.2.3</span></span>
<span class="line"><span>[root@localhost expat-2.2.3]# ./configure --prefix=/usr/local/expat</span></span>
<span class="line"><span>make &#x26;&#x26; make install</span></span></code></pre>
</div><h2 id="_4、编译安装apr-util" tabindex="-1">4、编译安装apr-util <a class="header-anchor" href="#_4、编译安装apr-util" aria-label="Permalink to &quot;4、编译安装apr-util&quot;">&ZeroWidthSpace;</a></h2>
<div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span>[root@localhost apr-util-1.6.1]# pwd</span></span>
<span class="line"><span>/app/apr-util-1.6.1</span></span>
<span class="line"><span>[root@localhost apr-util-1.6.1]# ./configure --prefix=/usr/local/apr-util --with-apr=/usr/local/apr --with-expat=/usr/local/expat</span></span>
<span class="line"><span>make &#x26;&#x26; make install</span></span></code></pre>
</div><h2 id="_5、编译安装pcre" tabindex="-1">5、编译安装pcre <a class="header-anchor" href="#_5、编译安装pcre" aria-label="Permalink to &quot;5、编译安装pcre&quot;">&ZeroWidthSpace;</a></h2>
<div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span>[root@localhost pcre-8.42]# pwd</span></span>
<span class="line"><span>/app/pcre-8.42</span></span>
<span class="line"><span>[root@localhost pcre-8.42]# ./configure --prefix=/usr/local/pcre</span></span>
<span class="line"><span>[root@localhost pcre-8.42]# make &#x26;&#x26; make install</span></span></code></pre>
</div><h2 id="_6、编译安装httpd" tabindex="-1">6、编译安装httpd <a class="header-anchor" href="#_6、编译安装httpd" aria-label="Permalink to &quot;6、编译安装httpd&quot;">&ZeroWidthSpace;</a></h2>
<div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span>[root@localhost httpd-2.4.46]# pwd</span></span>
<span class="line"><span>/app/httpd-2.4.46</span></span>
<span class="line"><span>[root@localhost httpd-2.4.46]# ./configure --prefix=/usr/local/apache --with-apr=/usr/local/apr --with-apr-util=/usr/local/apr-util --with-pcre=/usr/local/pcre  --enable-so   --enable-rewrite --enable-ssl  --with-ssl=/usr/lib  --enable-auth-digest --enable-cgi --enable-suexec  --with-suexec-caller=daemon --with-suexec-docroot=/usr/local/apache/htdocs</span></span>
<span class="line"><span>#这里的编译选项应当是需要什么加什么，具体选项见说明文档</span></span></code></pre>
</div><blockquote>
<p>httpd服务的目录结构</p>
<p>服务目录：/usr/local/apache/</p>
<p>主配置文件：/usr/local/apache/conf/httpd.conf</p>
<p>网页目录：/usr/local/apache/htdocs/</p>
<p>服务脚本：/usr/local/apache/bin/apachectl</p>
<p>执行程序：/usr/local/apache/bin/httpd</p>
<p>访问日志： /usr/local/apache/log/access_log</p>
<p>错误日志： /usr/local/apache/log/error_log</p>
</blockquote>
<h2 id="_7、selinux配置" tabindex="-1">7、selinux配置 <a class="header-anchor" href="#_7、selinux配置" aria-label="Permalink to &quot;7、selinux配置&quot;">&ZeroWidthSpace;</a></h2>
<div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span>[root@localhost httpd-2.4.46]# getsebool -a | grep httpd</span></span>
<span class="line"><span>httpd_anon_write --> off</span></span>
<span class="line"><span>httpd_builtin_scripting --> on</span></span>
<span class="line"><span>httpd_can_check_spam --> off</span></span>
<span class="line"><span>httpd_can_connect_ftp --> off</span></span>
<span class="line"><span>httpd_can_connect_ldap --> off</span></span>
<span class="line"><span>httpd_can_connect_mythtv --> off</span></span>
<span class="line"><span>httpd_can_connect_zabbix --> off</span></span>
<span class="line"><span>httpd_can_network_connect --> off</span></span>
<span class="line"><span>httpd_can_network_connect_cobbler --> off</span></span>
<span class="line"><span>httpd_can_network_connect_db --> off</span></span>
<span class="line"><span>httpd_can_network_memcache --> off</span></span>
<span class="line"><span>httpd_can_network_relay --> off</span></span>
<span class="line"><span>httpd_can_sendmail --> off</span></span>
<span class="line"><span>httpd_dbus_avahi --> off</span></span>
<span class="line"><span>httpd_dbus_sssd --> off</span></span>
<span class="line"><span>httpd_dontaudit_search_dirs --> off</span></span>
<span class="line"><span>httpd_enable_cgi --> on</span></span>
<span class="line"><span>httpd_enable_ftp_server --> off</span></span>
<span class="line"><span>httpd_enable_homedirs --> off</span></span>
<span class="line"><span>httpd_execmem --> off</span></span>
<span class="line"><span>httpd_graceful_shutdown --> off</span></span>
<span class="line"><span>httpd_manage_ipa --> off</span></span>
<span class="line"><span>httpd_mod_auth_ntlm_winbind --> off</span></span>
<span class="line"><span>httpd_mod_auth_pam --> off</span></span>
<span class="line"><span>httpd_read_user_content --> off</span></span>
<span class="line"><span>httpd_run_ipa --> off</span></span>
<span class="line"><span>httpd_run_preupgrade --> off</span></span>
<span class="line"><span>httpd_run_stickshift --> off</span></span>
<span class="line"><span>httpd_serve_cobbler_files --> off</span></span>
<span class="line"><span>httpd_setrlimit --> off</span></span>
<span class="line"><span>httpd_ssi_exec --> off</span></span>
<span class="line"><span>httpd_sys_script_anon_write --> off</span></span>
<span class="line"><span>httpd_tmp_exec --> off</span></span>
<span class="line"><span>httpd_tty_comm --> off</span></span>
<span class="line"><span>httpd_unified --> off</span></span>
<span class="line"><span>httpd_use_cifs --> off</span></span>
<span class="line"><span>httpd_use_fusefs --> off</span></span>
<span class="line"><span>httpd_use_gpg --> off</span></span>
<span class="line"><span>httpd_use_nfs --> off</span></span>
<span class="line"><span>httpd_use_opencryptoki --> off</span></span>
<span class="line"><span>httpd_use_openstack --> off</span></span>
<span class="line"><span>httpd_use_sasl --> off</span></span>
<span class="line"><span>httpd_verify_dns --> off</span></span>
<span class="line"><span></span></span>
<span class="line"><span>[root@localhost httpd-2.4.46]# setsebool -P httpd_anon_write on</span></span>
<span class="line"><span>[root@localhost httpd-2.4.46]# setsebool -P httpd_can_check_spam on</span></span>
<span class="line"><span>[root@localhost httpd-2.4.46]# setsebool -P httpd_can_network_connect on</span></span>
<span class="line"><span>[root@localhost httpd-2.4.46]# setsebool -P httpd_can_network_connect_db on</span></span>
<span class="line"><span>[root@localhost httpd-2.4.46]# setsebool -P httpd_can_network_relay on</span></span>
<span class="line"><span>[root@localhost httpd-2.4.46]# setsebool -P httpd_tmp_exec on</span></span>
<span class="line"><span>[root@localhost httpd-2.4.46]# setsebool -P httpd_ssi_exec  on</span></span>
<span class="line"><span>[root@localhost httpd-2.4.46]# setsebool -P httpd_enable_cgi  on</span></span></code></pre>
</div><h2 id="_8、防火墙配置" tabindex="-1">8、防火墙配置 <a class="header-anchor" href="#_8、防火墙配置" aria-label="Permalink to &quot;8、防火墙配置&quot;">&ZeroWidthSpace;</a></h2>
<div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span>[root@localhost httpd-2.4.46]# firewall-cmd  --add-port=80/tcp --permanent </span></span>
<span class="line"><span>success</span></span>
<span class="line"><span>[root@localhost httpd-2.4.46]# firewall-cmd  --add-port=443/tcp --permanent </span></span>
<span class="line"><span>success</span></span>
<span class="line"><span>[root@localhost httpd-2.4.46]# firewall-cmd  --add-port=8080/tcp --permanent </span></span>
<span class="line"><span>success</span></span>
<span class="line"><span>[root@localhost httpd-2.4.46]# firewall-cmd  --add-port=8888/tcp --permanent </span></span>
<span class="line"><span>success</span></span>
<span class="line"><span>[root@localhost httpd-2.4.46]# firewall-cmd  --add-service=http  --permanent </span></span>
<span class="line"><span>success</span></span>
<span class="line"><span>[root@localhost httpd-2.4.46]# firewall-cmd  --add-service=https  --permanent </span></span>
<span class="line"><span>success</span></span>
<span class="line"><span>[root@localhost httpd-2.4.46]# firewall-cmd  --reload</span></span>
<span class="line"><span>success</span></span></code></pre>
</div><h2 id="_9、修改主配置文件httpd-conf" tabindex="-1">9、修改主配置文件httpd.conf <a class="header-anchor" href="#_9、修改主配置文件httpd-conf" aria-label="Permalink to &quot;9、修改主配置文件httpd.conf&quot;">&ZeroWidthSpace;</a></h2>
<div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span>[root@localhost conf]# pwd</span></span>
<span class="line"><span>/usr/local/apache/conf</span></span>
<span class="line"><span>[root@localhost conf]# vim httpd.conf </span></span>
<span class="line"><span></span></span>
<span class="line"><span>ServerAdmin mufeng.yu@qq.com		#管理员邮箱</span></span>
<span class="line"><span>ServerName www.mufeng.com:80	#站点名称</span></span></code></pre>
</div><blockquote>
<p>ServerRoot：服务目录</p>
<p>ServerAdmin：管理员邮箱</p>
<p>User：运行服务的用户身份</p>
<p>Group：运行服务的组身份</p>
<p>ServerName：网站服务器的域名</p>
<p>DocumentRoot：网页文档的根目录</p>
<p>Listen：监听的IP地址、端口号</p>
<p>PidFile：保存httpd进程PID号的文件</p>
<p>DirectoryIndex：默认的索引页文件</p>
<p>ErrorLog：错误日志文件的位置</p>
<p>CustomLog：访问日志文件的位置</p>
<p>LogLevel：记录日志的级别，默认为warn</p>
<p>Timeout：网络连接超时，默认为300秒</p>
<p>KeepAlive：是否保持连接，可选On或Off</p>
<p>MaxKeepAliveRequests：每次连接最多请求文件数</p>
<p>KeepAliveTimeout：保持连接状态时的超时时间</p>
<p>Include：需要包含进来的其他配置文件</p>
</blockquote>
<h2 id="_10、http-conf-语法检查" tabindex="-1">10、http.conf 语法检查 <a class="header-anchor" href="#_10、http-conf-语法检查" aria-label="Permalink to &quot;10、http.conf 语法检查&quot;">&ZeroWidthSpace;</a></h2>
<div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span>[root@localhost conf]# /usr/local/apache/bin/apachectl  -t</span></span>
<span class="line"><span>Syntax OK</span></span></code></pre>
</div><h2 id="_11、启动httpd服务" tabindex="-1">11、启动httpd服务 <a class="header-anchor" href="#_11、启动httpd服务" aria-label="Permalink to &quot;11、启动httpd服务&quot;">&ZeroWidthSpace;</a></h2>
<div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span>[root@localhost conf]# /usr/local/apache/bin/apachectl start</span></span></code></pre>
</div><h2 id="_12、测试" tabindex="-1">12、测试 <a class="header-anchor" href="#_12、测试" aria-label="Permalink to &quot;12、测试&quot;">&ZeroWidthSpace;</a></h2>
<div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span>[root@localhost conf]# wget www.mufeng.com</span></span>
<span class="line"><span>--2020-12-01 08:41:48--  http://www.mufeng.com/</span></span>
<span class="line"><span>Resolving www.mufeng.com (www.mufeng.com)... 192.35.35.1</span></span>
<span class="line"><span>Connecting to www.mufeng.com (www.mufeng.com)|192.35.35.1|:80... connected.</span></span>
<span class="line"><span>HTTP request sent, awaiting response... 200 OK</span></span>
<span class="line"><span>Length: 45 [text/html]</span></span>
<span class="line"><span>Saving to: ‘index.html’</span></span>
<span class="line"><span></span></span>
<span class="line"><span>index.html                        100%[==========================================================>]      45  --.-KB/s    in 0s      </span></span>
<span class="line"><span></span></span>
<span class="line"><span>2020-12-01 08:41:48 (7.99 MB/s) - ‘index.html’ saved [45/45]</span></span>
<span class="line"><span></span></span>
<span class="line"><span>[root@localhost conf]# vim index.html </span></span>
<span class="line"><span>&#x3C;html>&#x3C;body>&#x3C;h1>It works!&#x3C;/h1>&#x3C;/body>&#x3C;/html></span></span></code></pre>
</div><blockquote>
<p>这个测试完全可以通过ip地址来实现，如果想通过域名访问，需要配置自己的DNS域名服务器bind</p>
</blockquote>
<h2 id="_13、测试本机httpd服务器的性能" tabindex="-1">13、测试本机httpd服务器的性能 <a class="header-anchor" href="#_13、测试本机httpd服务器的性能" aria-label="Permalink to &quot;13、测试本机httpd服务器的性能&quot;">&ZeroWidthSpace;</a></h2>
<p>ab命令格式说明</p>
<div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span>ab [-q] -c 并发请求数 -n 总的请求数 [http://]域名[:端口]/路径</span></span></code></pre>
</div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span>[root@localhost conf]# ulimit -n 3600</span></span>
<span class="line"><span>[root@localhost bin]# pwd</span></span>
<span class="line"><span>/usr/local/apache/bin</span></span>
<span class="line"><span>[root@localhost bin]# ./ab -q -c 2000 -n 4000 http://www.mufeng.com/ </span></span>
<span class="line"><span>This is ApacheBench, Version 2.3 &#x3C;$Revision: 1879490 $></span></span>
<span class="line"><span>Copyright 1996 Adam Twiss, Zeus Technology Ltd, http://www.zeustech.net/</span></span>
<span class="line"><span>Licensed to The Apache Software Foundation, http://www.apache.org/</span></span>
<span class="line"><span></span></span>
<span class="line"><span>Benchmarking www.mufeng.com (be patient).....done</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span>Server Software:        Apache/2.4.46</span></span>
<span class="line"><span>Server Hostname:        www.mufeng.com</span></span>
<span class="line"><span>Server Port:            80</span></span>
<span class="line"><span></span></span>
<span class="line"><span>Document Path:          /</span></span>
<span class="line"><span>Document Length:        45 bytes</span></span>
<span class="line"><span></span></span>
<span class="line"><span>Concurrency Level:      2000</span></span>
<span class="line"><span>Time taken for tests:   0.519 seconds</span></span>
<span class="line"><span>Complete requests:      4000</span></span>
<span class="line"><span>Failed requests:        0</span></span>
<span class="line"><span>Total transferred:      1156000 bytes</span></span>
<span class="line"><span>HTML transferred:       180000 bytes</span></span>
<span class="line"><span>Requests per second:    7703.79 [#/sec] (mean)</span></span>
<span class="line"><span>Time per request:       259.613 [ms] (mean)</span></span>
<span class="line"><span>Time per request:       0.130 [ms] (mean, across all concurrent requests)</span></span>
<span class="line"><span>Transfer rate:          2174.21 [Kbytes/sec] received</span></span>
<span class="line"><span></span></span>
<span class="line"><span>Connection Times (ms)</span></span>
<span class="line"><span>              min  mean[+/-sd] median   max</span></span>
<span class="line"><span>Connect:        0    9  17.2      4      71</span></span>
<span class="line"><span>Processing:     0   17  46.8      8     428</span></span>
<span class="line"><span>Waiting:        0   16  46.7      7     428</span></span>
<span class="line"><span>Total:          0   26  58.4     12     498</span></span>
<span class="line"><span></span></span>
<span class="line"><span>Percentage of the requests served within a certain time (ms)</span></span>
<span class="line"><span>  50%     12</span></span>
<span class="line"><span>  66%     13</span></span>
<span class="line"><span>  75%     15</span></span>
<span class="line"><span>  80%     16</span></span>
<span class="line"><span>  90%     24</span></span>
<span class="line"><span>  95%     81</span></span>
<span class="line"><span>  98%    283</span></span>
<span class="line"><span>  99%    288</span></span>
<span class="line"><span> 100%    498 (longest request)</span></span></code></pre>
</div><p>注：构建服务所需的包可在<a href="https://download.csdn.net/download/qq_45417634/13208956" target="_blank" rel="noreferrer">server_source_2020.iso </a>请自行下载，您也可以在所需安装包官网下载
本地源配置、防火墙、selinux等是linux较为基础的内容，不再赘述。
本文均为原创，如需与博主交流可email至mufeng.yu@qq.com</p>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[LAMP编译安装三部曲]]></title>
            <link>https://www.imufeng.cn/training/linux/linux-lamp/</link>
            <guid>https://www.imufeng.cn/training/linux/linux-lamp/</guid>
            <pubDate>Fri, 15 Mar 2024 07:48:47 GMT</pubDate>
            <content:encoded><![CDATA[<h1 id="lamp-编译安装三部曲" tabindex="-1">LAMP 编译安装三部曲 <a class="header-anchor" href="#lamp-编译安装三部曲" aria-label="Permalink to &quot;LAMP 编译安装三部曲&quot;">&ZeroWidthSpace;</a></h1>
<p>LAMP 是一种常用于搭建网站和应用程序的服务器架构，它由 Linux、Apache、MySQL（或MariaDB）、PHP 四个开源软件组成，也分别代表了操作系统、Web 服务器、数据库以及服务器端脚本语言。 与 LNMP 架构类似，区别在于使用的 Web 服务器组件。</p>
<p>本教程将用三步带你完成 LAMP 架构的编译安装。</p>
<ol>
<li><a href="./first.html"> 第一步 编译安装 httpd 服务器 </a></li>
<li><a href="./second.html"> 第二步 编译安装mariadb数据库环境</a></li>
<li><a href="./third.html"> 第三步 编译安装PHP </a></li>
</ol>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[第二步编译安装mariadb数据库环境]]></title>
            <link>https://www.imufeng.cn/training/linux/linux-lamp/second.html</link>
            <guid>https://www.imufeng.cn/training/linux/linux-lamp/second.html</guid>
            <pubDate>Fri, 15 Mar 2024 07:48:47 GMT</pubDate>
            <content:encoded><![CDATA[<h1 id="第二步-编译安装mariadb数据库环境" tabindex="-1">第二步 编译安装mariadb数据库环境 <a class="header-anchor" href="#第二步-编译安装mariadb数据库环境" aria-label="Permalink to &quot;第二步 编译安装mariadb数据库环境&quot;">&ZeroWidthSpace;</a></h1>
<h2 id="_1、mariadb数据库概述" tabindex="-1">1、Mariadb数据库概述 <a class="header-anchor" href="#_1、mariadb数据库概述" aria-label="Permalink to &quot;1、Mariadb数据库概述&quot;">&ZeroWidthSpace;</a></h2>
<p>Mariadb是开源的关系型数据库服务器软件</p>
<ul>
<li>
<p>目前由SUN公司开发和维护</p>
</li>
<li>
<p>官方站点：<a href="https://mariadb.org/" target="_blank" rel="noreferrer">https://mariadb.org/</a></p>
</li>
</ul>
<p>Mariadb的特点</p>
<ul>
<li>
<p>多线程、多用户</p>
</li>
<li>
<p>基于客户/服务器架构</p>
</li>
<li>
<p>简单易用</p>
</li>
<li>
<p>查询速度快</p>
</li>
<li>
<p>安全可靠</p>
</li>
</ul>
<h2 id="_2、安装前准备工作" tabindex="-1">2、安装前准备工作 <a class="header-anchor" href="#_2、安装前准备工作" aria-label="Permalink to &quot;2、安装前准备工作&quot;">&ZeroWidthSpace;</a></h2>
<div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span>[root@localhost packages]# dnf remove -y mariadb mariadb-server		#卸载已安装的mariadb服务</span></span>
<span class="line"><span></span></span>
<span class="line"><span>[root@localhost packages]# yum install -y cmake gcc-c++  libstdc++-*  ncurses-devel libaio* bison ncurses-devel openssl-devel openssl gcc-c++ cmake </span></span>
<span class="line"><span></span></span>
<span class="line"><span>[root@localhost packages]# mkdir -p /usr/local/mysql				#创建需要的文件夹</span></span>
<span class="line"><span>[root@localhost packages]# mkdir -p /var/run/mysqld</span></span>
<span class="line"><span>[root@localhost packages]# mkdir -p /var/lib/mysql</span></span>
<span class="line"><span></span></span>
<span class="line"><span>[root@localhost packages]# which nologin							#创建用户以及用户组</span></span>
<span class="line"><span>/usr/sbin/nologin</span></span>
<span class="line"><span>[root@localhost packages]#  groupadd mysql</span></span>
<span class="line"><span>[root@localhost packages]# useradd -g mysql -d /usr/local/mysql/ -s /usr/sbin/nologin mysql</span></span>
<span class="line"><span>useradd: warning: the home directory already exists.</span></span>
<span class="line"><span>Not copying any file from skel directory into it.</span></span>
<span class="line"><span></span></span>
<span class="line"><span>[root@localhost packages]# chmod 777 -R /var/lib/mysql/ /var/run/mysqld/ /usr/local/mysql/	#文件夹读写权限</span></span>
<span class="line"><span>[root@localhost packages]# chown mysql:mysql -R /var/lib/mysql/ /var/run/mysqld/ /usr/local/mysql/</span></span></code></pre>
</div><h2 id="_3、解压mariadb安装包" tabindex="-1">3、解压mariadb安装包 <a class="header-anchor" href="#_3、解压mariadb安装包" aria-label="Permalink to &quot;3、解压mariadb安装包&quot;">&ZeroWidthSpace;</a></h2>
<div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span>[root@localhost packages]# tar -xvf /app/packages/mariadb-10.5.6.tar.xz -C /app/</span></span></code></pre>
</div><h2 id="_4、编译选项参考" tabindex="-1">4、编译选项参考 <a class="header-anchor" href="#_4、编译选项参考" aria-label="Permalink to &quot;4、编译选项参考&quot;">&ZeroWidthSpace;</a></h2>
<div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span>cmake . -DCMAKE_INSTALL_PREFIX=/usr/local/mysql -DMYSQL_DATADIR=/usr/local/mysql/data -DSYSCONFDIR=/etc  -DWITH_INNOBASE_STORAGE_ENGINE=1 -DWITH_ARCHIVE_STORAGE_ENGINE=1 -DWITH_BLACKHOLE_STORAGE_ENGINE=1 -DWITH_READLINE=1 -DWITH_SSL=system -DWITH_ZLIB=system -DWITH_LIBWRAP=0 -DMYSQL_UNIX_ADDR=/var/lib/mysql/mysql.sock -DDEFAULT_CHARSET=utf8 -DDEFAULT_COLLATION=utf8_general_ci -DWITHOUT_TOKUDB=1		#编译选项详见mariadb的说明文档</span></span></code></pre>
</div><h2 id="_5、开始编译安装" tabindex="-1">5、开始编译安装 <a class="header-anchor" href="#_5、开始编译安装" aria-label="Permalink to &quot;5、开始编译安装&quot;">&ZeroWidthSpace;</a></h2>
<div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span>[root@localhost mariadb-10.5.6]# cmake . -DCMAKE_INSTALL_PREFIX=/usr/local/mysql -DMYSQL_DATADIR=/usr/local/mysql/data -DSYSCONFDIR=/etc  -DWITH_INNOBASE_STORAGE_ENGINE=1 -DWITH_ARCHIVE_STORAGE_ENGINE=1 -DWITH_BLACKHOLE_STORAGE_ENGINE=1 -DWITH_READLINE=1 -DWITH_SSL=system -DWITH_ZLIB=system -DWITH_LIBWRAP=0 -DMYSQL_UNIX_ADDR=/var/lib/mysql/mysql.sock -DDEFAULT_CHARSET=utf8 -DDEFAULT_COLLATION=utf8_general_ci -DWITHOUT_TOKUDB=1</span></span>
<span class="line"><span>[root@localhost mariadb-10.5.6]# make &#x26;&#x26; make install		#编译安装时间会有点长</span></span></code></pre>
</div><h2 id="_6、安装后的配置" tabindex="-1">6、安装后的配置 <a class="header-anchor" href="#_6、安装后的配置" aria-label="Permalink to &quot;6、安装后的配置&quot;">&ZeroWidthSpace;</a></h2>
<div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span>[root@localhost mariadb-10.5.6]# export PATH=$PATH:/usr/local/mysql/bin		#环境变量</span></span>
<span class="line"><span>[root@localhost mariadb-10.5.6]# /usr/local/mysql/scripts/mysql_install_db --basedir=/usr/local/mysql --datadir=/usr/local/mysql/data  --defaults-file=/etc/my.cnf --socket=/var/lib/mysql/mysql.sock		#初始化</span></span>
<span class="line"><span>#设置开机启动</span></span>
<span class="line"><span>[root@localhost mysql]# cp -rf support-files/mysql.server /etc/init.d/mysqld </span></span>
<span class="line"><span>[root@localhost mysql]# chmod 777 /etc/init.d/mysqld </span></span>
<span class="line"><span>[root@localhost mysql]# chkconfig --add mysqld</span></span>
<span class="line"><span>[root@localhost mysql]# chkconfig mysqld on  </span></span>
<span class="line"><span>[root@localhost mysql]# vim /etc/init.d/mysqld </span></span>
<span class="line"><span>basedir=/usr/local/mysql</span></span>
<span class="line"><span>datadir=/usr/local/mysql/data</span></span>
<span class="line"><span></span></span>
<span class="line"><span>[root@localhost /]# cd /usr/local/mysql/</span></span>
<span class="line"><span>[root@localhost mysql]# chmod -R 777 data</span></span>
<span class="line"><span>[root@localhost mysql]# mysqld_safe --datadir='/usr/local/mysql/data'</span></span>
<span class="line"><span>201204 02:05:33 mysqld_safe Logging to '/var/log/mariadb/mariadb.log'.</span></span>
<span class="line"><span>201204 02:05:34 mysqld_safe Starting mariadbd daemon with databases from /usr/local/mysql/data</span></span></code></pre>
</div><h2 id="_7、开启服务" tabindex="-1">7、开启服务 <a class="header-anchor" href="#_7、开启服务" aria-label="Permalink to &quot;7、开启服务&quot;">&ZeroWidthSpace;</a></h2>
<div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span>[root@localhost mysql]# systemctl start mysql</span></span></code></pre>
</div><h2 id="_8、登录以及退出" tabindex="-1">8、登录以及退出 <a class="header-anchor" href="#_8、登录以及退出" aria-label="Permalink to &quot;8、登录以及退出&quot;">&ZeroWidthSpace;</a></h2>
<div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span>[root@localhost mysql]# mysql -u root</span></span>
<span class="line"><span>Welcome to the MariaDB monitor.  Commands end with ; or \g.</span></span>
<span class="line"><span>Your MariaDB connection id is 4</span></span>
<span class="line"><span>Server version: 10.5.6-MariaDB Source distribution</span></span>
<span class="line"><span></span></span>
<span class="line"><span>Copyright (c) 2000, 2018, Oracle, MariaDB Corporation Ab and others.</span></span>
<span class="line"><span></span></span>
<span class="line"><span>Type 'help;' or '\h' for help. Type '\c' to clear the current input statement.</span></span>
<span class="line"><span></span></span>
<span class="line"><span>MariaDB [(none)]> quit</span></span>
<span class="line"><span>Bye</span></span></code></pre>
</div><blockquote>
<p>mysql -u root [-p] 未指定-p时表示不需要密码登录</p>
<p>退出可以使用exit quit</p>
</blockquote>
<h2 id="_9、数据库的简单使用" tabindex="-1">9、数据库的简单使用 <a class="header-anchor" href="#_9、数据库的简单使用" aria-label="Permalink to &quot;9、数据库的简单使用&quot;">&ZeroWidthSpace;</a></h2>
<pre><code>查看数据库列表信息
</code></pre>
<div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span>SHOW DATABASES</span></span></code></pre>
</div><pre><code>查看数据库中的数据表信息
</code></pre>
<div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span>USE 数据库名</span></span>
<span class="line"><span>SHOW TABLES</span></span></code></pre>
</div><pre><code>显示数据表的结构
</code></pre>
<div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span>DESCRIBE [数据库名.表名]</span></span></code></pre>
</div><pre><code>创建新的数据库
</code></pre>
<div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span>CREATE DATABASE 数据库名</span></span></code></pre>
</div><pre><code>创建数据表
</code></pre>
<div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span>CREATE TABLE 表名 (字段定义...)</span></span></code></pre>
</div><pre><code>删除数据表
</code></pre>
<div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span>DROP TABLE [数据库名.表名]、</span></span></code></pre>
</div><pre><code>删除数据库
</code></pre>
<div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span>DROP DATABASE [数据库名]</span></span></code></pre>
</div><pre><code>向数据表中插入记录
</code></pre>
<div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span>INSERT INTO 表名(字段1, 字段2, ……)  VALUES(字段1的值, 字段2的值, ……)</span></span></code></pre>
</div><pre><code>从数据库中查找
</code></pre>
<div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span>SELECT 字段名1,字段名2 …… FROM 表名 WHERE 条件表达式</span></span></code></pre>
</div><pre><code>修改、更新数据表中的数据记录
</code></pre>
<div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span>UPDATE 表名 SET 字段名1=字段值1[,字段名2=字段值2]  WHERE 条件表达式</span></span></code></pre>
</div><pre><code>在数据表中删除指定的数据记录
</code></pre>
<div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span>DELETE FROM 表名 WHERE 条件表达式</span></span></code></pre>
</div><h2 id="_10、数据库维护" tabindex="-1">10、数据库维护 <a class="header-anchor" href="#_10、数据库维护" aria-label="Permalink to &quot;10、数据库维护&quot;">&ZeroWidthSpace;</a></h2>
<p>备份数据库</p>
<div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span>[root@localhost ~]# mysqldump -u root -p auth > mysql-auth.sql				#备份auth库</span></span>
<span class="line"><span>Enter password:</span></span>
<span class="line"><span>[root@localhost ~]# mysqldump -u root -p --all-databases > mysql-all.sql	#备份所有库</span></span>
<span class="line"><span>[root@localhost ~]# ls -l mysql-*.sql</span></span>
<span class="line"><span>-rw-r--r-- 1 root root 292300 09-17 04:55 mysql-all.sql</span></span>
<span class="line"><span>-rw-r--r-- 1 root root   1678 09-17 04:55 mysql-auth.sql</span></span></code></pre>
</div><p>从备份中恢复</p>
<div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span>[root@localhost ~]# mysql -u root -p auth &#x3C; mysql-auth.sql			#恢复auth库 </span></span>
<span class="line"><span>[root@localhost ~]# mysql -u root -p &#x3C; mysql-all.sql 				#恢复所有库</span></span></code></pre>
</div><p>注：构建服务所需的包可在<a href="https://download.csdn.net/download/qq_45417634/13208956" target="_blank" rel="noreferrer">server_source_2020.iso </a>请自行下载，您也可以在所需安装包官网下载
本地源配置、防火墙、selinux等是linux较为基础的内容，不再赘述。
本文均为原创，如需与博主交流可email至mufeng.yu@qq.com</p>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[第三步编译安装PHP]]></title>
            <link>https://www.imufeng.cn/training/linux/linux-lamp/third.html</link>
            <guid>https://www.imufeng.cn/training/linux/linux-lamp/third.html</guid>
            <pubDate>Fri, 15 Mar 2024 07:48:47 GMT</pubDate>
            <content:encoded><![CDATA[<h1 id="第三步-编译安装php" tabindex="-1">第三步 编译安装PHP <a class="header-anchor" href="#第三步-编译安装php" aria-label="Permalink to &quot;第三步 编译安装PHP&quot;">&ZeroWidthSpace;</a></h1>
<h2 id="_1、安装前准备" tabindex="-1">1、安装前准备 <a class="header-anchor" href="#_1、安装前准备" aria-label="Permalink to &quot;1、安装前准备&quot;">&ZeroWidthSpace;</a></h2>
<div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span>#编译安装libmcrypt</span></span>
<span class="line"><span>[root@localhost app]# tar -xvf /app/packages/libmcrypt-2.5.8.tar.xz -C /app/</span></span>
<span class="line"><span>[root@localhost libmcrypt-2.5.8]# ./configure --prefix=/usr/local/libmcrypt</span></span>
<span class="line"><span>[root@localhost libmcrypt-2.5.8]# make &#x26;&#x26; make install</span></span>
<span class="line"><span></span></span>
<span class="line"><span>#编译安装mhash</span></span>
<span class="line"><span>[root@localhost libmcrypt-2.5.8]# tar -xvf /app/packages/mhash-0.9.9.9.tar.xz -C /app/</span></span>
<span class="line"><span>[root@localhost mhash-0.9.9.9]# ./configure --prefix=/usr/local/mhash</span></span>
<span class="line"><span>[root@localhost mhash-0.9.9.9]# make &#x26;&#x26; make install</span></span>
<span class="line"><span></span></span>
<span class="line"><span>#编译安装mcrypt</span></span>
<span class="line"><span>[root@localhost libmcrypt-2.5.8]# tar -xvf /app/packages/mcrypt-2.6.8.tar.xz -C /app/</span></span>
<span class="line"><span>[root@localhost mcrypt-2.6.8]# export LD_LIBRARY_PATH=/usr/local/libmcrypt/lib:/usr/local/mhash/lib </span></span>
<span class="line"><span>[root@localhost mcrypt-2.6.8]# export LDFLAGS="-L/usr/local/mhash/lib -I/usr/local/mhash/include/" </span></span>
<span class="line"><span>[root@localhost mcrypt-2.6.8]# export CFLAGS="-I/usr/local/mhash/include/" </span></span>
<span class="line"><span>[root@localhost mcrypt-2.6.8]# ./configure --prefix=/usr/local/mcrypt --with-libmcrypt-prefix=/usr/local/libmcrypt</span></span>
<span class="line"><span>[root@localhost mcrypt-2.6.8]# make &#x26;&#x26; make install</span></span>
<span class="line"><span>#编译安装oniguruma</span></span>
<span class="line"><span>[root@localhost packages]wget https://github.com/kkos/oniguruma/archive/v6.9.4.tar.gz -O oniguruma-6.9.4.tar.gz </span></span>
<span class="line"><span>[root@localhost ~]# tar -xvf /app/packages/oniguruma-6.9.4.tar.gz -C /app/</span></span>
<span class="line"><span>[root@localhost oniguruma-6.9.4]# pwd</span></span>
<span class="line"><span>/app/oniguruma-6.9.4</span></span>
<span class="line"><span>[root@localhost oniguruma-6.9.4]# ./autogen.sh &#x26;&#x26; ./configure --prefix=/usr #这里安装路径只能指定/usr</span></span>
<span class="line"><span>[root@localhost oniguruma-6.9.4]# make &#x26;&#x26; make install</span></span>
<span class="line"><span>[root@localhost app]# dnf -y install libxml2-devel krb5-devel openssl-devel sqlite-devel libcurl-devel libxslt-devel  libjpeg-devel libzip-devel bzip2-devel libpng-devel  freetype-devel</span></span></code></pre>
</div><h2 id="_2、php编译选项参考" tabindex="-1">2、php编译选项参考 <a class="header-anchor" href="#_2、php编译选项参考" aria-label="Permalink to &quot;2、php编译选项参考&quot;">&ZeroWidthSpace;</a></h2>
<div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span>./configure --prefix=/usr/local/php --with-apxs2=/usr/local/apache/bin/apxs  --with-config-file-path=/usr/local/php/etc  --with-mysql --with-mysqli  --with-pdo-mysql --with-mysql-sock=/var/lib/mysql/mysql.sock  --enable-mbstring --enable-session --enable-fpm --enable-opcache --enable-fastcgi --with-fpm-user=daemon  --with-curl  --with-openssl --with-zlib --with-fpm-group=daemon  --enable-gd  --with-libmcrypt=/usr/local/libmcrypt --with-mcrypt=/usr/local/mcrypt  --with-freetype --with-jpeg --with-gettext  --enable-sockets --enable-xml --with-zip --with-libdir=lib64  --with-libxml --with-openssl --with-pear   -with-bz2  --with-session</span></span></code></pre>
</div><h2 id="_3、解压包" tabindex="-1">3、解压包 <a class="header-anchor" href="#_3、解压包" aria-label="Permalink to &quot;3、解压包&quot;">&ZeroWidthSpace;</a></h2>
<div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span>[root@localhost app]# tar -xvf /app/packages/php-7.4.11.tar.xz -C /app/</span></span></code></pre>
</div><h2 id="_4、编译安装" tabindex="-1">4、编译安装 <a class="header-anchor" href="#_4、编译安装" aria-label="Permalink to &quot;4、编译安装&quot;">&ZeroWidthSpace;</a></h2>
<div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span>[root@localhost php-7.4.11]# ./configure --prefix=/usr/local/php --with-apxs2=/usr/local/apache/bin/apxs  --with-config-file-path=/usr/local/php/etc  --with-mysql --with-mysqli  --with-pdo-mysql --with-mysql-sock=/var/lib/mysql/mysql.sock  --enable-mbstring --enable-session --enable-fpm --enable-opcache --enable-fastcgi --with-fpm-user=daemon  --with-curl  --with-openssl --with-zlib --with-fpm-group=daemon  --enable-gd  --with-libmcrypt=/usr/local/libmcrypt --with-mcrypt=/usr/local/mcrypt  --with-freetype --with-jpeg --with-gettext  --enable-sockets --enable-xml --with-zip --with-libdir=lib64  --with-libxml --with-openssl --with-pear   -with-bz2  --with-session</span></span>
<span class="line"><span>[root@localhost php-7.4.11]# make &#x26;&#x26; make install</span></span></code></pre>
</div><h2 id="_5、创建配置文件" tabindex="-1">5、创建配置文件 <a class="header-anchor" href="#_5、创建配置文件" aria-label="Permalink to &quot;5、创建配置文件&quot;">&ZeroWidthSpace;</a></h2>
<div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span>[root@localhost php-7.4.11]# pwd</span></span>
<span class="line"><span>/app/php-7.4.11</span></span>
<span class="line"><span>[root@localhost php-7.4.11]# cp -rf php.ini-production /usr/local/php/etc/php.ini</span></span>
<span class="line"><span></span></span>
<span class="line"><span>[root@localhost php-fpm.d]# pwd</span></span>
<span class="line"><span>/usr/local/php/etc/php-fpm.d</span></span>
<span class="line"><span>[root@localhost php-fpm.d]# cp -rf www.conf.default www.conf</span></span>
<span class="line"><span></span></span>
<span class="line"><span>[root@localhost etc]# pwd</span></span>
<span class="line"><span>/usr/local/php/etc</span></span>
<span class="line"><span>[root@localhost etc]# cp -rf php-fpm.conf.default php-fpm.conf</span></span>
<span class="line"><span></span></span>
<span class="line"><span>[root@localhost php]# pwd</span></span>
<span class="line"><span>/usr/local/php</span></span>
<span class="line"><span>[root@localhost php]# mkdir daemon</span></span>
<span class="line"><span></span></span>
<span class="line"><span>[root@localhost php-7.4.11]# pwd</span></span>
<span class="line"><span>/app/php-7.4.11     </span></span>
<span class="line"><span>[root@localhost php-7.4.11]# cp -rf sapi/fpm/init.d.php-fpm /usr/local/php/daemon/php-fpm</span></span>
<span class="line"><span></span></span>
<span class="line"><span>[root@localhost php]# cd daemon/</span></span>
<span class="line"><span>[root@localhost daemon]# pwd</span></span>
<span class="line"><span>/usr/local/php/daemon</span></span>
<span class="line"><span>[root@localhost daemon]# chmod 777 -R php-fpm</span></span></code></pre>
</div><h2 id="_6、测试启动php-fpm" tabindex="-1">6、测试启动php-fpm <a class="header-anchor" href="#_6、测试启动php-fpm" aria-label="Permalink to &quot;6、测试启动php-fpm&quot;">&ZeroWidthSpace;</a></h2>
<div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span>[root@localhost daemon]# ./php-fpm start</span></span>
<span class="line"><span>Starting php-fpm  done</span></span>
<span class="line"><span>[root@localhost daemon]# ps auxfww | grep php | grep -v grep</span></span>
<span class="line"><span>root      132055  0.0  0.1 123664 10848 ?        Ss   16:53   0:00 php-fpm: master process (/usr/local/php/etc/php-fpm.conf)</span></span>
<span class="line"><span>daemon    132056  0.0  0.1 149940 10048 ?        S    16:53   0:00  \_ php-fpm: pool www</span></span>
<span class="line"><span>daemon    132057  0.0  0.1 149940 10048 ?        S    16:53   0:00  \_ php-fpm: pool www</span></span></code></pre>
</div><h2 id="_7、配置php支持apache" tabindex="-1">7、配置php支持apache <a class="header-anchor" href="#_7、配置php支持apache" aria-label="Permalink to &quot;7、配置php支持apache&quot;">&ZeroWidthSpace;</a></h2>
<h3 id="_7-1-编辑apache配置文件" tabindex="-1">7.1 编辑Apache配置文件 <a class="header-anchor" href="#_7-1-编辑apache配置文件" aria-label="Permalink to &quot;7.1 编辑Apache配置文件&quot;">&ZeroWidthSpace;</a></h3>
<div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span>[root@localhost ~]# vim /usr/local/apache/conf/httpd.conf</span></span>
<span class="line"><span>#找到AddType 添加：</span></span>
<span class="line"><span>    AddType application/x-httpd-php .php</span></span>
<span class="line"><span>    AddType application/x-httpd-php-source .phps </span></span>
<span class="line"><span>#找到</span></span>
<span class="line"><span>&#x3C;IfModule dir_module></span></span>
<span class="line"><span>    DirectoryIndex index.html</span></span>
<span class="line"><span>&#x3C;/IfModule></span></span>
<span class="line"><span>#改为</span></span>
<span class="line"><span>&#x3C;IfModule dir_module></span></span>
<span class="line"><span>    DirectoryIndex index.html index.php</span></span>
<span class="line"><span>&#x3C;/IfModule></span></span></code></pre>
</div><h3 id="_7-2-编辑php-ini" tabindex="-1">7.2 编辑php.ini <a class="header-anchor" href="#_7-2-编辑php-ini" aria-label="Permalink to &quot;7.2 编辑php.ini&quot;">&ZeroWidthSpace;</a></h3>
<div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span>[root@localhost ~]# vim /usr/local/php/etc/pht.ini</span></span>
<span class="line"><span>#找到display_startup_errors 和 log_errors</span></span>
<span class="line"><span>#改为：</span></span>
<span class="line"><span>log_errors = On</span></span>
<span class="line"><span>display_startup_errors = On</span></span></code></pre>
</div><h3 id="_7-3-重启php-apache" tabindex="-1">7.3 重启php apache <a class="header-anchor" href="#_7-3-重启php-apache" aria-label="Permalink to &quot;7.3 重启php apache&quot;">&ZeroWidthSpace;</a></h3>
<div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" v-pre=""><code><span class="line"><span>[root@localhost ~]# /usr/local/php/daemon/php-fpm restart</span></span>
<span class="line"><span>Gracefully shutting down php-fpm . done</span></span>
<span class="line"><span>Starting php-fpm  done</span></span>
<span class="line"><span>[root@localhost ~]# /usr/local/apache/bin/apachectl -k restart</span></span></code></pre>
</div><h3 id="_7-4-验证" tabindex="-1">7.4 验证 <a class="header-anchor" href="#_7-4-验证" aria-label="Permalink to &quot;7.4 验证&quot;">&ZeroWidthSpace;</a></h3>
<p>将一个php页面放到/usr/local/apache/htdocs</p>
<p>浏览器访问虚拟机ip</p>
<p>注：构建服务所需的包可在<a href="https://download.csdn.net/download/qq_45417634/13208956" target="_blank" rel="noreferrer">server_source_2020.iso </a>请自行下载，您也可以在所需安装包官网下载
本地源配置、防火墙、selinux等是linux较为基础的内容，不再赘述。
本文均为原创，如需与博主交流可email至mufeng.yu@qq.com</p>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[关于本站]]></title>
            <link>https://www.imufeng.cn/about/</link>
            <guid>https://www.imufeng.cn/about/</guid>
            <pubDate>Mon, 09 Oct 2023 09:31:50 GMT</pubDate>
            <content:encoded><![CDATA[<h1 id="关于本站" tabindex="-1">关于本站 <a class="header-anchor" href="#关于本站" aria-label="Permalink to &quot;关于本站&quot;">&ZeroWidthSpace;</a></h1>
<div class="tip custom-block"><p class="custom-block-title">版权声明</p>
<p>除特殊说明，本站文章皆为原创，著作权归作者所有。依据 <a href="https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh-hans" target="_blank" rel="noreferrer">CC BY-NC-SA 4.0 </a> 许可证进行授权。</p>
<p>本站源码开源于 <a href="https://github.com/i-mufeng/mblog" target="_blank" rel="noreferrer">Github</a> ，采用 <a href="https://www.gnu.org/licenses/gpl-3.0.md" target="_blank" rel="noreferrer">GPLv3</a> 开源协议。</p>
</div>
<details class="details custom-block"><summary>站点信息</summary>
<ul>
<li>
<p><strong>博主：</strong> Mufeng</p>
</li>
<li>
<p><strong>头像：</strong> <a href="https://cn.gravatar.com/avatar/f1dcdc8fa782b81824df5d67022e4d4a" target="_blank" rel="noreferrer">Gavatar-CN</a></p>
</li>
<li>
<p><strong>站点名称：</strong> 沐风的小站</p>
</li>
<li>
<p><strong>站点域名：</strong> <code>imufeng.cn</code></p>
</li>
<li>
<p><strong>E-mail：</strong> <a href="mailto:admin@imufeng.cn" target="_blank" rel="noreferrer">admin@imufeng.cn</a></p>
</li>
</ul>
</details>
<h3 id="关于-mufeng" tabindex="-1">关于 MUFENG <a class="header-anchor" href="#关于-mufeng" aria-label="Permalink to &quot;关于 MUFENG&quot;">&ZeroWidthSpace;</a></h3>
<p>博主是一名萌新程序猿，学计算机纯属热爱，毕业也顺利的踏进了开发这条不归路。目前工作一年，状态良好。喜欢音乐，喜静不喜动。</p>
<p><code>沐风</code>，取如沐春风之意，指不断的熏陶，静静的成长。是我比较追求的一个状态，更贴合我佛系、随遇而安的性格。也希望自己能够达到那种终生学习、不断完善自己的境界。</p>
<h3 id="关于-imufeng-cn" tabindex="-1">关于 IMUFENG.CN <a class="header-anchor" href="#关于-imufeng-cn" aria-label="Permalink to &quot;关于 IMUFENG.CN&quot;">&ZeroWidthSpace;</a></h3>
<p>搭建本站是为了整理自己最近的所得，并写写自己的所思。我之前的一些博文会发布到 <code>CSDN</code>、<code>博客园</code> 等平台，但是自由度会受到很大限制，且某些平台吃相难看，认真做内容的平台不断被打压。所以我认为自己搭建一个站点还是有必要的。</p>
<p>之前也尝试过一些开源博客，以及 <code>Wordpress</code> ，虽然但是，总还是觉得用着不舒服，所以最终还是选择了 <code>VitePress</code>。</p>
<h3 id="建站历程" tabindex="-1">建站历程 <a class="header-anchor" href="#建站历程" aria-label="Permalink to &quot;建站历程&quot;">&ZeroWidthSpace;</a></h3>
<br>
<div class='timeline-dot'><span class='timeline-dot-title'>2019年</span>
<ul>
<li>在自学过程中，了解到基本的建站知识。</li>
<li>购买了一台云主机以及 mangoling.top 的域名。</li>
<li>尝试为自己的域名备案。</li>
</ul>
</div>
<div class='timeline-dot'><span class='timeline-dot-title'>2020年</span>
<ul>
<li>由于疫情被封，一直自学 Linux 及开发相关知识。</li>
</ul>
</div>
<div class='timeline-dot'><span class='timeline-dot-title'>2021 年</span>
<ul>
<li>学习 HTTPS 相关知识，为域名绑定https证书。</li>
<li>通过 Typora 将 markdown 笔记导出为 HTML 并发布，向同学分享。</li>
<li>入手 imufeng.cn 域名，购买了第一台云服务器。</li>
</ul>
</div>
<div class='timeline-dot'><span class='timeline-dot-title'>2022年</span>
<ul>
<li>找到一款基于SpringBoot + Vue 的个人博客系统，学习并完善。</li>
<li>学习 Docker 等知识，使用其搭建了 LNMP 架构的服务器并部署了自己的博客。</li>
</ul>
</div>
<div class='timeline-dot'><span class='timeline-dot-title'>2023年</span>
<ul>
<li>为博客的后续寻找方向，尝试过 WordPress 以及自己开发，最终选择了 Vitepress。</li>
<li>逐步完善 Vitepress，接入百度统计站，学习 SEO 优化等相关知识，</li>
</ul>
</div>
<div class='timeline-dot'><span class='timeline-dot-title'>将继续完善</span>
</div>
]]></content:encoded>
        </item>
    </channel>
</rss>