<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/">
    <channel>
        <title>Mblog - 沐风的个人博客</title>
        <link>https://www.imufeng.cn</link>
        <description>但愿岁月如客，来去皆从容。（后端开发技术交流）</description>
        <lastBuildDate>Fri, 20 Oct 2023 08:37:00 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <language>zh-cn</language>
        <image>
            <title>Mblog - 沐风的个人博客</title>
            <url>https://www.imufeng.cn/logo.svg</url>
            <link>https://www.imufeng.cn</link>
        </image>
        <copyright>Mblog © 2021-2023 Created by 沐风</copyright>
        <item>
            <link>https://www.imufeng.cn/friend-link-list/</link>
            <guid>https://www.imufeng.cn/friend-link-list/</guid>
            <pubDate>Fri, 20 Oct 2023 08:35:28 GMT</pubDate>
            <content:encoded><![CDATA[<details class="details custom-block"><summary>友链申请格式</summary>
<ul>
<li>
<p><strong>站点名称：</strong> <code>沐风的小站</code></p>
</li>
<li>
<p><strong>站点地址：</strong> <code>https://imufeng.cn</code></p>
</li>
<li>
<p><strong>一句话：</strong> <code>但愿岁月如客，来去皆从容。</code></p>
</li>
<li>
<p><strong>头像链接：</strong> <code>https://cravatar.cn/avatar/f1dcdc8fa782b81824df5d67022e4d4a</code></p>
</li>
<li>
<p><strong>其他平台：</strong> <code>[Github/Twitter...](link)</code></p>
</li>
</ul>
</details>
<h3 id="膜拜大佬" tabindex="-1">膜拜大佬 <a class="header-anchor" href="#膜拜大佬" aria-label="Permalink to &quot;膜拜大佬&quot;">&ZeroWidthSpace;</a></h3>
<VPTeamMembers size="medium" :members="authoritys" /><h3 id="友链" tabindex="-1">友链 <a class="header-anchor" href="#友链" aria-label="Permalink to &quot;友链&quot;">&ZeroWidthSpace;</a></h3>
<VPTeamMembers size="small" :members="friends" />]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Java8新特性详解]]></title>
            <link>https://www.imufeng.cn/full-stack/java/characteristic/functional.html</link>
            <guid>https://www.imufeng.cn/full-stack/java/characteristic/functional.html</guid>
            <pubDate>Fri, 20 Oct 2023 08:13:59 GMT</pubDate>
            <description><![CDATA[Lambda 表达式、Stream 流、Optional 类操作分享。]]></description>
            <content:encoded><![CDATA[<h1 id="java8-新特性详解" tabindex="-1">Java8 新特性详解 <a class="header-anchor" href="#java8-新特性详解" aria-label="Permalink to &quot;Java8 新特性详解&quot;">&ZeroWidthSpace;</a></h1>
<blockquote>
<p>Lambda 表达式、Stream 流、Optional 类操作分享。</p>
</blockquote>
<h2 id="一、lambda表达式" tabindex="-1">一、Lambda表达式 <a class="header-anchor" href="#一、lambda表达式" aria-label="Permalink to &quot;一、Lambda表达式&quot;">&ZeroWidthSpace;</a></h2>
<p>Lambda表达式可以让你简洁的表示一个行为或传递代码。Lambda表达式可以理解为简洁的表示可传递匿名函数的一种方式：它没有名称，但是有参数列表、函数主体、返回类型</p>
<ul>
<li><strong>匿名：</strong> 没有名称</li>
<li><strong>函数：</strong> Lambda函数不像方法那样属于特定的类。但是和方法一样，有参数列表、函数体以及返回类型 。也可以抛出异常。</li>
<li><strong>传递：</strong> Lambda表达式可以作为参数传递给方法或存储在变量中。</li>
<li><strong>简介：</strong> 无需像匿名类那样写很多模板代码。</li>
</ul>
<p><strong>示例：</strong></p>
<div class="language-Java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">Java</span><pre v-pre class="shiki github-dark vp-code-dark" ><code><span class="line"><span style="color: #6A737D">// 不使用Lambda</span></span>
<span class="line"><span style="color: #E1E4E8">Comparator&lt;</span><span style="color: #F97583">Apple</span><span style="color: #E1E4E8">&gt; byWeight </span><span style="color: #F97583">=</span><span style="color: #E1E4E8"> </span><span style="color: #F97583">new</span><span style="color: #E1E4E8"> Comparator&lt;</span><span style="color: #F97583">Apple</span><span style="color: #E1E4E8">&gt;(){</span></span>
<span class="line"><span style="color: #E1E4E8">	</span><span style="color: #F97583">public</span><span style="color: #E1E4E8"> </span><span style="color: #F97583">int</span><span style="color: #E1E4E8"> </span><span style="color: #B392F0">compare</span><span style="color: #E1E4E8">(Apple </span><span style="color: #FFAB70">a1</span><span style="color: #E1E4E8">, Apple </span><span style="color: #FFAB70">a2</span><span style="color: #E1E4E8">){</span></span>
<span class="line"><span style="color: #E1E4E8">		</span><span style="color: #F97583">return</span><span style="color: #E1E4E8"> a1.</span><span style="color: #B392F0">getWeidht</span><span style="color: #E1E4E8">().</span><span style="color: #B392F0">compareTo</span><span style="color: #E1E4E8">(a2.</span><span style="color: #B392F0">getWeight</span><span style="color: #E1E4E8">());</span></span>
<span class="line"><span style="color: #E1E4E8">	}</span></span>
<span class="line"><span style="color: #E1E4E8">}  </span></span>
<span class="line"></span>
<span class="line"><span style="color: #6A737D">// 使用Lambda表达式</span></span>
<span class="line"><span style="color: #E1E4E8">Comparator&lt;Apple&gt; byWeight </span><span style="color: #F97583">=</span><span style="color: #E1E4E8"> </span></span>
<span class="line"><span style="color: #E1E4E8">    (Apple a1, Apple a2) </span><span style="color: #F97583">-&gt;</span><span style="color: #E1E4E8"> a1.</span><span style="color: #B392F0">getWeight</span><span style="color: #E1E4E8">().</span><span style="color: #B392F0">compareTo</span><span style="color: #E1E4E8">(a2.</span><span style="color: #B392F0">getWeight</span><span style="color: #E1E4E8">());</span></span></code></pre><pre v-pre class="shiki github-light vp-code-light" ><code><span class="line"><span style="color: #6A737D">// 不使用Lambda</span></span>
<span class="line"><span style="color: #24292E">Comparator&lt;</span><span style="color: #D73A49">Apple</span><span style="color: #24292E">&gt; byWeight </span><span style="color: #D73A49">=</span><span style="color: #24292E"> </span><span style="color: #D73A49">new</span><span style="color: #24292E"> Comparator&lt;</span><span style="color: #D73A49">Apple</span><span style="color: #24292E">&gt;(){</span></span>
<span class="line"><span style="color: #24292E">	</span><span style="color: #D73A49">public</span><span style="color: #24292E"> </span><span style="color: #D73A49">int</span><span style="color: #24292E"> </span><span style="color: #6F42C1">compare</span><span style="color: #24292E">(Apple </span><span style="color: #E36209">a1</span><span style="color: #24292E">, Apple </span><span style="color: #E36209">a2</span><span style="color: #24292E">){</span></span>
<span class="line"><span style="color: #24292E">		</span><span style="color: #D73A49">return</span><span style="color: #24292E"> a1.</span><span style="color: #6F42C1">getWeidht</span><span style="color: #24292E">().</span><span style="color: #6F42C1">compareTo</span><span style="color: #24292E">(a2.</span><span style="color: #6F42C1">getWeight</span><span style="color: #24292E">());</span></span>
<span class="line"><span style="color: #24292E">	}</span></span>
<span class="line"><span style="color: #24292E">}  </span></span>
<span class="line"></span>
<span class="line"><span style="color: #6A737D">// 使用Lambda表达式</span></span>
<span class="line"><span style="color: #24292E">Comparator&lt;Apple&gt; byWeight </span><span style="color: #D73A49">=</span><span style="color: #24292E"> </span></span>
<span class="line"><span style="color: #24292E">    (Apple a1, Apple a2) </span><span style="color: #D73A49">-&gt;</span><span style="color: #24292E"> a1.</span><span style="color: #6F42C1">getWeight</span><span style="color: #24292E">().</span><span style="color: #6F42C1">compareTo</span><span style="color: #24292E">(a2.</span><span style="color: #6F42C1">getWeight</span><span style="color: #24292E">());</span></span></code></pre>
</div><p><img src="https://cdn.imufeng.cn/imufeng/epub_26211813_42" alt="img"></p>
<h2 id="二、stream流" tabindex="-1">二、Stream流 <a class="header-anchor" href="#二、stream流" aria-label="Permalink to &quot;二、Stream流&quot;">&ZeroWidthSpace;</a></h2>
<blockquote>
<p><code>Stream流</code> 是 Java8 提供对集合或数组进行链状流式操作的函数式编程模式。</p>
</blockquote>
<h3 id="_2-1-中间操作" tabindex="-1">2.1 中间操作 <a class="header-anchor" href="#_2-1-中间操作" aria-label="Permalink to &quot;2.1 中间操作&quot;">&ZeroWidthSpace;</a></h3>
<ul>
<li>
<p><strong>filter：</strong> 过滤</p>
</li>
<li>
<p><strong>map：</strong> 计算或转换</p>
</li>
<li>
<p><strong>distinct：</strong> 去除重复对象（equals 方法）</p>
</li>
<li>
<p><strong>sorted：</strong> 排序，可以实现 Comparator 接口重写 compareTo 方法进行排序</p>
</li>
<li>
<p><strong>limit：</strong> 设置流的最大长度</p>
</li>
<li>
<p><strong>skip：</strong> 跳过前n个元素</p>
</li>
<li>
<p><strong>flatMap：</strong> 将一个对象转换为多个对象作为流中的元素</p>
</li>
</ul>
<h3 id="_2-2-终结操作" tabindex="-1">2.2 终结操作 <a class="header-anchor" href="#_2-2-终结操作" aria-label="Permalink to &quot;2.2 终结操作&quot;">&ZeroWidthSpace;</a></h3>
<div class="danger custom-block"><p class="custom-block-title">注意</p>
<p>如果没有终结操作，中间操作不会执行</p>
</div>
<h4 id="常规操作" tabindex="-1">常规操作 <a class="header-anchor" href="#常规操作" aria-label="Permalink to &quot;常规操作&quot;">&ZeroWidthSpace;</a></h4>
<ul>
<li>
<p><strong>forEach：</strong> 遍历</p>
</li>
<li>
<p><strong>count：</strong> 计数</p>
</li>
<li>
<p><strong>max&amp;min：</strong> 求最值 需要指定比较最大值的规则 返回 Optional</p>
</li>
<li>
<p><strong>collect：</strong> 将流转换为集合</p>
</li>
</ul>
<h4 id="查找与匹配" tabindex="-1">查找与匹配 <a class="header-anchor" href="#查找与匹配" aria-label="Permalink to &quot;查找与匹配&quot;">&ZeroWidthSpace;</a></h4>
<ul>
<li>
<p><strong>anyMatch：</strong> 判断是否存在能够符合匹配条件的元素</p>
</li>
<li>
<p><strong>allMatch：</strong> 判断是否全部匹配条件</p>
</li>
<li>
<p><strong>noneMatch：</strong> 是否都不符合条件</p>
</li>
<li>
<p><strong>findAny：</strong> 获取任意一个符合条件元素（不一定是第一个）</p>
</li>
<li>
<p><strong>findFirst：</strong> 获取第一个符合条件的元素</p>
</li>
</ul>
<h4 id="reduce归并" tabindex="-1">reduce归并 <a class="header-anchor" href="#reduce归并" aria-label="Permalink to &quot;reduce归并&quot;">&ZeroWidthSpace;</a></h4>
<p>对流中的数据按照你指定的计算方式计算出一个结果 （缩减操作）</p>
<div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre v-pre class="shiki github-dark vp-code-dark" ><code><span class="line"><span style="color: #E1E4E8">System.out.</span><span style="color: #B392F0">println</span><span style="color: #E1E4E8">(people.</span><span style="color: #B392F0">stream</span><span style="color: #E1E4E8">()</span></span>
<span class="line"><span style="color: #E1E4E8">        .</span><span style="color: #B392F0">distinct</span><span style="color: #E1E4E8">()</span></span>
<span class="line"><span style="color: #E1E4E8">        .</span><span style="color: #B392F0">map</span><span style="color: #E1E4E8">(People</span><span style="color: #F97583">::</span><span style="color: #E1E4E8">getAge)</span></span>
<span class="line"><span style="color: #E1E4E8">        .</span><span style="color: #B392F0">reduce</span><span style="color: #E1E4E8">(</span><span style="color: #79B8FF">0</span><span style="color: #E1E4E8">, (o1, o2) </span><span style="color: #F97583">-&gt;</span><span style="color: #E1E4E8"> o1 </span><span style="color: #F97583">+=</span><span style="color: #E1E4E8"> o2));</span></span>
<span class="line"><span style="color: #E1E4E8">System.out.</span><span style="color: #B392F0">println</span><span style="color: #E1E4E8">(people.</span><span style="color: #B392F0">stream</span><span style="color: #E1E4E8">()</span></span>
<span class="line"><span style="color: #E1E4E8">        .</span><span style="color: #B392F0">distinct</span><span style="color: #E1E4E8">()</span></span>
<span class="line"><span style="color: #E1E4E8">        .</span><span style="color: #B392F0">map</span><span style="color: #E1E4E8">(People</span><span style="color: #F97583">::</span><span style="color: #E1E4E8">getAge)</span></span>
<span class="line"><span style="color: #E1E4E8">        .</span><span style="color: #B392F0">reduce</span><span style="color: #E1E4E8">(</span><span style="color: #79B8FF">0</span><span style="color: #E1E4E8">, Integer</span><span style="color: #F97583">::</span><span style="color: #E1E4E8">sum));</span></span></code></pre><pre v-pre class="shiki github-light vp-code-light" ><code><span class="line"><span style="color: #24292E">System.out.</span><span style="color: #6F42C1">println</span><span style="color: #24292E">(people.</span><span style="color: #6F42C1">stream</span><span style="color: #24292E">()</span></span>
<span class="line"><span style="color: #24292E">        .</span><span style="color: #6F42C1">distinct</span><span style="color: #24292E">()</span></span>
<span class="line"><span style="color: #24292E">        .</span><span style="color: #6F42C1">map</span><span style="color: #24292E">(People</span><span style="color: #D73A49">::</span><span style="color: #24292E">getAge)</span></span>
<span class="line"><span style="color: #24292E">        .</span><span style="color: #6F42C1">reduce</span><span style="color: #24292E">(</span><span style="color: #005CC5">0</span><span style="color: #24292E">, (o1, o2) </span><span style="color: #D73A49">-&gt;</span><span style="color: #24292E"> o1 </span><span style="color: #D73A49">+=</span><span style="color: #24292E"> o2));</span></span>
<span class="line"><span style="color: #24292E">System.out.</span><span style="color: #6F42C1">println</span><span style="color: #24292E">(people.</span><span style="color: #6F42C1">stream</span><span style="color: #24292E">()</span></span>
<span class="line"><span style="color: #24292E">        .</span><span style="color: #6F42C1">distinct</span><span style="color: #24292E">()</span></span>
<span class="line"><span style="color: #24292E">        .</span><span style="color: #6F42C1">map</span><span style="color: #24292E">(People</span><span style="color: #D73A49">::</span><span style="color: #24292E">getAge)</span></span>
<span class="line"><span style="color: #24292E">        .</span><span style="color: #6F42C1">reduce</span><span style="color: #24292E">(</span><span style="color: #005CC5">0</span><span style="color: #24292E">, Integer</span><span style="color: #D73A49">::</span><span style="color: #24292E">sum));</span></span></code></pre>
</div><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre v-pre class="shiki github-dark vp-code-dark" ><code><span class="line"><span style="color: #E1E4E8">System.out.</span><span style="color: #B392F0">println</span><span style="color: #E1E4E8">(people.</span><span style="color: #B392F0">stream</span><span style="color: #E1E4E8">()</span></span>
<span class="line"><span style="color: #E1E4E8">        .</span><span style="color: #B392F0">distinct</span><span style="color: #E1E4E8">()</span></span>
<span class="line"><span style="color: #E1E4E8">        .</span><span style="color: #B392F0">map</span><span style="color: #E1E4E8">(People</span><span style="color: #F97583">::</span><span style="color: #E1E4E8">getAge)</span></span>
<span class="line"><span style="color: #E1E4E8">        .</span><span style="color: #B392F0">reduce</span><span style="color: #E1E4E8">(Integer.MIN_VALUE, Integer</span><span style="color: #F97583">::</span><span style="color: #E1E4E8">max));</span></span>
<span class="line"><span style="color: #E1E4E8">System.out.</span><span style="color: #B392F0">println</span><span style="color: #E1E4E8">(people.</span><span style="color: #B392F0">stream</span><span style="color: #E1E4E8">()</span></span>
<span class="line"><span style="color: #E1E4E8">        .</span><span style="color: #B392F0">distinct</span><span style="color: #E1E4E8">()</span></span>
<span class="line"><span style="color: #E1E4E8">        .</span><span style="color: #B392F0">map</span><span style="color: #E1E4E8">(People</span><span style="color: #F97583">::</span><span style="color: #E1E4E8">getAge)</span></span>
<span class="line"><span style="color: #E1E4E8">        .</span><span style="color: #B392F0">reduce</span><span style="color: #E1E4E8">(Integer.MAX_VALUE, Integer</span><span style="color: #F97583">::</span><span style="color: #E1E4E8">min));</span></span></code></pre><pre v-pre class="shiki github-light vp-code-light" ><code><span class="line"><span style="color: #24292E">System.out.</span><span style="color: #6F42C1">println</span><span style="color: #24292E">(people.</span><span style="color: #6F42C1">stream</span><span style="color: #24292E">()</span></span>
<span class="line"><span style="color: #24292E">        .</span><span style="color: #6F42C1">distinct</span><span style="color: #24292E">()</span></span>
<span class="line"><span style="color: #24292E">        .</span><span style="color: #6F42C1">map</span><span style="color: #24292E">(People</span><span style="color: #D73A49">::</span><span style="color: #24292E">getAge)</span></span>
<span class="line"><span style="color: #24292E">        .</span><span style="color: #6F42C1">reduce</span><span style="color: #24292E">(Integer.MIN_VALUE, Integer</span><span style="color: #D73A49">::</span><span style="color: #24292E">max));</span></span>
<span class="line"><span style="color: #24292E">System.out.</span><span style="color: #6F42C1">println</span><span style="color: #24292E">(people.</span><span style="color: #6F42C1">stream</span><span style="color: #24292E">()</span></span>
<span class="line"><span style="color: #24292E">        .</span><span style="color: #6F42C1">distinct</span><span style="color: #24292E">()</span></span>
<span class="line"><span style="color: #24292E">        .</span><span style="color: #6F42C1">map</span><span style="color: #24292E">(People</span><span style="color: #D73A49">::</span><span style="color: #24292E">getAge)</span></span>
<span class="line"><span style="color: #24292E">        .</span><span style="color: #6F42C1">reduce</span><span style="color: #24292E">(Integer.MAX_VALUE, Integer</span><span style="color: #D73A49">::</span><span style="color: #24292E">min));</span></span></code></pre>
</div><h2 id="三、optional" tabindex="-1">三、Optional <a class="header-anchor" href="#三、optional" aria-label="Permalink to &quot;三、Optional&quot;">&ZeroWidthSpace;</a></h2>
<blockquote>
<p>使用 Optional 可以写出更优雅的代码来避免空指针异常</p>
<p>Optional 类似于包装类，将具体的数据封装到Optional对象内部。我们可以使用Optional中封装好的方法操作封装的数据。优雅的避免空指针异常</p>
</blockquote>
<h3 id="创建对象" tabindex="-1">创建对象 <a class="header-anchor" href="#创建对象" aria-label="Permalink to &quot;创建对象&quot;">&ZeroWidthSpace;</a></h3>
<p><code>ofNullAble()</code> 方法会将其封装为一个Optional对象</p>
<div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre v-pre class="shiki github-dark vp-code-dark" ><code><span class="line"><span style="color: #E1E4E8">People people </span><span style="color: #F97583">=</span><span style="color: #E1E4E8"> </span><span style="color: #F97583">new</span><span style="color: #E1E4E8"> </span><span style="color: #B392F0">People</span><span style="color: #E1E4E8">();</span></span>
<span class="line"><span style="color: #E1E4E8">Optional&lt;</span><span style="color: #F97583">People</span><span style="color: #E1E4E8">&gt; people1 </span><span style="color: #F97583">=</span><span style="color: #E1E4E8"> Optional.</span><span style="color: #B392F0">ofNullable</span><span style="color: #E1E4E8">(people);</span></span></code></pre><pre v-pre class="shiki github-light vp-code-light" ><code><span class="line"><span style="color: #24292E">People people </span><span style="color: #D73A49">=</span><span style="color: #24292E"> </span><span style="color: #D73A49">new</span><span style="color: #24292E"> </span><span style="color: #6F42C1">People</span><span style="color: #24292E">();</span></span>
<span class="line"><span style="color: #24292E">Optional&lt;</span><span style="color: #D73A49">People</span><span style="color: #24292E">&gt; people1 </span><span style="color: #D73A49">=</span><span style="color: #24292E"> Optional.</span><span style="color: #6F42C1">ofNullable</span><span style="color: #24292E">(people);</span></span></code></pre>
</div><p>如果能够保证传入的对象非空，则可以使用of()方法封装</p>
<div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre v-pre class="shiki github-dark vp-code-dark" ><code><span class="line"><span style="color: #E1E4E8">People people </span><span style="color: #F97583">=</span><span style="color: #E1E4E8"> </span><span style="color: #F97583">new</span><span style="color: #E1E4E8"> </span><span style="color: #B392F0">People</span><span style="color: #E1E4E8">();</span></span>
<span class="line"><span style="color: #E1E4E8">people.</span><span style="color: #B392F0">setName</span><span style="color: #E1E4E8">(</span><span style="color: #9ECBFF">&quot;mufeng&quot;</span><span style="color: #E1E4E8">);</span></span>
<span class="line"><span style="color: #E1E4E8">people.</span><span style="color: #B392F0">setAge</span><span style="color: #E1E4E8">(</span><span style="color: #79B8FF">13</span><span style="color: #E1E4E8">);</span></span>
<span class="line"><span style="color: #E1E4E8">Optional&lt;</span><span style="color: #F97583">People</span><span style="color: #E1E4E8">&gt; people1 </span><span style="color: #F97583">=</span><span style="color: #E1E4E8"> Optional.</span><span style="color: #B392F0">of</span><span style="color: #E1E4E8">(people);</span></span></code></pre><pre v-pre class="shiki github-light vp-code-light" ><code><span class="line"><span style="color: #24292E">People people </span><span style="color: #D73A49">=</span><span style="color: #24292E"> </span><span style="color: #D73A49">new</span><span style="color: #24292E"> </span><span style="color: #6F42C1">People</span><span style="color: #24292E">();</span></span>
<span class="line"><span style="color: #24292E">people.</span><span style="color: #6F42C1">setName</span><span style="color: #24292E">(</span><span style="color: #032F62">&quot;mufeng&quot;</span><span style="color: #24292E">);</span></span>
<span class="line"><span style="color: #24292E">people.</span><span style="color: #6F42C1">setAge</span><span style="color: #24292E">(</span><span style="color: #005CC5">13</span><span style="color: #24292E">);</span></span>
<span class="line"><span style="color: #24292E">Optional&lt;</span><span style="color: #D73A49">People</span><span style="color: #24292E">&gt; people1 </span><span style="color: #D73A49">=</span><span style="color: #24292E"> Optional.</span><span style="color: #6F42C1">of</span><span style="color: #24292E">(people);</span></span></code></pre>
</div><p>如果需要一个空值，使用 emepy() 方法</p>
<h3 id="安全获取值" tabindex="-1">安全获取值 <a class="header-anchor" href="#安全获取值" aria-label="Permalink to &quot;安全获取值&quot;">&ZeroWidthSpace;</a></h3>
<p><code>orElseGet()</code>	如果非空则返回，如果为空则给默认值</p>
<p><code>orElseThrow()</code> 获取数据，为空则抛出异常</p>
<h3 id="其他方法" tabindex="-1">其他方法 <a class="header-anchor" href="#其他方法" aria-label="Permalink to &quot;其他方法&quot;">&ZeroWidthSpace;</a></h3>
<p><code>filter()</code> 类似于Stream流中的filter方法</p>
<p><code>isPeresent（）</code> 进行是否存在值的判断（更推荐使用<code>ifPeresent()</code>方法）</p>
<p><code>map()</code> 数据转换。类似于Stream流中的map方法</p>
<h2 id="四、函数式接口" tabindex="-1">四、函数式接口 <a class="header-anchor" href="#四、函数式接口" aria-label="Permalink to &quot;四、函数式接口&quot;">&ZeroWidthSpace;</a></h2>
<blockquote>
<p><strong>只有一个抽象方法的接口称为函数式接口</strong></p>
<p>JDK的函数式接口都加上了<code>@FunctionalInterface</code>进行标识。但是加不加都无所谓。</p>
</blockquote>
<h3 id="常用的函数式接口" tabindex="-1">常用的函数式接口 <a class="header-anchor" href="#常用的函数式接口" aria-label="Permalink to &quot;常用的函数式接口&quot;">&ZeroWidthSpace;</a></h3>
<p><code>Consumer</code>	消费接口</p>
<p><code>Function</code>	计算转换接口</p>
<p><code>Predicate</code>	判断接口</p>
<p><code>Supplier</code>	生产型接口</p>
<h3 id="常用的默认方法" tabindex="-1">常用的默认方法 <a class="header-anchor" href="#常用的默认方法" aria-label="Permalink to &quot;常用的默认方法&quot;">&ZeroWidthSpace;</a></h3>
<p><code>and</code>	判断条件的并集</p>
<p><code>or</code>	判断条件的交集</p>
<p><code>negate</code>	判断条件取反</p>
<h3 id="方法引用" tabindex="-1">方法引用 <a class="header-anchor" href="#方法引用" aria-label="Permalink to &quot;方法引用&quot;">&ZeroWidthSpace;</a></h3>
<p><code>类名/对象名::方法名</code></p>
]]></content:encoded>
            <enclosure url="https://cdn.imufeng.cn/imufeng/epub_26211813_42" length="0" type="image//imufeng/epub_26211813_42"/>
        </item>
        <item>
            <title><![CDATA[目录]]></title>
            <link>https://www.imufeng.cn/full-stack/java/</link>
            <guid>https://www.imufeng.cn/full-stack/java/</guid>
            <pubDate>Fri, 20 Oct 2023 07:55:50 GMT</pubDate>
            <content:encoded><![CDATA[<h1 id="目录" tabindex="-1">目录 <a class="header-anchor" href="#目录" aria-label="Permalink to &quot;目录&quot;">&ZeroWidthSpace;</a></h1>
<h3 id="面向对象" tabindex="-1">面向对象 <a class="header-anchor" href="#面向对象" aria-label="Permalink to &quot;面向对象&quot;">&ZeroWidthSpace;</a></h3>
<ul>
<li><a href="./oop/abstract.html">抽象类和抽象方法</a></li>
</ul>
<h3 id="java-特性分享" tabindex="-1">JAVA 特性分享 <a class="header-anchor" href="#java-特性分享" aria-label="Permalink to &quot;JAVA 特性分享&quot;">&ZeroWidthSpace;</a></h3>
<ul>
<li><a href="./characteristic/functional.html">Java8新特性详解</a></li>
</ul>
]]></content:encoded>
        </item>
        <item>
            <link>https://www.imufeng.cn/question-by-day/2023/10.html</link>
            <guid>https://www.imufeng.cn/question-by-day/2023/10.html</guid>
            <pubDate>Fri, 20 Oct 2023 07:55:50 GMT</pubDate>
            <description><![CDATA[

## 10-20

 ### 请简单介绍JAVA8新特性？
> JAVA8 已经名义上停止维护了，但是 JAVA8 新特性还是面试经常会问到的点。就是为了考察 `函数式编程` 以及 `stream 流` 的掌握情况。

- **Lambda 表达式：**
JAVA8 之后允许使用更简洁的箭头函数创建函数式接口的实例，在功能上与匿名内部类类似，但是更加简洁。

- **Stream 流操作：**
Stream 流允许开发者对集合或数组进行链状流式操作，基于函数式编程模型。分为中间操作及终结操作。

- **Optional 类：**
使用 Optional 可以写出更优雅的代码来避免空指针异常。
Optional 类似于包装类，将具体的数据封装到Optional对象内部。我们可以使用 Optional 中封装好的方法操作封装的数据。优雅的避免空指针异常。

## 10-19

 ### Integer和int的区别？

Java 虽然宣称一切都是对象，但原始数据类型是例外。int 是整形数字，是 java 的8个原始数据类型（Primitive Types）（char、boolean、byte、short、int、long、float、double）之一。在 java API 中有对应的包装类，分别是Character、Boolean、Byte、Short、Integer、Long、Float、Double。

Integer 是 int 对应的包装类，它有一个int类型的字段存储数据，并且提供了基本操作，比如数学运算、int和字符串之间转换等。在 java 5 中引入了自动装箱和自动拆箱功能（boxing/unboxing），java 可以根据上下文，自动进行转换，极大地简化了相关编程。javac自动把装箱转换为Integer.valueOf(),把拆箱替换为Integer.intValue()。

自动装箱实际上算是一种语法糖。什么是语法糖？可以简单理解为java平台为我们自动进行了一些转换，保证不同的写法在运行时等价，他们发生在编译阶段，也就是生产的字节码是一致的。

原始数据类型和 java 泛型并不能配合使用。因为 java 的泛型某种程度上可以算作伪泛型，它完全是一种编译期的技巧，java 编译期会自动将类型转换为对应的特定类型。这就决定了使用泛型，必须保证相应类型可以转换为 Object。

## 10-18

### 抽象类和接口的区别？

1. 一个类可以实现多个接口，但只能继承一个抽象类。接口本身可以通过 extends 关键字扩展多个接口。

2. 抽象类可以有构造方法，接口中不能有构造方法。

3. 抽象类中不一定都是抽象方法，也可以全是具体方法（非抽象方法）。在 Java8 之前，接口中的所有方法必须是抽象的。但Java8的时候，接口可以有默认方法和静态方法。

4. 接口中只能有 static、final 变量，不能有其他变量，而抽象类中不一定。

5. 接口中的方法和变量默认修饰符为 public（写不写都是public），而抽象类中的方法可以是 public，protected 和默认类型（抽象方法就是为了被重写所以不能是 private 修饰）

## 10-17

### 构造器是否可被重写？


重写是子类覆盖父类的方法，而构造器名称与类名相同，不可能存在重写的概念。

但是在一个类中，是可以存在多个参数不同的构造器的，这是构造器的重载。


## 10-16

### 请描述 & 和 && 的区别。

**相同点：**`&` 和 `&&` 都可以用作逻辑与的运算符，表示逻辑与（and）。

**不同点：**

1、`&&` 具有短路的功能，而 `&` 不具备短路功能。

2、当 `&` 运算符两边的表达式的结果都为 true 时，整个运算结果才为 true。而&&运算符第一个表达式为 false 时，则结果为 false，不再计算第二个表达式。 

3、`&` 还可以用作位运算符，当 `&` 操作符两边的表达式不是boolean类型时，`&` 表示按位与操作，我们通常使用 0x0f 来与一个整数进行&运算，来获取该整数的最低4个 bit 位，例如：0x31 & 0x0f 的结果为 0x01。

## 10-15

### 请描述面向对象的特征。

面向对象有三大特征：`继承`、`封装`、`多态`

如果是四大特征：`继承`、`封装`、`多态`、`抽象`

**继承：**
在定义和实现一个类的时候，可以在一个已经存在的类的基础之上来进行，把这个已经存在的类所定义的内容作为自己的内容，并可以加入若干新的内容，或修改原来的方法使之更适合特殊的需要，这就是继承。比如，遗产的继承。
**封装：**
面向对象的封装性指的是将对象封装成一个高度自治和相对封闭的个体，对象状态（属性）由这个对象自己的行为（方法）来读取和改变
**多态：**
多态指的是程序中定义的引用变量所指向的具体类型和通过该引用变量发出的方法调用在编程时并不确定，而是在程序运行期间才确定，即一个引用变量到底会指向哪个类的实例对象，该引用变量发出的方法调用到底在哪个类中实现的方法，必须在由程序运营期间才能决定。
**抽象：**
抽象就是找出一些事物的相似和共性之处，然后将这些事物归为一个类，这个类只考虑这些事物的相似和共性之处，并且会忽略与当前主题和目标无关的那些方面，将注意力集中在与当前目标有关的方面。就是把现实生活的对象，抽象为类。

## 10-14

### Java 中 throw 和 throws 区别？

- `throw` 是语句抛出的一个异常。
- `throws` 是方法可能抛出异常的声明。

两者都是“消极处理异常”的方式（指抛出或可能抛出异常）。

## 10-13

### 运行时异常与受检异常有何异同？

所有异常都继承自 `java.lang.Throwable`，它有两个直接的子类 Error 与 Exception。

Java Compiler 要求所有的 Exception 要么被 catch ，要么被 throw，除非这是一个 RuntimeExeption。

**受检异常（Checked Exception）**是在编译时期有编译器检测的异常，该异常必须要被处理。受检异常继承于Exception。

**非受检异常（Unchecked Exception）**是在运行时期的异常，即编译器不会检测异常，需要时也可以捕获异常。非受检异常继承于RuntimeException。


## 10-12

### 是否可以继承String类？

String 类是不能被继承的，因为他是被final关键字修饰的。

```java
public final class String
    implements java.io.Serializable, Comparable<String>, CharSequence,
               Constable, ConstantDesc {
  ......
}

```

## 10-11

### String 类的长度有限制吗？

String 是由一个字符数组 `char[]` 来存储的，由于数组的长度及索引是整数且 String 类中返回字符串长度的方法 `length()` 的返回值也是 int ，
所以通过查看 java 源码中的类 Integer 我们可以看到 Integer 的最大范围是`2^31 -1`,
由于数组是从0开始的，所以数组的最大长度可以使【0~2^31】通过计算是大概4GB。

但是通过翻阅 java 虚拟机手册对 class 文件格式的定义以及常量池中对 String 类型的结构体定义我们可以知道对于索引定义了 u2，就是无符号占2个字节，
2个字节可以表示的最大范围是 `2^16 -1 = 65535`。 但是由于JVM需要1个字节表示结束指令，所以这个范围就为65534了。
超出这个范围在编译时期是会报错的，但是运行时拼接或者赋值的话范围是在整形的最大范围。

## 10-10

### 什么是节流和防抖？应用场景有哪些？

在前端开发过程中，当函数绑定到某些可能会持续触发的事件中时，
可能会造成性能和资源的浪费。如鼠标的移动、提交按钮可能被用户快速重复的点击等。
**节流**和**防抖**就是为了解决这一问题。

- **防抖（debounce）：**
防抖指事件触发时，它将在指定时间后执行，如果这段时间内再次被调用，则重新计算执行时间。
通常用于滚动事件、调整窗口大小、鼠标移动、窗口搜索建议等。
```javascript
function debounce(func, delay) {
    let timeoutId;
    return function (...args) {
        clearTimeout(timeoutId);
        timeoutId = setTimeout(() => {
            func(...args);
        }, delay);
    };
}

// 使用防抖函数
const debouncedFunction = debounce(() => {
    console.log('Debounced function called.');
}, 1000);

// 模拟事件触发
setInterval(() => {
    debouncedFunction();
}, 200);  // 防抖后，该函数触发后会等待1秒，如果1秒内再次触发，则重新计时

```
- **节流（throttle）：** 
节流指连续触发多次的事件在指定时间范围内只执行一次，进而限制函数的执行频率。
通常用于自动保存、延时执行等。
```javascript
function throttle(func, delay) {
  let lastCall = 0;
  return function (...args) {
    const now = new Date().getTime();
    if (now - lastCall < delay) return;
    lastCall = now;
    func(...args);
  };
}

// 使用节流函数
const throttledFunction = throttle(() => {
  console.log('Throttled function called.');
}, 1000);

// 模拟事件触发
setInterval(throttledFunction, 200);  // 节流后，该函数每秒最多执行一次

```

> 总的来说，节流和防抖都是为了限制函数执行的频率，以优化性能、减少不必要的计算或请求，提高用户体验。选择使用哪种取决于具体的需求和事件特性。

## 10-9

### 请描述 static 修饰符。

`static` 关键字可以用于类、方法、属性等。

**静态字段**

如果将一个字段定义为static，那么这个字段并不会出现在每个类的对象中。每个静态字段只有一个副本。可以认为静态字段属于类，而不属于单个对象。

**静态常量**

JAVA中没有用于修饰常量的关键字，所以常量的修饰通常使用 `public static final` 三个关键字共同修饰。使其静态加载且不允许修改。

**静态方法**

静态方法是不操作对象的方法。例如 `Math.pow(x,a)`会计算 x 的 a 次幂。它不会使用任何 Math 对象来完成该方法调用。它没有隐式参数。

**工厂方法**

类似于 `LocalDate` 和 `NumberFormat` 的类使用静态工厂方法来构造对象，就是静态方法：

```Java
LocalDate localdate = LocalDate.now(); 
LocalDate localdate = LocalDate.of(2020, 5, 13);  
System.out.println(NumberFormat.format(0.1));
```

**main 方法**

调用静态方法不需要任何对象，与 `Math.pow` 同理，main 方法也是一个静态方法，启动程序时没有任何对象，将执行 main 方法并构造程序所需要的对象。

## 10-8

### 请描述修饰符、访问修饰符，非访问修饰符。

- **修饰符**（Modifiers）：指用于修饰类、方法。变量等的关键字，用于置顶元素的访问类型。作用域、权限、继承性、抽象性等。修饰符分为访问修饰符和非访问修饰符。

- **访问修饰符（Access Modifiers）**: 访问修饰符控制类、方法、变量等的访问权限，共有以下四中：

  | Name      | Description     |
  |]]></description>
            <content:encoded><![CDATA[<h2 id="_10-20" tabindex="-1">10-20 <a class="header-anchor" href="#_10-20" aria-label="Permalink to &quot;10-20&quot;">&ZeroWidthSpace;</a></h2>
<h3 id="请简单介绍java8新特性" tabindex="-1">请简单介绍JAVA8新特性？ <a class="header-anchor" href="#请简单介绍java8新特性" aria-label="Permalink to &quot;请简单介绍JAVA8新特性？&quot;">&ZeroWidthSpace;</a></h3>
<blockquote>
<p>JAVA8 已经名义上停止维护了，但是 JAVA8 新特性还是面试经常会问到的点。就是为了考察 <code>函数式编程</code> 以及 <code>stream 流</code> 的掌握情况。</p>
</blockquote>
<ul>
<li>
<p><strong>Lambda 表达式：</strong>
JAVA8 之后允许使用更简洁的箭头函数创建函数式接口的实例，在功能上与匿名内部类类似，但是更加简洁。</p>
</li>
<li>
<p><strong>Stream 流操作：</strong>
Stream 流允许开发者对集合或数组进行链状流式操作，基于函数式编程模型。分为中间操作及终结操作。</p>
</li>
<li>
<p><strong>Optional 类：</strong>
使用 Optional 可以写出更优雅的代码来避免空指针异常。
Optional 类似于包装类，将具体的数据封装到Optional对象内部。我们可以使用 Optional 中封装好的方法操作封装的数据。优雅的避免空指针异常。</p>
</li>
</ul>
<h2 id="_10-19" tabindex="-1">10-19 <a class="header-anchor" href="#_10-19" aria-label="Permalink to &quot;10-19&quot;">&ZeroWidthSpace;</a></h2>
<h3 id="integer和int的区别" tabindex="-1">Integer和int的区别？ <a class="header-anchor" href="#integer和int的区别" aria-label="Permalink to &quot;Integer和int的区别？&quot;">&ZeroWidthSpace;</a></h3>
<p>Java 虽然宣称一切都是对象，但原始数据类型是例外。int 是整形数字，是 java 的8个原始数据类型（Primitive Types）（char、boolean、byte、short、int、long、float、double）之一。在 java API 中有对应的包装类，分别是Character、Boolean、Byte、Short、Integer、Long、Float、Double。</p>
<p>Integer 是 int 对应的包装类，它有一个int类型的字段存储数据，并且提供了基本操作，比如数学运算、int和字符串之间转换等。在 java 5 中引入了自动装箱和自动拆箱功能（boxing/unboxing），java 可以根据上下文，自动进行转换，极大地简化了相关编程。javac自动把装箱转换为Integer.valueOf(),把拆箱替换为Integer.intValue()。</p>
<p>自动装箱实际上算是一种语法糖。什么是语法糖？可以简单理解为java平台为我们自动进行了一些转换，保证不同的写法在运行时等价，他们发生在编译阶段，也就是生产的字节码是一致的。</p>
<p>原始数据类型和 java 泛型并不能配合使用。因为 java 的泛型某种程度上可以算作伪泛型，它完全是一种编译期的技巧，java 编译期会自动将类型转换为对应的特定类型。这就决定了使用泛型，必须保证相应类型可以转换为 Object。</p>
<h2 id="_10-18" tabindex="-1">10-18 <a class="header-anchor" href="#_10-18" aria-label="Permalink to &quot;10-18&quot;">&ZeroWidthSpace;</a></h2>
<h3 id="抽象类和接口的区别" tabindex="-1">抽象类和接口的区别？ <a class="header-anchor" href="#抽象类和接口的区别" aria-label="Permalink to &quot;抽象类和接口的区别？&quot;">&ZeroWidthSpace;</a></h3>
<ol>
<li>
<p>一个类可以实现多个接口，但只能继承一个抽象类。接口本身可以通过 extends 关键字扩展多个接口。</p>
</li>
<li>
<p>抽象类可以有构造方法，接口中不能有构造方法。</p>
</li>
<li>
<p>抽象类中不一定都是抽象方法，也可以全是具体方法（非抽象方法）。在 Java8 之前，接口中的所有方法必须是抽象的。但Java8的时候，接口可以有默认方法和静态方法。</p>
</li>
<li>
<p>接口中只能有 static、final 变量，不能有其他变量，而抽象类中不一定。</p>
</li>
<li>
<p>接口中的方法和变量默认修饰符为 public（写不写都是public），而抽象类中的方法可以是 public，protected 和默认类型（抽象方法就是为了被重写所以不能是 private 修饰）</p>
</li>
</ol>
<h2 id="_10-17" tabindex="-1">10-17 <a class="header-anchor" href="#_10-17" aria-label="Permalink to &quot;10-17&quot;">&ZeroWidthSpace;</a></h2>
<h3 id="构造器是否可被重写" tabindex="-1">构造器是否可被重写？ <a class="header-anchor" href="#构造器是否可被重写" aria-label="Permalink to &quot;构造器是否可被重写？&quot;">&ZeroWidthSpace;</a></h3>
<p>重写是子类覆盖父类的方法，而构造器名称与类名相同，不可能存在重写的概念。</p>
<p>但是在一个类中，是可以存在多个参数不同的构造器的，这是构造器的重载。</p>
<h2 id="_10-16" tabindex="-1">10-16 <a class="header-anchor" href="#_10-16" aria-label="Permalink to &quot;10-16&quot;">&ZeroWidthSpace;</a></h2>
<h3 id="请描述-和-的区别。" tabindex="-1">请描述 &amp; 和 &amp;&amp; 的区别。 <a class="header-anchor" href="#请描述-和-的区别。" aria-label="Permalink to &quot;请描述 &amp; 和 &amp;&amp; 的区别。&quot;">&ZeroWidthSpace;</a></h3>
<p><strong>相同点：</strong><code>&amp;</code> 和 <code>&amp;&amp;</code> 都可以用作逻辑与的运算符，表示逻辑与（and）。</p>
<p><strong>不同点：</strong></p>
<p>1、<code>&amp;&amp;</code> 具有短路的功能，而 <code>&amp;</code> 不具备短路功能。</p>
<p>2、当 <code>&amp;</code> 运算符两边的表达式的结果都为 true 时，整个运算结果才为 true。而&amp;&amp;运算符第一个表达式为 false 时，则结果为 false，不再计算第二个表达式。</p>
<p>3、<code>&amp;</code> 还可以用作位运算符，当 <code>&amp;</code> 操作符两边的表达式不是boolean类型时，<code>&amp;</code> 表示按位与操作，我们通常使用 0x0f 来与一个整数进行&amp;运算，来获取该整数的最低4个 bit 位，例如：0x31 &amp; 0x0f 的结果为 0x01。</p>
<h2 id="_10-15" tabindex="-1">10-15 <a class="header-anchor" href="#_10-15" aria-label="Permalink to &quot;10-15&quot;">&ZeroWidthSpace;</a></h2>
<h3 id="请描述面向对象的特征。" tabindex="-1">请描述面向对象的特征。 <a class="header-anchor" href="#请描述面向对象的特征。" aria-label="Permalink to &quot;请描述面向对象的特征。&quot;">&ZeroWidthSpace;</a></h3>
<p>面向对象有三大特征：<code>继承</code>、<code>封装</code>、<code>多态</code></p>
<p>如果是四大特征：<code>继承</code>、<code>封装</code>、<code>多态</code>、<code>抽象</code></p>
<p><strong>继承：</strong>
在定义和实现一个类的时候，可以在一个已经存在的类的基础之上来进行，把这个已经存在的类所定义的内容作为自己的内容，并可以加入若干新的内容，或修改原来的方法使之更适合特殊的需要，这就是继承。比如，遗产的继承。
<strong>封装：</strong>
面向对象的封装性指的是将对象封装成一个高度自治和相对封闭的个体，对象状态（属性）由这个对象自己的行为（方法）来读取和改变
<strong>多态：</strong>
多态指的是程序中定义的引用变量所指向的具体类型和通过该引用变量发出的方法调用在编程时并不确定，而是在程序运行期间才确定，即一个引用变量到底会指向哪个类的实例对象，该引用变量发出的方法调用到底在哪个类中实现的方法，必须在由程序运营期间才能决定。
<strong>抽象：</strong>
抽象就是找出一些事物的相似和共性之处，然后将这些事物归为一个类，这个类只考虑这些事物的相似和共性之处，并且会忽略与当前主题和目标无关的那些方面，将注意力集中在与当前目标有关的方面。就是把现实生活的对象，抽象为类。</p>
<h2 id="_10-14" tabindex="-1">10-14 <a class="header-anchor" href="#_10-14" aria-label="Permalink to &quot;10-14&quot;">&ZeroWidthSpace;</a></h2>
<h3 id="java-中-throw-和-throws-区别" tabindex="-1">Java 中 throw 和 throws 区别？ <a class="header-anchor" href="#java-中-throw-和-throws-区别" aria-label="Permalink to &quot;Java 中 throw 和 throws 区别？&quot;">&ZeroWidthSpace;</a></h3>
<ul>
<li><code>throw</code> 是语句抛出的一个异常。</li>
<li><code>throws</code> 是方法可能抛出异常的声明。</li>
</ul>
<p>两者都是“消极处理异常”的方式（指抛出或可能抛出异常）。</p>
<h2 id="_10-13" tabindex="-1">10-13 <a class="header-anchor" href="#_10-13" aria-label="Permalink to &quot;10-13&quot;">&ZeroWidthSpace;</a></h2>
<h3 id="运行时异常与受检异常有何异同" tabindex="-1">运行时异常与受检异常有何异同？ <a class="header-anchor" href="#运行时异常与受检异常有何异同" aria-label="Permalink to &quot;运行时异常与受检异常有何异同？&quot;">&ZeroWidthSpace;</a></h3>
<p>所有异常都继承自 <code>java.lang.Throwable</code>，它有两个直接的子类 Error 与 Exception。</p>
<p>Java Compiler 要求所有的 Exception 要么被 catch ，要么被 throw，除非这是一个 RuntimeExeption。</p>
<p>**受检异常（Checked Exception）**是在编译时期有编译器检测的异常，该异常必须要被处理。受检异常继承于Exception。</p>
<p>**非受检异常（Unchecked Exception）**是在运行时期的异常，即编译器不会检测异常，需要时也可以捕获异常。非受检异常继承于RuntimeException。</p>
<h2 id="_10-12" tabindex="-1">10-12 <a class="header-anchor" href="#_10-12" aria-label="Permalink to &quot;10-12&quot;">&ZeroWidthSpace;</a></h2>
<h3 id="是否可以继承string类" tabindex="-1">是否可以继承String类？ <a class="header-anchor" href="#是否可以继承string类" aria-label="Permalink to &quot;是否可以继承String类？&quot;">&ZeroWidthSpace;</a></h3>
<p>String 类是不能被继承的，因为他是被final关键字修饰的。</p>
<div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre v-pre class="shiki github-dark vp-code-dark" ><code><span class="line"><span style="color: #F97583">public</span><span style="color: #E1E4E8"> </span><span style="color: #F97583">final</span><span style="color: #E1E4E8"> </span><span style="color: #F97583">class</span><span style="color: #E1E4E8"> </span><span style="color: #B392F0">String</span></span>
<span class="line"><span style="color: #E1E4E8">    </span><span style="color: #F97583">implements</span><span style="color: #E1E4E8"> java.io.</span><span style="color: #B392F0">Serializable</span><span style="color: #E1E4E8">, </span><span style="color: #B392F0">Comparable</span><span style="color: #E1E4E8">&lt;</span><span style="color: #F97583">String</span><span style="color: #E1E4E8">&gt;, </span><span style="color: #B392F0">CharSequence</span><span style="color: #E1E4E8">,</span></span>
<span class="line"><span style="color: #E1E4E8">               </span><span style="color: #B392F0">Constable</span><span style="color: #E1E4E8">, </span><span style="color: #B392F0">ConstantDesc</span><span style="color: #E1E4E8"> {</span></span>
<span class="line"><span style="color: #E1E4E8">  ......</span></span>
<span class="line"><span style="color: #E1E4E8">}</span></span></code></pre><pre v-pre class="shiki github-light vp-code-light" ><code><span class="line"><span style="color: #D73A49">public</span><span style="color: #24292E"> </span><span style="color: #D73A49">final</span><span style="color: #24292E"> </span><span style="color: #D73A49">class</span><span style="color: #24292E"> </span><span style="color: #6F42C1">String</span></span>
<span class="line"><span style="color: #24292E">    </span><span style="color: #D73A49">implements</span><span style="color: #24292E"> java.io.</span><span style="color: #6F42C1">Serializable</span><span style="color: #24292E">, </span><span style="color: #6F42C1">Comparable</span><span style="color: #24292E">&lt;</span><span style="color: #D73A49">String</span><span style="color: #24292E">&gt;, </span><span style="color: #6F42C1">CharSequence</span><span style="color: #24292E">,</span></span>
<span class="line"><span style="color: #24292E">               </span><span style="color: #6F42C1">Constable</span><span style="color: #24292E">, </span><span style="color: #6F42C1">ConstantDesc</span><span style="color: #24292E"> {</span></span>
<span class="line"><span style="color: #24292E">  ......</span></span>
<span class="line"><span style="color: #24292E">}</span></span></code></pre>
</div><h2 id="_10-11" tabindex="-1">10-11 <a class="header-anchor" href="#_10-11" aria-label="Permalink to &quot;10-11&quot;">&ZeroWidthSpace;</a></h2>
<h3 id="string-类的长度有限制吗" tabindex="-1">String 类的长度有限制吗？ <a class="header-anchor" href="#string-类的长度有限制吗" aria-label="Permalink to &quot;String 类的长度有限制吗？&quot;">&ZeroWidthSpace;</a></h3>
<p>String 是由一个字符数组 <code>char[]</code> 来存储的，由于数组的长度及索引是整数且 String 类中返回字符串长度的方法 <code>length()</code> 的返回值也是 int ，
所以通过查看 java 源码中的类 Integer 我们可以看到 Integer 的最大范围是<code>2^31 -1</code>,
由于数组是从0开始的，所以数组的最大长度可以使【0~2^31】通过计算是大概4GB。</p>
<p>但是通过翻阅 java 虚拟机手册对 class 文件格式的定义以及常量池中对 String 类型的结构体定义我们可以知道对于索引定义了 u2，就是无符号占2个字节，
2个字节可以表示的最大范围是 <code>2^16 -1 = 65535</code>。 但是由于JVM需要1个字节表示结束指令，所以这个范围就为65534了。
超出这个范围在编译时期是会报错的，但是运行时拼接或者赋值的话范围是在整形的最大范围。</p>
<h2 id="_10-10" tabindex="-1">10-10 <a class="header-anchor" href="#_10-10" aria-label="Permalink to &quot;10-10&quot;">&ZeroWidthSpace;</a></h2>
<h3 id="什么是节流和防抖-应用场景有哪些" tabindex="-1">什么是节流和防抖？应用场景有哪些？ <a class="header-anchor" href="#什么是节流和防抖-应用场景有哪些" aria-label="Permalink to &quot;什么是节流和防抖？应用场景有哪些？&quot;">&ZeroWidthSpace;</a></h3>
<p>在前端开发过程中，当函数绑定到某些可能会持续触发的事件中时，
可能会造成性能和资源的浪费。如鼠标的移动、提交按钮可能被用户快速重复的点击等。
<strong>节流</strong>和<strong>防抖</strong>就是为了解决这一问题。</p>
<ul>
<li><strong>防抖（debounce）：</strong>
防抖指事件触发时，它将在指定时间后执行，如果这段时间内再次被调用，则重新计算执行时间。
通常用于滚动事件、调整窗口大小、鼠标移动、窗口搜索建议等。</li>
</ul>
<div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre v-pre class="shiki github-dark vp-code-dark" ><code><span class="line"><span style="color: #F97583">function</span><span style="color: #E1E4E8"> </span><span style="color: #B392F0">debounce</span><span style="color: #E1E4E8">(</span><span style="color: #FFAB70">func</span><span style="color: #E1E4E8">, </span><span style="color: #FFAB70">delay</span><span style="color: #E1E4E8">) {</span></span>
<span class="line"><span style="color: #E1E4E8">    </span><span style="color: #F97583">let</span><span style="color: #E1E4E8"> timeoutId;</span></span>
<span class="line"><span style="color: #E1E4E8">    </span><span style="color: #F97583">return</span><span style="color: #E1E4E8"> </span><span style="color: #F97583">function</span><span style="color: #E1E4E8"> (</span><span style="color: #F97583">...</span><span style="color: #FFAB70">args</span><span style="color: #E1E4E8">) {</span></span>
<span class="line"><span style="color: #E1E4E8">        </span><span style="color: #B392F0">clearTimeout</span><span style="color: #E1E4E8">(timeoutId);</span></span>
<span class="line"><span style="color: #E1E4E8">        timeoutId </span><span style="color: #F97583">=</span><span style="color: #E1E4E8"> </span><span style="color: #B392F0">setTimeout</span><span style="color: #E1E4E8">(() </span><span style="color: #F97583">=&gt;</span><span style="color: #E1E4E8"> {</span></span>
<span class="line"><span style="color: #E1E4E8">            </span><span style="color: #B392F0">func</span><span style="color: #E1E4E8">(</span><span style="color: #F97583">...</span><span style="color: #E1E4E8">args);</span></span>
<span class="line"><span style="color: #E1E4E8">        }, delay);</span></span>
<span class="line"><span style="color: #E1E4E8">    };</span></span>
<span class="line"><span style="color: #E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #6A737D">// 使用防抖函数</span></span>
<span class="line"><span style="color: #F97583">const</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">debouncedFunction</span><span style="color: #E1E4E8"> </span><span style="color: #F97583">=</span><span style="color: #E1E4E8"> </span><span style="color: #B392F0">debounce</span><span style="color: #E1E4E8">(() </span><span style="color: #F97583">=&gt;</span><span style="color: #E1E4E8"> {</span></span>
<span class="line"><span style="color: #E1E4E8">    console.</span><span style="color: #B392F0">log</span><span style="color: #E1E4E8">(</span><span style="color: #9ECBFF">&#39;Debounced function called.&#39;</span><span style="color: #E1E4E8">);</span></span>
<span class="line"><span style="color: #E1E4E8">}, </span><span style="color: #79B8FF">1000</span><span style="color: #E1E4E8">);</span></span>
<span class="line"></span>
<span class="line"><span style="color: #6A737D">// 模拟事件触发</span></span>
<span class="line"><span style="color: #B392F0">setInterval</span><span style="color: #E1E4E8">(() </span><span style="color: #F97583">=&gt;</span><span style="color: #E1E4E8"> {</span></span>
<span class="line"><span style="color: #E1E4E8">    </span><span style="color: #B392F0">debouncedFunction</span><span style="color: #E1E4E8">();</span></span>
<span class="line"><span style="color: #E1E4E8">}, </span><span style="color: #79B8FF">200</span><span style="color: #E1E4E8">);  </span><span style="color: #6A737D">// 防抖后，该函数触发后会等待1秒，如果1秒内再次触发，则重新计时</span></span></code></pre><pre v-pre class="shiki github-light vp-code-light" ><code><span class="line"><span style="color: #D73A49">function</span><span style="color: #24292E"> </span><span style="color: #6F42C1">debounce</span><span style="color: #24292E">(</span><span style="color: #E36209">func</span><span style="color: #24292E">, </span><span style="color: #E36209">delay</span><span style="color: #24292E">) {</span></span>
<span class="line"><span style="color: #24292E">    </span><span style="color: #D73A49">let</span><span style="color: #24292E"> timeoutId;</span></span>
<span class="line"><span style="color: #24292E">    </span><span style="color: #D73A49">return</span><span style="color: #24292E"> </span><span style="color: #D73A49">function</span><span style="color: #24292E"> (</span><span style="color: #D73A49">...</span><span style="color: #E36209">args</span><span style="color: #24292E">) {</span></span>
<span class="line"><span style="color: #24292E">        </span><span style="color: #6F42C1">clearTimeout</span><span style="color: #24292E">(timeoutId);</span></span>
<span class="line"><span style="color: #24292E">        timeoutId </span><span style="color: #D73A49">=</span><span style="color: #24292E"> </span><span style="color: #6F42C1">setTimeout</span><span style="color: #24292E">(() </span><span style="color: #D73A49">=&gt;</span><span style="color: #24292E"> {</span></span>
<span class="line"><span style="color: #24292E">            </span><span style="color: #6F42C1">func</span><span style="color: #24292E">(</span><span style="color: #D73A49">...</span><span style="color: #24292E">args);</span></span>
<span class="line"><span style="color: #24292E">        }, delay);</span></span>
<span class="line"><span style="color: #24292E">    };</span></span>
<span class="line"><span style="color: #24292E">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #6A737D">// 使用防抖函数</span></span>
<span class="line"><span style="color: #D73A49">const</span><span style="color: #24292E"> </span><span style="color: #005CC5">debouncedFunction</span><span style="color: #24292E"> </span><span style="color: #D73A49">=</span><span style="color: #24292E"> </span><span style="color: #6F42C1">debounce</span><span style="color: #24292E">(() </span><span style="color: #D73A49">=&gt;</span><span style="color: #24292E"> {</span></span>
<span class="line"><span style="color: #24292E">    console.</span><span style="color: #6F42C1">log</span><span style="color: #24292E">(</span><span style="color: #032F62">&#39;Debounced function called.&#39;</span><span style="color: #24292E">);</span></span>
<span class="line"><span style="color: #24292E">}, </span><span style="color: #005CC5">1000</span><span style="color: #24292E">);</span></span>
<span class="line"></span>
<span class="line"><span style="color: #6A737D">// 模拟事件触发</span></span>
<span class="line"><span style="color: #6F42C1">setInterval</span><span style="color: #24292E">(() </span><span style="color: #D73A49">=&gt;</span><span style="color: #24292E"> {</span></span>
<span class="line"><span style="color: #24292E">    </span><span style="color: #6F42C1">debouncedFunction</span><span style="color: #24292E">();</span></span>
<span class="line"><span style="color: #24292E">}, </span><span style="color: #005CC5">200</span><span style="color: #24292E">);  </span><span style="color: #6A737D">// 防抖后，该函数触发后会等待1秒，如果1秒内再次触发，则重新计时</span></span></code></pre>
</div><ul>
<li><strong>节流（throttle）：</strong>
节流指连续触发多次的事件在指定时间范围内只执行一次，进而限制函数的执行频率。
通常用于自动保存、延时执行等。</li>
</ul>
<div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre v-pre class="shiki github-dark vp-code-dark" ><code><span class="line"><span style="color: #F97583">function</span><span style="color: #E1E4E8"> </span><span style="color: #B392F0">throttle</span><span style="color: #E1E4E8">(</span><span style="color: #FFAB70">func</span><span style="color: #E1E4E8">, </span><span style="color: #FFAB70">delay</span><span style="color: #E1E4E8">) {</span></span>
<span class="line"><span style="color: #E1E4E8">  </span><span style="color: #F97583">let</span><span style="color: #E1E4E8"> lastCall </span><span style="color: #F97583">=</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">0</span><span style="color: #E1E4E8">;</span></span>
<span class="line"><span style="color: #E1E4E8">  </span><span style="color: #F97583">return</span><span style="color: #E1E4E8"> </span><span style="color: #F97583">function</span><span style="color: #E1E4E8"> (</span><span style="color: #F97583">...</span><span style="color: #FFAB70">args</span><span style="color: #E1E4E8">) {</span></span>
<span class="line"><span style="color: #E1E4E8">    </span><span style="color: #F97583">const</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">now</span><span style="color: #E1E4E8"> </span><span style="color: #F97583">=</span><span style="color: #E1E4E8"> </span><span style="color: #F97583">new</span><span style="color: #E1E4E8"> </span><span style="color: #B392F0">Date</span><span style="color: #E1E4E8">().</span><span style="color: #B392F0">getTime</span><span style="color: #E1E4E8">();</span></span>
<span class="line"><span style="color: #E1E4E8">    </span><span style="color: #F97583">if</span><span style="color: #E1E4E8"> (now </span><span style="color: #F97583">-</span><span style="color: #E1E4E8"> lastCall </span><span style="color: #F97583">&lt;</span><span style="color: #E1E4E8"> delay) </span><span style="color: #F97583">return</span><span style="color: #E1E4E8">;</span></span>
<span class="line"><span style="color: #E1E4E8">    lastCall </span><span style="color: #F97583">=</span><span style="color: #E1E4E8"> now;</span></span>
<span class="line"><span style="color: #E1E4E8">    </span><span style="color: #B392F0">func</span><span style="color: #E1E4E8">(</span><span style="color: #F97583">...</span><span style="color: #E1E4E8">args);</span></span>
<span class="line"><span style="color: #E1E4E8">  };</span></span>
<span class="line"><span style="color: #E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #6A737D">// 使用节流函数</span></span>
<span class="line"><span style="color: #F97583">const</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">throttledFunction</span><span style="color: #E1E4E8"> </span><span style="color: #F97583">=</span><span style="color: #E1E4E8"> </span><span style="color: #B392F0">throttle</span><span style="color: #E1E4E8">(() </span><span style="color: #F97583">=&gt;</span><span style="color: #E1E4E8"> {</span></span>
<span class="line"><span style="color: #E1E4E8">  console.</span><span style="color: #B392F0">log</span><span style="color: #E1E4E8">(</span><span style="color: #9ECBFF">&#39;Throttled function called.&#39;</span><span style="color: #E1E4E8">);</span></span>
<span class="line"><span style="color: #E1E4E8">}, </span><span style="color: #79B8FF">1000</span><span style="color: #E1E4E8">);</span></span>
<span class="line"></span>
<span class="line"><span style="color: #6A737D">// 模拟事件触发</span></span>
<span class="line"><span style="color: #B392F0">setInterval</span><span style="color: #E1E4E8">(throttledFunction, </span><span style="color: #79B8FF">200</span><span style="color: #E1E4E8">);  </span><span style="color: #6A737D">// 节流后，该函数每秒最多执行一次</span></span></code></pre><pre v-pre class="shiki github-light vp-code-light" ><code><span class="line"><span style="color: #D73A49">function</span><span style="color: #24292E"> </span><span style="color: #6F42C1">throttle</span><span style="color: #24292E">(</span><span style="color: #E36209">func</span><span style="color: #24292E">, </span><span style="color: #E36209">delay</span><span style="color: #24292E">) {</span></span>
<span class="line"><span style="color: #24292E">  </span><span style="color: #D73A49">let</span><span style="color: #24292E"> lastCall </span><span style="color: #D73A49">=</span><span style="color: #24292E"> </span><span style="color: #005CC5">0</span><span style="color: #24292E">;</span></span>
<span class="line"><span style="color: #24292E">  </span><span style="color: #D73A49">return</span><span style="color: #24292E"> </span><span style="color: #D73A49">function</span><span style="color: #24292E"> (</span><span style="color: #D73A49">...</span><span style="color: #E36209">args</span><span style="color: #24292E">) {</span></span>
<span class="line"><span style="color: #24292E">    </span><span style="color: #D73A49">const</span><span style="color: #24292E"> </span><span style="color: #005CC5">now</span><span style="color: #24292E"> </span><span style="color: #D73A49">=</span><span style="color: #24292E"> </span><span style="color: #D73A49">new</span><span style="color: #24292E"> </span><span style="color: #6F42C1">Date</span><span style="color: #24292E">().</span><span style="color: #6F42C1">getTime</span><span style="color: #24292E">();</span></span>
<span class="line"><span style="color: #24292E">    </span><span style="color: #D73A49">if</span><span style="color: #24292E"> (now </span><span style="color: #D73A49">-</span><span style="color: #24292E"> lastCall </span><span style="color: #D73A49">&lt;</span><span style="color: #24292E"> delay) </span><span style="color: #D73A49">return</span><span style="color: #24292E">;</span></span>
<span class="line"><span style="color: #24292E">    lastCall </span><span style="color: #D73A49">=</span><span style="color: #24292E"> now;</span></span>
<span class="line"><span style="color: #24292E">    </span><span style="color: #6F42C1">func</span><span style="color: #24292E">(</span><span style="color: #D73A49">...</span><span style="color: #24292E">args);</span></span>
<span class="line"><span style="color: #24292E">  };</span></span>
<span class="line"><span style="color: #24292E">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #6A737D">// 使用节流函数</span></span>
<span class="line"><span style="color: #D73A49">const</span><span style="color: #24292E"> </span><span style="color: #005CC5">throttledFunction</span><span style="color: #24292E"> </span><span style="color: #D73A49">=</span><span style="color: #24292E"> </span><span style="color: #6F42C1">throttle</span><span style="color: #24292E">(() </span><span style="color: #D73A49">=&gt;</span><span style="color: #24292E"> {</span></span>
<span class="line"><span style="color: #24292E">  console.</span><span style="color: #6F42C1">log</span><span style="color: #24292E">(</span><span style="color: #032F62">&#39;Throttled function called.&#39;</span><span style="color: #24292E">);</span></span>
<span class="line"><span style="color: #24292E">}, </span><span style="color: #005CC5">1000</span><span style="color: #24292E">);</span></span>
<span class="line"></span>
<span class="line"><span style="color: #6A737D">// 模拟事件触发</span></span>
<span class="line"><span style="color: #6F42C1">setInterval</span><span style="color: #24292E">(throttledFunction, </span><span style="color: #005CC5">200</span><span style="color: #24292E">);  </span><span style="color: #6A737D">// 节流后，该函数每秒最多执行一次</span></span></code></pre>
</div><blockquote>
<p>总的来说，节流和防抖都是为了限制函数执行的频率，以优化性能、减少不必要的计算或请求，提高用户体验。选择使用哪种取决于具体的需求和事件特性。</p>
</blockquote>
<h2 id="_10-9" tabindex="-1">10-9 <a class="header-anchor" href="#_10-9" aria-label="Permalink to &quot;10-9&quot;">&ZeroWidthSpace;</a></h2>
<h3 id="请描述-static-修饰符。" tabindex="-1">请描述 static 修饰符。 <a class="header-anchor" href="#请描述-static-修饰符。" aria-label="Permalink to &quot;请描述 static 修饰符。&quot;">&ZeroWidthSpace;</a></h3>
<p><code>static</code> 关键字可以用于类、方法、属性等。</p>
<p><strong>静态字段</strong></p>
<p>如果将一个字段定义为static，那么这个字段并不会出现在每个类的对象中。每个静态字段只有一个副本。可以认为静态字段属于类，而不属于单个对象。</p>
<p><strong>静态常量</strong></p>
<p>JAVA中没有用于修饰常量的关键字，所以常量的修饰通常使用 <code>public static final</code> 三个关键字共同修饰。使其静态加载且不允许修改。</p>
<p><strong>静态方法</strong></p>
<p>静态方法是不操作对象的方法。例如 <code>Math.pow(x,a)</code>会计算 x 的 a 次幂。它不会使用任何 Math 对象来完成该方法调用。它没有隐式参数。</p>
<p><strong>工厂方法</strong></p>
<p>类似于 <code>LocalDate</code> 和 <code>NumberFormat</code> 的类使用静态工厂方法来构造对象，就是静态方法：</p>
<div class="language-Java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">Java</span><pre v-pre class="shiki github-dark vp-code-dark" ><code><span class="line"><span style="color: #E1E4E8">LocalDate localdate </span><span style="color: #F97583">=</span><span style="color: #E1E4E8"> LocalDate.</span><span style="color: #B392F0">now</span><span style="color: #E1E4E8">(); </span></span>
<span class="line"><span style="color: #E1E4E8">LocalDate localdate </span><span style="color: #F97583">=</span><span style="color: #E1E4E8"> LocalDate.</span><span style="color: #B392F0">of</span><span style="color: #E1E4E8">(</span><span style="color: #79B8FF">2020</span><span style="color: #E1E4E8">, </span><span style="color: #79B8FF">5</span><span style="color: #E1E4E8">, </span><span style="color: #79B8FF">13</span><span style="color: #E1E4E8">);  </span></span>
<span class="line"><span style="color: #E1E4E8">System.out.</span><span style="color: #B392F0">println</span><span style="color: #E1E4E8">(NumberFormat.</span><span style="color: #B392F0">format</span><span style="color: #E1E4E8">(</span><span style="color: #79B8FF">0.1</span><span style="color: #E1E4E8">));</span></span></code></pre><pre v-pre class="shiki github-light vp-code-light" ><code><span class="line"><span style="color: #24292E">LocalDate localdate </span><span style="color: #D73A49">=</span><span style="color: #24292E"> LocalDate.</span><span style="color: #6F42C1">now</span><span style="color: #24292E">(); </span></span>
<span class="line"><span style="color: #24292E">LocalDate localdate </span><span style="color: #D73A49">=</span><span style="color: #24292E"> LocalDate.</span><span style="color: #6F42C1">of</span><span style="color: #24292E">(</span><span style="color: #005CC5">2020</span><span style="color: #24292E">, </span><span style="color: #005CC5">5</span><span style="color: #24292E">, </span><span style="color: #005CC5">13</span><span style="color: #24292E">);  </span></span>
<span class="line"><span style="color: #24292E">System.out.</span><span style="color: #6F42C1">println</span><span style="color: #24292E">(NumberFormat.</span><span style="color: #6F42C1">format</span><span style="color: #24292E">(</span><span style="color: #005CC5">0.1</span><span style="color: #24292E">));</span></span></code></pre>
</div><p><strong>main 方法</strong></p>
<p>调用静态方法不需要任何对象，与 <code>Math.pow</code> 同理，main 方法也是一个静态方法，启动程序时没有任何对象，将执行 main 方法并构造程序所需要的对象。</p>
<h2 id="_10-8" tabindex="-1">10-8 <a class="header-anchor" href="#_10-8" aria-label="Permalink to &quot;10-8&quot;">&ZeroWidthSpace;</a></h2>
<h3 id="请描述修饰符、访问修饰符-非访问修饰符。" tabindex="-1">请描述修饰符、访问修饰符，非访问修饰符。 <a class="header-anchor" href="#请描述修饰符、访问修饰符-非访问修饰符。" aria-label="Permalink to &quot;请描述修饰符、访问修饰符，非访问修饰符。&quot;">&ZeroWidthSpace;</a></h3>
<ul>
<li>
<p><strong>修饰符</strong>（Modifiers）：指用于修饰类、方法。变量等的关键字，用于置顶元素的访问类型。作用域、权限、继承性、抽象性等。修饰符分为访问修饰符和非访问修饰符。</p>
</li>
<li>
<p><strong>访问修饰符（Access Modifiers）</strong>: 访问修饰符控制类、方法、变量等的访问权限，共有以下四中：</p>
<table>
<thead>
<tr>
<th>Name</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>public</td>
<td>能被任何类访问。</td>
</tr>
<tr>
<td>protected</td>
<td>同一包课件，其他包的子类可见。</td>
</tr>
<tr>
<td>default</td>
<td>默认，只能在同一包中被访问。</td>
</tr>
<tr>
<td>private</td>
<td>只能在同一类中访问。</td>
</tr>
</tbody>
</table>
</li>
<li>
<p><strong>非访问修饰符（Non-Access Modifiers）</strong>: 非访问修饰符用于实现其他功能，包括以下几种类型：</p>
</li>
</ul>
<table>
<thead>
<tr>
<th>Name</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>final</td>
<td>表示不可继承的类、不可重写的方法或不可修改的变量。</td>
</tr>
<tr>
<td>abstract</td>
<td>表示抽象类或抽象方法，不能直接实例化抽象类。</td>
</tr>
<tr>
<td>static</td>
<td>静态资源关键字，用于创建类级别的变量或方法，而非实例级别。</td>
</tr>
<tr>
<td>synchronize</td>
<td>用于同步代码块，保证多线程环境下的同步访问。</td>
</tr>
<tr>
<td>transient</td>
<td>用于表示不需要序列化的变量。</td>
</tr>
<tr>
<td>volatile</td>
<td>用于表示多线程共享变量，保证可见性但不保证原子性。</td>
</tr>
<tr>
<td>strictfp</td>
<td>用于强制浮点运算遵循IEEE 764 标准，确保跨平台的浮点计算结果一致。</td>
</tr>
<tr>
<td>sealed</td>
<td>密封类。用于控制哪些类可以对该类进行拓展。</td>
</tr>
<tr>
<td>record</td>
<td>用于创建不可变的数据类。</td>
</tr>
</tbody>
</table>
<h2 id="_10-7" tabindex="-1">10-7 <a class="header-anchor" href="#_10-7" aria-label="Permalink to &quot;10-7&quot;">&ZeroWidthSpace;</a></h2>
<h3 id="什么是方法签名" tabindex="-1">什么是方法签名？ <a class="header-anchor" href="#什么是方法签名" aria-label="Permalink to &quot;什么是方法签名？&quot;">&ZeroWidthSpace;</a></h3>
<p>在上一篇中说到，重写必须要求方法签名相同，这里的<strong>方法签名</strong>（Method Signature），指的是方法名称及参数类型列表。如：</p>
<div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre v-pre class="shiki github-dark vp-code-dark" ><code><span class="line"><span style="color: #F97583">int</span><span style="color: #E1E4E8"> </span><span style="color: #B392F0">sum</span><span style="color: #E1E4E8">(</span><span style="color: #F97583">int</span><span style="color: #E1E4E8"> a, </span><span style="color: #F97583">int</span><span style="color: #E1E4E8"> b){</span><span style="color: #F97583">return</span><span style="color: #E1E4E8"> a </span><span style="color: #F97583">+</span><span style="color: #E1E4E8"> b;}</span></span></code></pre><pre v-pre class="shiki github-light vp-code-light" ><code><span class="line"><span style="color: #D73A49">int</span><span style="color: #24292E"> </span><span style="color: #6F42C1">sum</span><span style="color: #24292E">(</span><span style="color: #D73A49">int</span><span style="color: #24292E"> a, </span><span style="color: #D73A49">int</span><span style="color: #24292E"> b){</span><span style="color: #D73A49">return</span><span style="color: #24292E"> a </span><span style="color: #D73A49">+</span><span style="color: #24292E"> b;}</span></span></code></pre>
</div><p>该方法的方法签名为： <code>sum(int, int)</code></p>
<h2 id="_10-6" tabindex="-1">10-6 <a class="header-anchor" href="#_10-6" aria-label="Permalink to &quot;10-6&quot;">&ZeroWidthSpace;</a></h2>
<h3 id="重载和重写是什么意思-有什么区别" tabindex="-1">重载和重写是什么意思？有什么区别？ <a class="header-anchor" href="#重载和重写是什么意思-有什么区别" aria-label="Permalink to &quot;重载和重写是什么意思？有什么区别？&quot;">&ZeroWidthSpace;</a></h3>
<p><code>重载</code>（Overloading）指在同一个类中可以定义多个参数列表不同的同名方法，其互相的关系是重载。它是编译时多态（静态绑定），根据参数列表选择调用对应的方法。</p>
<p><code>重写</code>（Overriding）指子类可以重新定义父类中非私有的方法，方法签名必须相同。子类可以通过重写父类的方法来实现自己的特定行为。它是运行时多态（动态绑定），在运行时根据对象的实际类型选择调用对应的方法。</p>
<h2 id="_10-5" tabindex="-1">10-5 <a class="header-anchor" href="#_10-5" aria-label="Permalink to &quot;10-5&quot;">&ZeroWidthSpace;</a></h2>
<h3 id="string、stringbuilder、stringbuffer-的区别及使用场景" tabindex="-1">String、StringBuilder、StringBuffer 的区别及使用场景 <a class="header-anchor" href="#string、stringbuilder、stringbuffer-的区别及使用场景" aria-label="Permalink to &quot;String、StringBuilder、StringBuffer 的区别及使用场景&quot;">&ZeroWidthSpace;</a></h3>
<p><code>String</code> 由 final 关键字修饰，一旦定义就不可改变。可以在操作少量数据时使用。</p>
<p><code>StringBuilder</code> 可变，但是线程不安全。操作单线程大量数据时使用。</p>
<p><code>StringBuffer</code> 可变，线程安全。操作多线程大数据时使用。</p>
<h2 id="_10-4" tabindex="-1">10-4 <a class="header-anchor" href="#_10-4" aria-label="Permalink to &quot;10-4&quot;">&ZeroWidthSpace;</a></h2>
<h3 id="请描述-instanceof-关键字" tabindex="-1">请描述 instanceof 关键字 <a class="header-anchor" href="#请描述-instanceof-关键字" aria-label="Permalink to &quot;请描述 instanceof 关键字&quot;">&ZeroWidthSpace;</a></h3>
<p><code>instanceof</code> 是 JAVA  的一个二元操作符，类似于大于小于号，用于测试其左边的对象是否是它右边对象的实例，返回 Boolean 类型。在下方的 <a href="#_10-3">10-3</a> 的示例中，String 类的 equals 方法中使用了 <code>instanceof</code> 关键字对比较的对象进行实例检查，并转换为 String 类型。</p>
<h2 id="_10-3" tabindex="-1">10-3 <a class="header-anchor" href="#_10-3" aria-label="Permalink to &quot;10-3&quot;">&ZeroWidthSpace;</a></h2>
<h3 id="与-equals-的区别" tabindex="-1"><code>==</code> 与 <code>equals</code> 的区别 <a class="header-anchor" href="#与-equals-的区别" aria-label="Permalink to &quot;`==` 与 `equals` 的区别&quot;">&ZeroWidthSpace;</a></h3>
<p>两者的作用都是判断是否相等。但是 <code>==</code> 是运算符，<code>equals</code> 是继承于 Object 类的一个方法。</p>
<p>对于 <code>==</code> 来讲，如果比较<strong>基本数据类型</strong>，则比较其存储的值。如果比较<strong>引用数据类型</strong>，则比较其对象的地址值是否相等。</p>
<p>对于 <code>equals</code> 方法来讲，其本身并不提供<strong>基本数据类型</strong>的比较，但是可以使用 Objects 类提供的静态 equals 进行比较，如果是基本数据类型，其实现也是使用 <code>==</code>：</p>
<div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre v-pre class="shiki github-dark vp-code-dark" ><code><span class="line"><span style="color: #F97583">public</span><span style="color: #E1E4E8"> </span><span style="color: #F97583">static</span><span style="color: #E1E4E8"> </span><span style="color: #F97583">boolean</span><span style="color: #E1E4E8"> </span><span style="color: #B392F0">equals</span><span style="color: #E1E4E8">(Object a, Object b) {</span></span>
<span class="line"><span style="color: #E1E4E8">    </span><span style="color: #F97583">return</span><span style="color: #E1E4E8"> (a </span><span style="color: #F97583">==</span><span style="color: #E1E4E8"> b) </span><span style="color: #F97583">||</span><span style="color: #E1E4E8"> (a </span><span style="color: #F97583">!=</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">null</span><span style="color: #E1E4E8"> </span><span style="color: #F97583">&amp;&amp;</span><span style="color: #E1E4E8"> a.</span><span style="color: #B392F0">equals</span><span style="color: #E1E4E8">(b));</span></span>
<span class="line"><span style="color: #E1E4E8">}</span></span></code></pre><pre v-pre class="shiki github-light vp-code-light" ><code><span class="line"><span style="color: #D73A49">public</span><span style="color: #24292E"> </span><span style="color: #D73A49">static</span><span style="color: #24292E"> </span><span style="color: #D73A49">boolean</span><span style="color: #24292E"> </span><span style="color: #6F42C1">equals</span><span style="color: #24292E">(Object a, Object b) {</span></span>
<span class="line"><span style="color: #24292E">    </span><span style="color: #D73A49">return</span><span style="color: #24292E"> (a </span><span style="color: #D73A49">==</span><span style="color: #24292E"> b) </span><span style="color: #D73A49">||</span><span style="color: #24292E"> (a </span><span style="color: #D73A49">!=</span><span style="color: #24292E"> </span><span style="color: #005CC5">null</span><span style="color: #24292E"> </span><span style="color: #D73A49">&amp;&amp;</span><span style="color: #24292E"> a.</span><span style="color: #6F42C1">equals</span><span style="color: #24292E">(b));</span></span>
<span class="line"><span style="color: #24292E">}</span></span></code></pre>
</div><p>继承于 Object 类的 <code>equals</code> 方法也是使用 <code>==</code> 进行比较：</p>
<div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre v-pre class="shiki github-dark vp-code-dark" ><code><span class="line"><span style="color: #F97583">public</span><span style="color: #E1E4E8"> </span><span style="color: #F97583">boolean</span><span style="color: #E1E4E8"> </span><span style="color: #B392F0">equals</span><span style="color: #E1E4E8">(Object obj) {</span></span>
<span class="line"><span style="color: #E1E4E8">    </span><span style="color: #F97583">return</span><span style="color: #E1E4E8"> (</span><span style="color: #79B8FF">this</span><span style="color: #E1E4E8"> </span><span style="color: #F97583">==</span><span style="color: #E1E4E8"> obj);</span></span>
<span class="line"><span style="color: #E1E4E8">}</span></span></code></pre><pre v-pre class="shiki github-light vp-code-light" ><code><span class="line"><span style="color: #D73A49">public</span><span style="color: #24292E"> </span><span style="color: #D73A49">boolean</span><span style="color: #24292E"> </span><span style="color: #6F42C1">equals</span><span style="color: #24292E">(Object obj) {</span></span>
<span class="line"><span style="color: #24292E">    </span><span style="color: #D73A49">return</span><span style="color: #24292E"> (</span><span style="color: #005CC5">this</span><span style="color: #24292E"> </span><span style="color: #D73A49">==</span><span style="color: #24292E"> obj);</span></span>
<span class="line"><span style="color: #24292E">}</span></span></code></pre>
</div><p>所以要比较两个引用数据类型，必须重写其 equals 方法才能实现对于特定条件的比较，这里以常用的 String 类进行举例，其重写的 equals 方法如下：</p>
<div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre v-pre class="shiki github-dark vp-code-dark" ><code><span class="line"><span style="color: #F97583">public</span><span style="color: #E1E4E8"> </span><span style="color: #F97583">boolean</span><span style="color: #E1E4E8"> </span><span style="color: #B392F0">equals</span><span style="color: #E1E4E8">(Object anObject) {</span></span>
<span class="line"><span style="color: #E1E4E8">    </span><span style="color: #6A737D">// 判断其地址值相同，直接返回 TRUE</span></span>
<span class="line"><span style="color: #E1E4E8">    </span><span style="color: #F97583">if</span><span style="color: #E1E4E8"> (</span><span style="color: #79B8FF">this</span><span style="color: #E1E4E8"> </span><span style="color: #F97583">==</span><span style="color: #E1E4E8"> anObject) {</span></span>
<span class="line"><span style="color: #E1E4E8">        </span><span style="color: #F97583">return</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">true</span><span style="color: #E1E4E8">; </span></span>
<span class="line"><span style="color: #E1E4E8">    }</span></span>
<span class="line"><span style="color: #E1E4E8">    </span><span style="color: #6A737D">// 类型检查，判断是否为 String 的实例，如果是，anObject 会被转化为 aString 表示的 String 类型</span></span>
<span class="line"><span style="color: #E1E4E8">    </span><span style="color: #F97583">return</span><span style="color: #E1E4E8"> (anObject </span><span style="color: #F97583">instanceof</span><span style="color: #E1E4E8"> String aString)</span></span>
<span class="line"><span style="color: #E1E4E8">        	</span><span style="color: #6A737D">// 是否压缩（紧凑表示方式），如果压缩则检查其编码是否相同</span></span>
<span class="line"><span style="color: #E1E4E8">        	</span><span style="color: #6A737D">// 这里 aString 是规范的命名方式。。。</span></span>
<span class="line"><span style="color: #E1E4E8">            </span><span style="color: #F97583">&amp;&amp;</span><span style="color: #E1E4E8"> (</span><span style="color: #F97583">!</span><span style="color: #E1E4E8">COMPACT_STRINGS </span><span style="color: #F97583">||</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">this</span><span style="color: #E1E4E8">.coder </span><span style="color: #F97583">==</span><span style="color: #E1E4E8"> aString.coder)</span></span>
<span class="line"><span style="color: #E1E4E8">        	</span><span style="color: #6A737D">// 遍历比较字符数组</span></span>
<span class="line"><span style="color: #E1E4E8">            </span><span style="color: #F97583">&amp;&amp;</span><span style="color: #E1E4E8"> StringLatin1.</span><span style="color: #B392F0">equals</span><span style="color: #E1E4E8">(value, aString.value);</span></span>
<span class="line"><span style="color: #E1E4E8">}</span></span></code></pre><pre v-pre class="shiki github-light vp-code-light" ><code><span class="line"><span style="color: #D73A49">public</span><span style="color: #24292E"> </span><span style="color: #D73A49">boolean</span><span style="color: #24292E"> </span><span style="color: #6F42C1">equals</span><span style="color: #24292E">(Object anObject) {</span></span>
<span class="line"><span style="color: #24292E">    </span><span style="color: #6A737D">// 判断其地址值相同，直接返回 TRUE</span></span>
<span class="line"><span style="color: #24292E">    </span><span style="color: #D73A49">if</span><span style="color: #24292E"> (</span><span style="color: #005CC5">this</span><span style="color: #24292E"> </span><span style="color: #D73A49">==</span><span style="color: #24292E"> anObject) {</span></span>
<span class="line"><span style="color: #24292E">        </span><span style="color: #D73A49">return</span><span style="color: #24292E"> </span><span style="color: #005CC5">true</span><span style="color: #24292E">; </span></span>
<span class="line"><span style="color: #24292E">    }</span></span>
<span class="line"><span style="color: #24292E">    </span><span style="color: #6A737D">// 类型检查，判断是否为 String 的实例，如果是，anObject 会被转化为 aString 表示的 String 类型</span></span>
<span class="line"><span style="color: #24292E">    </span><span style="color: #D73A49">return</span><span style="color: #24292E"> (anObject </span><span style="color: #D73A49">instanceof</span><span style="color: #24292E"> String aString)</span></span>
<span class="line"><span style="color: #24292E">        	</span><span style="color: #6A737D">// 是否压缩（紧凑表示方式），如果压缩则检查其编码是否相同</span></span>
<span class="line"><span style="color: #24292E">        	</span><span style="color: #6A737D">// 这里 aString 是规范的命名方式。。。</span></span>
<span class="line"><span style="color: #24292E">            </span><span style="color: #D73A49">&amp;&amp;</span><span style="color: #24292E"> (</span><span style="color: #D73A49">!</span><span style="color: #24292E">COMPACT_STRINGS </span><span style="color: #D73A49">||</span><span style="color: #24292E"> </span><span style="color: #005CC5">this</span><span style="color: #24292E">.coder </span><span style="color: #D73A49">==</span><span style="color: #24292E"> aString.coder)</span></span>
<span class="line"><span style="color: #24292E">        	</span><span style="color: #6A737D">// 遍历比较字符数组</span></span>
<span class="line"><span style="color: #24292E">            </span><span style="color: #D73A49">&amp;&amp;</span><span style="color: #24292E"> StringLatin1.</span><span style="color: #6F42C1">equals</span><span style="color: #24292E">(value, aString.value);</span></span>
<span class="line"><span style="color: #24292E">}</span></span></code></pre>
</div><h2 id="_10-2" tabindex="-1">10-2 <a class="header-anchor" href="#_10-2" aria-label="Permalink to &quot;10-2&quot;">&ZeroWidthSpace;</a></h2>
<h3 id="_3-0-1-0-3-将会返回什么-true-还是-false" tabindex="-1"><code>3 * 0.1 == 0.3</code> 将会返回什么? true 还是 false? <a class="header-anchor" href="#_3-0-1-0-3-将会返回什么-true-还是-false" aria-label="Permalink to &quot;`3 * 0.1 == 0.3` 将会返回什么? true 还是 false?&quot;">&ZeroWidthSpace;</a></h3>
<p><strong>答案：</strong><code>FALSE</code></p>
<p>这道题跟 <code>01+0.2 != 0.3</code> 是一样的，由于在计算机系统中使用二进制浮点数无法精确的表示诸如 <code>10/3</code> 等无限循环的十进制分数的值，Java中的<code>double</code>和<code>float</code>类型使用IEEE 754标准来表示浮点数，这种表示方式会导致一些十进制分数无法精确地表示。因此，当你尝试在Java中表示0.3时，可能会得到一个非常接近 0.3 的值，但不会是精确的 0.3。</p>
<p>要想精确的表示十进制小数，可以使用 <code>BigDecimal</code> 类进行精确的十进制数学运算，但是会更为复杂并造成额外的开销。</p>
<h2 id="_10-1" tabindex="-1">10-1 <a class="header-anchor" href="#_10-1" aria-label="Permalink to &quot;10-1&quot;">&ZeroWidthSpace;</a></h2>
<h3 id="请详述-jdk-jre-jvm-等的关系" tabindex="-1">请详述 <code>JDK</code> <code>JRE</code> <code>JVM</code> 等的关系 <a class="header-anchor" href="#请详述-jdk-jre-jvm-等的关系" aria-label="Permalink to &quot;请详述 `JDK` `JRE` `JVM` 等的关系&quot;">&ZeroWidthSpace;</a></h3>
<div class="tip custom-block"><p class="custom-block-title">声明</p>
<p>该内容由 <code>CHATGPT</code> 生成</p>
</div>
<ol>
<li>
<p><strong><code>JDK</code>（Java Development Kit）</strong>：</p>
<p><code>JDK</code> 是Java开发工具包，它是Java开发人员用来编写、编译、调试和运行Java程序的核心工具。JDK包括了Java编译器（javac）、Java解释器（java）、Java文档生成器（javadoc）等工具，以及Java开发所需的库和资源文件。</p>
</li>
<li>
<p><strong><code>JRE</code>（Java Runtime Environment）</strong>：</p>
<p>JRE是Java运行时环境，是Java程序的运行环境，用于执行已经编译好的Java字节码。<code>JRE</code>包括了Java虚拟机（<code>JVM</code>）、Java类库（Java API）和运行时所需的其他组件。JRE提供了在特定平台上运行Java程序所需的基本功能。</p>
</li>
<li>
<p><strong><code>JVM</code>（Java Virtual Machine）</strong>：</p>
<p><code>JVM</code> 是Java虚拟机，是Java程序的运行引擎，负责将Java字节码解释或编译成特定平台的本地机器代码，并执行程序。<code>JVM</code> 是 <code>JRE</code> 的一部分，它是一个虚拟的计算机，可以在不同的硬件和操作系统上运行Java程序。</p>
</li>
</ol>
<p><strong>关系总结</strong>：</p>
<ul>
<li>JDK包括JRE，JRE包括JVM。</li>
<li>JDK提供了开发、编译、调试等工具，以及JRE所需的库和资源。</li>
<li>JRE提供了JVM和Java API，用于运行Java程序。</li>
<li>JVM是Java程序的运行引擎，它执行Java字节码并负责内存管理、垃圾回收等。</li>
<li>Java程序首先由JDK编译生成Java字节码，然后JRE中的JVM解释或编译Java字节码并执行。</li>
</ul>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[每日一题 - 2023]]></title>
            <link>https://www.imufeng.cn/question-by-day/2023/</link>
            <guid>https://www.imufeng.cn/question-by-day/2023/</guid>
            <pubDate>Fri, 20 Oct 2023 07:55:50 GMT</pubDate>
            <description><![CDATA[每天至少一道面试题，范围不限。]]></description>
            <content:encoded><![CDATA[<blockquote>
<p>每日一题从 <code>2023年09月27日</code> 开始记录，不限分类，欢迎留言监督。</p>
</blockquote>
<h3 id="目录" tabindex="-1">目录 <a class="header-anchor" href="#目录" aria-label="Permalink to &quot;目录&quot;">&ZeroWidthSpace;</a></h3>
<table>
<thead>
<tr>
<th>时间</th>
<th>问题</th>
</tr>
</thead>
<tbody>
<tr>
<td>2023/10/19</td>
<td><a href="./10.html#_10-20">请简单介绍JAVA8新特性？</a></td>
</tr>
<tr>
<td>2023/10/19</td>
<td><a href="./10.html#_10-19">Integer和int的区别？</a></td>
</tr>
<tr>
<td>2023/10/18</td>
<td><a href="./10.html#_10-18">抽象类和接口的区别？</a></td>
</tr>
<tr>
<td>2023/10/17</td>
<td><a href="./10.html#_10-17">构造器是否可被重写？</a></td>
</tr>
<tr>
<td>2023/10/16</td>
<td><a href="./10.html#_10-16">请描述 &amp; 和 &amp;&amp; 的区别。</a></td>
</tr>
<tr>
<td>2023/10/15</td>
<td><a href="./10.html#_10-15">请描述面向对象的特征。</a></td>
</tr>
<tr>
<td>2023/10/14</td>
<td><a href="./10.html#_10-14">Java 中 throw 和 throws 区别？</a></td>
</tr>
<tr>
<td>2023/10/13</td>
<td><a href="./10.html#_10-13">运行时异常与受检异常有何异同？</a></td>
</tr>
<tr>
<td>2023/10/12</td>
<td><a href="./10.html#_10-12">是否可以继承String类？</a></td>
</tr>
<tr>
<td>2023/10/11</td>
<td><a href="./10.html#_10-11">String 类的长度有限制吗？</a></td>
</tr>
<tr>
<td>2023/10/10</td>
<td><a href="./10.html#_10-10">什么是<strong>节流</strong>和<strong>防抖</strong>？应用场景有哪些？</a></td>
</tr>
<tr>
<td>2023/10/9</td>
<td><a href="./10.html#_10-9">请描述 static 修饰符</a></td>
</tr>
<tr>
<td>2023/10/8</td>
<td><a href="./10.html#_10-8">请描述修饰符、访问修饰符，非访问修饰符。</a></td>
</tr>
<tr>
<td>2023/10/7</td>
<td><a href="./10.html#_10-7">什么是方法签名？</a></td>
</tr>
<tr>
<td>2023/10/6</td>
<td><a href="./10.html#_10-6">重载和重写是什么意思？有什么区别？</a></td>
</tr>
<tr>
<td>2023/10/5</td>
<td><a href="./10.html#_10-5">String、StringBuilder、StringBuffer 的区别及使用场景？</a></td>
</tr>
<tr>
<td>2023/10/4</td>
<td><a href="./10.html#_10-4">请描述 <code>instanceof</code> 关键字。</a></td>
</tr>
<tr>
<td>2023/10/3</td>
<td><a href="./10.html#_10-3"><code>==</code> 与 <code>equals</code> 的区别是什么？</a></td>
</tr>
<tr>
<td>2023/10/2</td>
<td><a href="./10.html#_10-2"><code>3*0.1 == 0.3</code> 将会返回什么?</a></td>
</tr>
<tr>
<td>2023/10/1</td>
<td><a href="./10.html#_10-1">请详述 <code>JDK</code> <code>JRE</code> <code>JVM</code> 等的关系。</a></td>
</tr>
<tr>
<td>2023/9/30</td>
<td><a href="./9.html#_9-30">Java中的重载和重写有什么区别？</a></td>
</tr>
<tr>
<td>2023/9/29</td>
<td><a href="./9.html#_9-29">Java中的四种访问修饰符是什么？</a></td>
</tr>
<tr>
<td>2023/9/28</td>
<td><a href="./9.html#_9-28">请用 JAVA 写一个冒泡排序？</a></td>
</tr>
<tr>
<td>2023/9/27</td>
<td><a href="./9.html#_9-27">什么是前后端分离？</a></td>
</tr>
</tbody>
</table>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[抽象类和抽象方法]]></title>
            <link>https://www.imufeng.cn/full-stack/java/oop/abstract.html</link>
            <guid>https://www.imufeng.cn/full-stack/java/oop/abstract.html</guid>
            <pubDate>Thu, 19 Oct 2023 09:02:42 GMT</pubDate>
            <description><![CDATA[在一个较为复杂的继承链中，祖先类更具有一般性，作为派生其他类的基类而不糊将其作为用来构造实例。]]></description>
            <content:encoded><![CDATA[<h1 id="抽象类和抽象方法" tabindex="-1">抽象类和抽象方法 <a class="header-anchor" href="#抽象类和抽象方法" aria-label="Permalink to &quot;抽象类和抽象方法&quot;">&ZeroWidthSpace;</a></h1>
<p>在一个较为复杂的继承链中，父类有可能只知道子类应当具备某个方法，但是不能够明确方法实现。祖先类更具有一般性。通常祖先类只会作为派生其他类的基类而不糊将其作为用来构造实例。如员工之于公司，每个员工都应该得到工资，但是每个员工的工资可能都不一样。所以员工类就会有一个没有方法主体的<strong>抽象方法</strong>。而包含抽象方法的类就是<strong>抽象类</strong>。</p>
<p>抽象类与抽象方法都用 <code>abstract</code> 关键字修饰。上述例子的实现可以如下：</p>
<div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre v-pre class="shiki github-dark vp-code-dark" ><code><span class="line"><span style="color: #F97583">class</span><span style="color: #E1E4E8"> </span><span style="color: #B392F0">Scratch</span><span style="color: #E1E4E8"> {</span></span>
<span class="line"><span style="color: #E1E4E8">    </span><span style="color: #F97583">public</span><span style="color: #E1E4E8"> </span><span style="color: #F97583">static</span><span style="color: #E1E4E8"> </span><span style="color: #F97583">void</span><span style="color: #E1E4E8"> </span><span style="color: #B392F0">main</span><span style="color: #E1E4E8">(</span><span style="color: #F97583">String</span><span style="color: #E1E4E8">[] </span><span style="color: #FFAB70">args</span><span style="color: #E1E4E8">) {</span></span>
<span class="line"><span style="color: #E1E4E8">        </span><span style="color: #F97583">var</span><span style="color: #E1E4E8"> leader </span><span style="color: #F97583">=</span><span style="color: #E1E4E8"> </span><span style="color: #F97583">new</span><span style="color: #E1E4E8"> </span><span style="color: #B392F0">Leader</span><span style="color: #E1E4E8">();</span></span>
<span class="line"><span style="color: #E1E4E8">        leader.</span><span style="color: #B392F0">setName</span><span style="color: #E1E4E8">(</span><span style="color: #9ECBFF">&quot;马云&quot;</span><span style="color: #E1E4E8">);</span></span>
<span class="line"><span style="color: #E1E4E8">        leader.</span><span style="color: #B392F0">payoff</span><span style="color: #E1E4E8">(</span><span style="color: #79B8FF">1000000000.00</span><span style="color: #E1E4E8">);</span></span>
<span class="line"><span style="color: #E1E4E8">        </span></span>
<span class="line"><span style="color: #E1E4E8">        </span><span style="color: #F97583">var</span><span style="color: #E1E4E8"> mufeng </span><span style="color: #F97583">=</span><span style="color: #E1E4E8"> </span><span style="color: #F97583">new</span><span style="color: #E1E4E8"> </span><span style="color: #B392F0">Staff</span><span style="color: #E1E4E8">();</span></span>
<span class="line"><span style="color: #E1E4E8">        mufeng.</span><span style="color: #B392F0">setName</span><span style="color: #E1E4E8">(</span><span style="color: #9ECBFF">&quot;沐风&quot;</span><span style="color: #E1E4E8">);</span></span>
<span class="line"><span style="color: #E1E4E8">        mufeng.</span><span style="color: #B392F0">payoff</span><span style="color: #E1E4E8">(</span><span style="color: #79B8FF">1000.00</span><span style="color: #E1E4E8">);</span></span>
<span class="line"></span>
<span class="line"><span style="color: #E1E4E8">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color: #E1E4E8">}</span></span>
<span class="line"><span style="color: #F97583">abstract</span><span style="color: #E1E4E8"> </span><span style="color: #F97583">class</span><span style="color: #E1E4E8"> </span><span style="color: #B392F0">Employee</span><span style="color: #E1E4E8"> {</span></span>
<span class="line"><span style="color: #E1E4E8">    </span><span style="color: #F97583">private</span><span style="color: #E1E4E8"> String name;</span></span>
<span class="line"><span style="color: #E1E4E8">    </span></span>
<span class="line"><span style="color: #E1E4E8">    </span><span style="color: #F97583">abstract</span><span style="color: #E1E4E8"> </span><span style="color: #F97583">void</span><span style="color: #E1E4E8"> </span><span style="color: #B392F0">payoff</span><span style="color: #E1E4E8">(Double </span><span style="color: #FFAB70">salary</span><span style="color: #E1E4E8">);</span></span>
<span class="line"></span>
<span class="line"><span style="color: #E1E4E8">    </span><span style="color: #F97583">public</span><span style="color: #E1E4E8"> String </span><span style="color: #B392F0">getName</span><span style="color: #E1E4E8">() {</span></span>
<span class="line"><span style="color: #E1E4E8">        </span><span style="color: #F97583">return</span><span style="color: #E1E4E8"> name;</span></span>
<span class="line"><span style="color: #E1E4E8">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color: #E1E4E8">    </span><span style="color: #F97583">public</span><span style="color: #E1E4E8"> </span><span style="color: #F97583">void</span><span style="color: #E1E4E8"> </span><span style="color: #B392F0">setName</span><span style="color: #E1E4E8">(String </span><span style="color: #FFAB70">name</span><span style="color: #E1E4E8">) {</span></span>
<span class="line"><span style="color: #E1E4E8">        </span><span style="color: #79B8FF">this</span><span style="color: #E1E4E8">.name </span><span style="color: #F97583">=</span><span style="color: #E1E4E8"> name;</span></span>
<span class="line"><span style="color: #E1E4E8">    }</span></span>
<span class="line"><span style="color: #E1E4E8">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #F97583">class</span><span style="color: #E1E4E8"> </span><span style="color: #B392F0">Leader</span><span style="color: #E1E4E8"> </span><span style="color: #F97583">extends</span><span style="color: #E1E4E8"> </span><span style="color: #B392F0">Employee</span><span style="color: #E1E4E8"> {</span></span>
<span class="line"><span style="color: #E1E4E8">    @</span><span style="color: #F97583">Override</span></span>
<span class="line"><span style="color: #E1E4E8">    </span><span style="color: #F97583">void</span><span style="color: #E1E4E8"> </span><span style="color: #B392F0">payoff</span><span style="color: #E1E4E8">(Double </span><span style="color: #FFAB70">salary</span><span style="color: #E1E4E8">) {</span></span>
<span class="line"><span style="color: #E1E4E8">        System.out.</span><span style="color: #B392F0">printf</span><span style="color: #E1E4E8">(</span><span style="color: #9ECBFF">&quot;%s领导不发工资，本月收入%s</span><span style="color: #79B8FF">\n</span><span style="color: #9ECBFF">&quot;</span><span style="color: #E1E4E8">, </span><span style="color: #79B8FF">this</span><span style="color: #E1E4E8">.</span><span style="color: #B392F0">getName</span><span style="color: #E1E4E8">(), salary);</span></span>
<span class="line"><span style="color: #E1E4E8">    }</span></span>
<span class="line"><span style="color: #E1E4E8">}</span></span>
<span class="line"><span style="color: #F97583">class</span><span style="color: #E1E4E8"> </span><span style="color: #B392F0">Staff</span><span style="color: #E1E4E8"> </span><span style="color: #F97583">extends</span><span style="color: #E1E4E8"> </span><span style="color: #B392F0">Employee</span><span style="color: #E1E4E8"> {</span></span>
<span class="line"><span style="color: #E1E4E8">    @</span><span style="color: #F97583">Override</span></span>
<span class="line"><span style="color: #E1E4E8">    </span><span style="color: #F97583">void</span><span style="color: #E1E4E8"> </span><span style="color: #B392F0">payoff</span><span style="color: #E1E4E8">(Double </span><span style="color: #FFAB70">salary</span><span style="color: #E1E4E8">) {</span></span>
<span class="line"><span style="color: #E1E4E8">        System.out.</span><span style="color: #B392F0">printf</span><span style="color: #E1E4E8">(</span><span style="color: #9ECBFF">&quot;%s本月发工资%s</span><span style="color: #79B8FF">\n</span><span style="color: #9ECBFF">&quot;</span><span style="color: #E1E4E8">, </span><span style="color: #79B8FF">this</span><span style="color: #E1E4E8">.</span><span style="color: #B392F0">getName</span><span style="color: #E1E4E8">(), salary);</span></span>
<span class="line"><span style="color: #E1E4E8">    }</span></span>
<span class="line"><span style="color: #E1E4E8">}</span></span></code></pre><pre v-pre class="shiki github-light vp-code-light" ><code><span class="line"><span style="color: #D73A49">class</span><span style="color: #24292E"> </span><span style="color: #6F42C1">Scratch</span><span style="color: #24292E"> {</span></span>
<span class="line"><span style="color: #24292E">    </span><span style="color: #D73A49">public</span><span style="color: #24292E"> </span><span style="color: #D73A49">static</span><span style="color: #24292E"> </span><span style="color: #D73A49">void</span><span style="color: #24292E"> </span><span style="color: #6F42C1">main</span><span style="color: #24292E">(</span><span style="color: #D73A49">String</span><span style="color: #24292E">[] </span><span style="color: #E36209">args</span><span style="color: #24292E">) {</span></span>
<span class="line"><span style="color: #24292E">        </span><span style="color: #D73A49">var</span><span style="color: #24292E"> leader </span><span style="color: #D73A49">=</span><span style="color: #24292E"> </span><span style="color: #D73A49">new</span><span style="color: #24292E"> </span><span style="color: #6F42C1">Leader</span><span style="color: #24292E">();</span></span>
<span class="line"><span style="color: #24292E">        leader.</span><span style="color: #6F42C1">setName</span><span style="color: #24292E">(</span><span style="color: #032F62">&quot;马云&quot;</span><span style="color: #24292E">);</span></span>
<span class="line"><span style="color: #24292E">        leader.</span><span style="color: #6F42C1">payoff</span><span style="color: #24292E">(</span><span style="color: #005CC5">1000000000.00</span><span style="color: #24292E">);</span></span>
<span class="line"><span style="color: #24292E">        </span></span>
<span class="line"><span style="color: #24292E">        </span><span style="color: #D73A49">var</span><span style="color: #24292E"> mufeng </span><span style="color: #D73A49">=</span><span style="color: #24292E"> </span><span style="color: #D73A49">new</span><span style="color: #24292E"> </span><span style="color: #6F42C1">Staff</span><span style="color: #24292E">();</span></span>
<span class="line"><span style="color: #24292E">        mufeng.</span><span style="color: #6F42C1">setName</span><span style="color: #24292E">(</span><span style="color: #032F62">&quot;沐风&quot;</span><span style="color: #24292E">);</span></span>
<span class="line"><span style="color: #24292E">        mufeng.</span><span style="color: #6F42C1">payoff</span><span style="color: #24292E">(</span><span style="color: #005CC5">1000.00</span><span style="color: #24292E">);</span></span>
<span class="line"></span>
<span class="line"><span style="color: #24292E">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color: #24292E">}</span></span>
<span class="line"><span style="color: #D73A49">abstract</span><span style="color: #24292E"> </span><span style="color: #D73A49">class</span><span style="color: #24292E"> </span><span style="color: #6F42C1">Employee</span><span style="color: #24292E"> {</span></span>
<span class="line"><span style="color: #24292E">    </span><span style="color: #D73A49">private</span><span style="color: #24292E"> String name;</span></span>
<span class="line"><span style="color: #24292E">    </span></span>
<span class="line"><span style="color: #24292E">    </span><span style="color: #D73A49">abstract</span><span style="color: #24292E"> </span><span style="color: #D73A49">void</span><span style="color: #24292E"> </span><span style="color: #6F42C1">payoff</span><span style="color: #24292E">(Double </span><span style="color: #E36209">salary</span><span style="color: #24292E">);</span></span>
<span class="line"></span>
<span class="line"><span style="color: #24292E">    </span><span style="color: #D73A49">public</span><span style="color: #24292E"> String </span><span style="color: #6F42C1">getName</span><span style="color: #24292E">() {</span></span>
<span class="line"><span style="color: #24292E">        </span><span style="color: #D73A49">return</span><span style="color: #24292E"> name;</span></span>
<span class="line"><span style="color: #24292E">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color: #24292E">    </span><span style="color: #D73A49">public</span><span style="color: #24292E"> </span><span style="color: #D73A49">void</span><span style="color: #24292E"> </span><span style="color: #6F42C1">setName</span><span style="color: #24292E">(String </span><span style="color: #E36209">name</span><span style="color: #24292E">) {</span></span>
<span class="line"><span style="color: #24292E">        </span><span style="color: #005CC5">this</span><span style="color: #24292E">.name </span><span style="color: #D73A49">=</span><span style="color: #24292E"> name;</span></span>
<span class="line"><span style="color: #24292E">    }</span></span>
<span class="line"><span style="color: #24292E">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #D73A49">class</span><span style="color: #24292E"> </span><span style="color: #6F42C1">Leader</span><span style="color: #24292E"> </span><span style="color: #D73A49">extends</span><span style="color: #24292E"> </span><span style="color: #6F42C1">Employee</span><span style="color: #24292E"> {</span></span>
<span class="line"><span style="color: #24292E">    @</span><span style="color: #D73A49">Override</span></span>
<span class="line"><span style="color: #24292E">    </span><span style="color: #D73A49">void</span><span style="color: #24292E"> </span><span style="color: #6F42C1">payoff</span><span style="color: #24292E">(Double </span><span style="color: #E36209">salary</span><span style="color: #24292E">) {</span></span>
<span class="line"><span style="color: #24292E">        System.out.</span><span style="color: #6F42C1">printf</span><span style="color: #24292E">(</span><span style="color: #032F62">&quot;%s领导不发工资，本月收入%s</span><span style="color: #005CC5">\n</span><span style="color: #032F62">&quot;</span><span style="color: #24292E">, </span><span style="color: #005CC5">this</span><span style="color: #24292E">.</span><span style="color: #6F42C1">getName</span><span style="color: #24292E">(), salary);</span></span>
<span class="line"><span style="color: #24292E">    }</span></span>
<span class="line"><span style="color: #24292E">}</span></span>
<span class="line"><span style="color: #D73A49">class</span><span style="color: #24292E"> </span><span style="color: #6F42C1">Staff</span><span style="color: #24292E"> </span><span style="color: #D73A49">extends</span><span style="color: #24292E"> </span><span style="color: #6F42C1">Employee</span><span style="color: #24292E"> {</span></span>
<span class="line"><span style="color: #24292E">    @</span><span style="color: #D73A49">Override</span></span>
<span class="line"><span style="color: #24292E">    </span><span style="color: #D73A49">void</span><span style="color: #24292E"> </span><span style="color: #6F42C1">payoff</span><span style="color: #24292E">(Double </span><span style="color: #E36209">salary</span><span style="color: #24292E">) {</span></span>
<span class="line"><span style="color: #24292E">        System.out.</span><span style="color: #6F42C1">printf</span><span style="color: #24292E">(</span><span style="color: #032F62">&quot;%s本月发工资%s</span><span style="color: #005CC5">\n</span><span style="color: #032F62">&quot;</span><span style="color: #24292E">, </span><span style="color: #005CC5">this</span><span style="color: #24292E">.</span><span style="color: #6F42C1">getName</span><span style="color: #24292E">(), salary);</span></span>
<span class="line"><span style="color: #24292E">    }</span></span>
<span class="line"><span style="color: #24292E">}</span></span></code></pre>
</div><p>在上述的例子中，Employee 类中 <code>payoff(Double salary)</code> 方法就是抽象方法，相应的，Employee 类也必须是抽象类。抽象类也可以有具体的属性和方法。</p>
<div class="warning custom-block"><p class="custom-block-title">说明：</p>
<ul>
<li>抽象类不能实例化对象。</li>
<li>抽象类可以有构造方法，供子类创建时初始化。</li>
<li>成员变量可以定义在抽象类中。</li>
<li>抽象类的子类如果不重写抽象方法，则必须用 abstract 关键字修饰。</li>
<li>抽象方法不能被限制为 private 或 final。</li>
</ul>
</div>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[泛域名证书申请以及部署]]></title>
            <link>https://www.imufeng.cn/technology/web/acme-sh.html</link>
            <guid>https://www.imufeng.cn/technology/web/acme-sh.html</guid>
            <pubDate>Wed, 18 Oct 2023 09:23:11 GMT</pubDate>
            <description><![CDATA[使用 acme.sh 部署 Let's Encrypt 泛域名证书。]]></description>
            <content:encoded><![CDATA[<h1 id="泛域名证书申请以及部署" tabindex="-1">泛域名证书申请以及部署 <a class="header-anchor" href="#泛域名证书申请以及部署" aria-label="Permalink to &quot;泛域名证书申请以及部署&quot;">&ZeroWidthSpace;</a></h1>
<blockquote>
<p>由于目前所有的域名服务商对于免费CA证书仅提供由<code>digicert</code>机构颁发的，只允许有20个子域名且不支持泛子域名。故使用 <code>Let's Encrypt</code> 的SSL证书</p>
</blockquote>
<p>Let’s Encrypt 是一个证书颁发机构，向 Let’s Encrypt 申请证书是免费的。Let's Encrypt 支持泛域名证书，不需要为每个子域名单独申请证书。</p>
<h2 id="一、acme-sh部署工具" tabindex="-1">一、<code>acme.sh</code>部署工具 <a class="header-anchor" href="#一、acme-sh部署工具" aria-label="Permalink to &quot;一、`acme.sh`部署工具&quot;">&ZeroWidthSpace;</a></h2>
<p>根据 <code>acme.sh</code> [中文说明](<a href="https://github.com/acmesh-official/acme.sh/wiki/%E8%AF%B4%E6%98%8E" target="_blank" rel="noreferrer">说明 · acmesh-official/acme.sh Wiki (github.com)</a>)，<code>acme.sh</code> 实现了 <code>acme</code> 协议, 可以从 <code>let‘s encrypt</code> 生成免费的证书。</p>
<ol>
<li>
<p>其安装只需要执行以下命令，所有用户均可安装：</p>
<div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre v-pre class="shiki github-dark vp-code-dark" ><code><span class="line"><span style="color: #B392F0">curl</span><span style="color: #E1E4E8"> </span><span style="color: #9ECBFF">https://get.acme.sh</span><span style="color: #E1E4E8"> </span><span style="color: #F97583">|</span><span style="color: #E1E4E8"> </span><span style="color: #B392F0">sh</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">-s</span><span style="color: #E1E4E8"> </span><span style="color: #9ECBFF">email=my@example.com</span></span></code></pre><pre v-pre class="shiki github-light vp-code-light" ><code><span class="line"><span style="color: #6F42C1">curl</span><span style="color: #24292E"> </span><span style="color: #032F62">https://get.acme.sh</span><span style="color: #24292E"> </span><span style="color: #D73A49">|</span><span style="color: #24292E"> </span><span style="color: #6F42C1">sh</span><span style="color: #24292E"> </span><span style="color: #005CC5">-s</span><span style="color: #24292E"> </span><span style="color: #032F62">email=my@example.com</span></span></code></pre>
</div></li>
<li>
<p>该工具将会安装在 <code>~/.acme.sh/</code>  目录下。</p>
</li>
</ol>
<h2 id="二、生成证书" tabindex="-1">二、生成证书 <a class="header-anchor" href="#二、生成证书" aria-label="Permalink to &quot;二、生成证书&quot;">&ZeroWidthSpace;</a></h2>
<p><code>acme.sh</code> 实现了 <strong><code>acme</code></strong> 协议支持的所有验证协议. 一般有两种方式验证: http 和 dns 验证.</p>
<h3 id="_2-1-http-方式" tabindex="-1">2.1 http 方式 <a class="header-anchor" href="#_2-1-http-方式" aria-label="Permalink to &quot;2.1 http 方式&quot;">&ZeroWidthSpace;</a></h3>
<p>http方式需要在该网站根目录放置一个文件来验证域名所有权。</p>
<p>可以执行以下命令生成：</p>
<div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre v-pre class="shiki github-dark vp-code-dark" ><code><span class="line"><span style="color: #B392F0">acme.sh</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">--issue</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">-d</span><span style="color: #E1E4E8"> </span><span style="color: #9ECBFF">mydomain.com</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">-d</span><span style="color: #E1E4E8"> </span><span style="color: #9ECBFF">www.mydomain.com</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">--webroot</span><span style="color: #E1E4E8"> </span><span style="color: #9ECBFF">/home/wwwroot/mydomain.com/</span></span></code></pre><pre v-pre class="shiki github-light vp-code-light" ><code><span class="line"><span style="color: #6F42C1">acme.sh</span><span style="color: #24292E"> </span><span style="color: #005CC5">--issue</span><span style="color: #24292E"> </span><span style="color: #005CC5">-d</span><span style="color: #24292E"> </span><span style="color: #032F62">mydomain.com</span><span style="color: #24292E"> </span><span style="color: #005CC5">-d</span><span style="color: #24292E"> </span><span style="color: #032F62">www.mydomain.com</span><span style="color: #24292E"> </span><span style="color: #005CC5">--webroot</span><span style="color: #24292E"> </span><span style="color: #032F62">/home/wwwroot/mydomain.com/</span></span></code></pre>
</div><p>如果你使用apache或者nginx服务，执行以下命令会自动识别并完成验证，完成后还将为你删除文件，做到用户无感验证。</p>
<div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre v-pre class="shiki github-dark vp-code-dark" ><code><span class="line"><span style="color: #B392F0">acme.sh</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">--issue</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">-d</span><span style="color: #E1E4E8"> </span><span style="color: #9ECBFF">mydomain.com</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">--apache/nginx</span></span></code></pre><pre v-pre class="shiki github-light vp-code-light" ><code><span class="line"><span style="color: #6F42C1">acme.sh</span><span style="color: #24292E"> </span><span style="color: #005CC5">--issue</span><span style="color: #24292E"> </span><span style="color: #005CC5">-d</span><span style="color: #24292E"> </span><span style="color: #032F62">mydomain.com</span><span style="color: #24292E"> </span><span style="color: #005CC5">--apache/nginx</span></span></code></pre>
</div><p>如果你的服务器80端口是空闲的，<code>acme.sh</code>还将自动配置一个webserver，监听80端口并自动完成配置。</p>
<h3 id="_2-2-dns-方式" tabindex="-1">2.2 DNS 方式 <a class="header-anchor" href="#_2-2-dns-方式" aria-label="Permalink to &quot;2.2 DNS 方式&quot;">&ZeroWidthSpace;</a></h3>
<p>DNS方式只需要在配置DNS解析记录即可，且TXT的解析记录对你的服务不会产生影响。</p>
<p>执行以下命令，按照提示配置DNS解析记录即可：</p>
<div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre v-pre class="shiki github-dark vp-code-dark" ><code><span class="line"><span style="color: #B392F0">acme.sh</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">--issue</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">--dns</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">-d</span><span style="color: #E1E4E8"> </span><span style="color: #9ECBFF">mydomain.com</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">\</span></span>
<span class="line"><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">--yes-I-know-dns-manual-mode-enough-go-ahead-please</span></span></code></pre><pre v-pre class="shiki github-light vp-code-light" ><code><span class="line"><span style="color: #6F42C1">acme.sh</span><span style="color: #24292E"> </span><span style="color: #005CC5">--issue</span><span style="color: #24292E"> </span><span style="color: #005CC5">--dns</span><span style="color: #24292E"> </span><span style="color: #005CC5">-d</span><span style="color: #24292E"> </span><span style="color: #032F62">mydomain.com</span><span style="color: #24292E"> </span><span style="color: #005CC5">\</span></span>
<span class="line"><span style="color: #24292E"> </span><span style="color: #005CC5">--yes-I-know-dns-manual-mode-enough-go-ahead-please</span></span></code></pre>
</div><p>解析完成后，执行以下命令来完成验证并重新生成证书：</p>
<div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre v-pre class="shiki github-dark vp-code-dark" ><code><span class="line"><span style="color: #B392F0">acme.sh</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">--renew</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">-d</span><span style="color: #E1E4E8"> </span><span style="color: #9ECBFF">mydomain.com</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">\</span></span>
<span class="line"><span style="color: #E1E4E8">  </span><span style="color: #79B8FF">--yes-I-know-dns-manual-mode-enough-go-ahead-please</span></span></code></pre><pre v-pre class="shiki github-light vp-code-light" ><code><span class="line"><span style="color: #6F42C1">acme.sh</span><span style="color: #24292E"> </span><span style="color: #005CC5">--renew</span><span style="color: #24292E"> </span><span style="color: #005CC5">-d</span><span style="color: #24292E"> </span><span style="color: #032F62">mydomain.com</span><span style="color: #24292E"> </span><span style="color: #005CC5">\</span></span>
<span class="line"><span style="color: #24292E">  </span><span style="color: #005CC5">--yes-I-know-dns-manual-mode-enough-go-ahead-please</span></span></code></pre>
</div><blockquote>
<p>注意：若没有配置Automatic DNS API，该方法将无法自动更新你的域名证书。</p>
</blockquote>
<h3 id="_2-3-dns进阶版" tabindex="-1">2.3 DNS进阶版 <a class="header-anchor" href="#_2-3-dns进阶版" aria-label="Permalink to &quot;2.3 DNS进阶版&quot;">&ZeroWidthSpace;</a></h3>
<p>DNS方式还支持使用域名解析商提供的接口自动进行配置。以阿里云为例：</p>
<p>首先将阿里云的阿里云 API 的密钥以以下格式配置到环境变量：</p>
<div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre v-pre class="shiki github-dark vp-code-dark" ><code><span class="line"><span style="color: #6A737D"># 腾讯云dnspod</span></span>
<span class="line"><span style="color: #F97583">export</span><span style="color: #E1E4E8"> DP_Id</span><span style="color: #F97583">=</span><span style="color: #9ECBFF">&quot;XXXXXXXXXX&quot;</span></span>
<span class="line"><span style="color: #F97583">export</span><span style="color: #E1E4E8"> DP_Key</span><span style="color: #F97583">=</span><span style="color: #9ECBFF">&quot;XXXXXXXXXX&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #6A737D"># 阿里云</span></span>
<span class="line"><span style="color: #F97583">export</span><span style="color: #E1E4E8"> Ali_Key</span><span style="color: #F97583">=</span><span style="color: #9ECBFF">&quot;XXXXXXXXXX&quot;</span></span>
<span class="line"><span style="color: #F97583">export</span><span style="color: #E1E4E8"> Ali_Secret</span><span style="color: #F97583">=</span><span style="color: #9ECBFF">&quot;XXXXXXXXXX“</span></span></code></pre><pre v-pre class="shiki github-light vp-code-light" ><code><span class="line"><span style="color: #6A737D"># 腾讯云dnspod</span></span>
<span class="line"><span style="color: #D73A49">export</span><span style="color: #24292E"> DP_Id</span><span style="color: #D73A49">=</span><span style="color: #032F62">&quot;XXXXXXXXXX&quot;</span></span>
<span class="line"><span style="color: #D73A49">export</span><span style="color: #24292E"> DP_Key</span><span style="color: #D73A49">=</span><span style="color: #032F62">&quot;XXXXXXXXXX&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #6A737D"># 阿里云</span></span>
<span class="line"><span style="color: #D73A49">export</span><span style="color: #24292E"> Ali_Key</span><span style="color: #D73A49">=</span><span style="color: #032F62">&quot;XXXXXXXXXX&quot;</span></span>
<span class="line"><span style="color: #D73A49">export</span><span style="color: #24292E"> Ali_Secret</span><span style="color: #D73A49">=</span><span style="color: #032F62">&quot;XXXXXXXXXX“</span></span></code></pre>
</div><p>然后就可以通过以下命令生成证书：</p>
<div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre v-pre class="shiki github-dark vp-code-dark" ><code><span class="line"><span style="color: #6A737D"># 腾讯云</span></span>
<span class="line"><span style="color: #B392F0">acme.sh</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">--issue</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">--dns</span><span style="color: #E1E4E8"> </span><span style="color: #9ECBFF">dns_dp</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">-d</span><span style="color: #E1E4E8"> </span><span style="color: #9ECBFF">example.com</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">-d</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">*</span><span style="color: #9ECBFF">.example.com</span></span>
<span class="line"></span>
<span class="line"><span style="color: #6A737D"># 阿里云</span></span>
<span class="line"><span style="color: #B392F0">acme.sh</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">--issue</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">--dns</span><span style="color: #E1E4E8"> </span><span style="color: #9ECBFF">dns_ali</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">-d</span><span style="color: #E1E4E8"> </span><span style="color: #9ECBFF">example.com</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">-d</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">*</span><span style="color: #9ECBFF">.example.com</span></span></code></pre><pre v-pre class="shiki github-light vp-code-light" ><code><span class="line"><span style="color: #6A737D"># 腾讯云</span></span>
<span class="line"><span style="color: #6F42C1">acme.sh</span><span style="color: #24292E"> </span><span style="color: #005CC5">--issue</span><span style="color: #24292E"> </span><span style="color: #005CC5">--dns</span><span style="color: #24292E"> </span><span style="color: #032F62">dns_dp</span><span style="color: #24292E"> </span><span style="color: #005CC5">-d</span><span style="color: #24292E"> </span><span style="color: #032F62">example.com</span><span style="color: #24292E"> </span><span style="color: #005CC5">-d</span><span style="color: #24292E"> </span><span style="color: #005CC5">*</span><span style="color: #032F62">.example.com</span></span>
<span class="line"></span>
<span class="line"><span style="color: #6A737D"># 阿里云</span></span>
<span class="line"><span style="color: #6F42C1">acme.sh</span><span style="color: #24292E"> </span><span style="color: #005CC5">--issue</span><span style="color: #24292E"> </span><span style="color: #005CC5">--dns</span><span style="color: #24292E"> </span><span style="color: #032F62">dns_ali</span><span style="color: #24292E"> </span><span style="color: #005CC5">-d</span><span style="color: #24292E"> </span><span style="color: #032F62">example.com</span><span style="color: #24292E"> </span><span style="color: #005CC5">-d</span><span style="color: #24292E"> </span><span style="color: #005CC5">*</span><span style="color: #032F62">.example.com</span></span></code></pre>
</div><h2 id="三、安装配置证书" tabindex="-1">三、安装配置证书 <a class="header-anchor" href="#三、安装配置证书" aria-label="Permalink to &quot;三、安装配置证书&quot;">&ZeroWidthSpace;</a></h2>
<p>此处以Podman Nginx容器配置证书举例。</p>
<h3 id="_3-1-生成nginx配置" tabindex="-1">3.1 生成Nginx配置 <a class="header-anchor" href="#_3-1-生成nginx配置" aria-label="Permalink to &quot;3.1 生成Nginx配置&quot;">&ZeroWidthSpace;</a></h3>
<p>NGINX配置文件可以使用[NGINXCONF.IO](<a href="https://www.digitalocean.com/community/tools/nginx?global.app.lang=zhCN" target="_blank" rel="noreferrer">NGINXConfig | DigitalOcean</a>)配置。页面为中文且较为友好。</p>
<h3 id="_3-2-生成-dhparam-pem" tabindex="-1">3.2 生成 dhparam.pem <a class="header-anchor" href="#_3-2-生成-dhparam-pem" aria-label="Permalink to &quot;3.2 生成 dhparam.pem&quot;">&ZeroWidthSpace;</a></h3>
<p>openssl dhparam用于生成和管理dh文件。dh(Diffie-Hellman)是著名的密钥交换协议，或称为密钥协商协议，它可以保证通信双方安全地交换密钥。但注意，它不是加密算法，所以不提供加密功能，仅仅只是保护密钥交换的过程。在openvpn中就使用了该交换协议。</p>
<p>执行以下命令即可生成：</p>
<div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre v-pre class="shiki github-dark vp-code-dark" ><code><span class="line"><span style="color: #B392F0">openssl</span><span style="color: #E1E4E8"> </span><span style="color: #9ECBFF">dhparam</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">-out</span><span style="color: #E1E4E8"> </span><span style="color: #9ECBFF">~/dhparam.pem</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">2048</span></span></code></pre><pre v-pre class="shiki github-light vp-code-light" ><code><span class="line"><span style="color: #6F42C1">openssl</span><span style="color: #24292E"> </span><span style="color: #032F62">dhparam</span><span style="color: #24292E"> </span><span style="color: #005CC5">-out</span><span style="color: #24292E"> </span><span style="color: #032F62">~/dhparam.pem</span><span style="color: #24292E"> </span><span style="color: #005CC5">2048</span></span></code></pre>
</div><p>如果你使用上面提供的NGINXCONFIG.IO生成了配置文件，此处配置在nginx.conf文件中：</p>
<div class="language-ini vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ini</span><pre v-pre class="shiki github-dark vp-code-dark" ><code><span class="line"><span style="color: #6A737D"># Diffie-Hellman parameter for DHE ciphersuites                                         </span></span>
<span class="line"><span style="color: #E1E4E8">ssl_dhparam /etc/nginx/dhparam.pem</span><span style="color: #6A737D">;</span></span></code></pre><pre v-pre class="shiki github-light vp-code-light" ><code><span class="line"><span style="color: #6A737D"># Diffie-Hellman parameter for DHE ciphersuites                                         </span></span>
<span class="line"><span style="color: #24292E">ssl_dhparam /etc/nginx/dhparam.pem</span><span style="color: #6A737D">;</span></span></code></pre>
</div><h3 id="_3-3-自动更新证书" tabindex="-1">3.3 自动更新证书 <a class="header-anchor" href="#_3-3-自动更新证书" aria-label="Permalink to &quot;3.3 自动更新证书&quot;">&ZeroWidthSpace;</a></h3>
<p>以下为podman Nginx容器自动更新证书的命令：</p>
<div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre v-pre class="shiki github-dark vp-code-dark" ><code><span class="line"><span style="color: #F97583">~</span><span style="color: #E1E4E8">/.acme.sh/acme.sh --install-cert </span><span style="color: #79B8FF">\ </span></span>
<span class="line"><span style="color: #B392F0">-d</span><span style="color: #E1E4E8"> </span><span style="color: #9ECBFF">example.com</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">\ </span></span>
<span class="line"><span style="color: #B392F0">--key-file</span><span style="color: #E1E4E8"> </span><span style="color: #9ECBFF">/etc/nginx/ssl/example.com.key</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">\ </span><span style="color: #9ECBFF">#</span><span style="color: #E1E4E8"> </span><span style="color: #9ECBFF">私钥地址</span></span>
<span class="line"><span style="color: #B392F0">--fullchain-file</span><span style="color: #E1E4E8"> </span><span style="color: #9ECBFF">/etc/nginx/ssl/example.com.cer</span><span style="color: #E1E4E8">  </span><span style="color: #79B8FF">\ </span><span style="color: #9ECBFF">#</span><span style="color: #E1E4E8"> </span><span style="color: #9ECBFF">公钥地址</span></span>
<span class="line"><span style="color: #B392F0">--reloadcmd</span><span style="color: #E1E4E8"> </span><span style="color: #9ECBFF">&quot;podman exec -it nginx nginx force-reload&quot;</span></span></code></pre><pre v-pre class="shiki github-light vp-code-light" ><code><span class="line"><span style="color: #D73A49">~</span><span style="color: #24292E">/.acme.sh/acme.sh --install-cert </span><span style="color: #005CC5">\ </span></span>
<span class="line"><span style="color: #6F42C1">-d</span><span style="color: #24292E"> </span><span style="color: #032F62">example.com</span><span style="color: #24292E"> </span><span style="color: #005CC5">\ </span></span>
<span class="line"><span style="color: #6F42C1">--key-file</span><span style="color: #24292E"> </span><span style="color: #032F62">/etc/nginx/ssl/example.com.key</span><span style="color: #24292E"> </span><span style="color: #005CC5">\ </span><span style="color: #032F62">#</span><span style="color: #24292E"> </span><span style="color: #032F62">私钥地址</span></span>
<span class="line"><span style="color: #6F42C1">--fullchain-file</span><span style="color: #24292E"> </span><span style="color: #032F62">/etc/nginx/ssl/example.com.cer</span><span style="color: #24292E">  </span><span style="color: #005CC5">\ </span><span style="color: #032F62">#</span><span style="color: #24292E"> </span><span style="color: #032F62">公钥地址</span></span>
<span class="line"><span style="color: #6F42C1">--reloadcmd</span><span style="color: #24292E"> </span><span style="color: #032F62">&quot;podman exec -it nginx nginx force-reload&quot;</span></span></code></pre>
</div><blockquote>
<p>注意：<code>nginx reload</code> 命令并不会更新证书，需要使用 <code>nginx force-reload</code></p>
</blockquote>
<h2 id="四、查看已安装证书信息" tabindex="-1">四、查看已安装证书信息 <a class="header-anchor" href="#四、查看已安装证书信息" aria-label="Permalink to &quot;四、查看已安装证书信息&quot;">&ZeroWidthSpace;</a></h2>
<div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre v-pre class="shiki github-dark vp-code-dark" ><code><span class="line"><span style="color: #B392F0">acme.sh</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">--info</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">-d</span><span style="color: #E1E4E8"> </span><span style="color: #9ECBFF">example.com</span></span>
<span class="line"><span style="color: #6A737D"># 会输出如下内容：</span></span>
<span class="line"><span style="color: #E1E4E8">DOMAIN_CONF</span><span style="color: #F97583">=</span><span style="color: #9ECBFF">/root/.acme.sh/example.com/example.com.conf</span></span>
<span class="line"><span style="color: #E1E4E8">Le_Domain</span><span style="color: #F97583">=</span><span style="color: #9ECBFF">example.com</span></span>
<span class="line"><span style="color: #E1E4E8">Le_Alt</span><span style="color: #F97583">=</span><span style="color: #9ECBFF">no</span></span>
<span class="line"><span style="color: #E1E4E8">Le_Webroot</span><span style="color: #F97583">=</span><span style="color: #9ECBFF">dns_ali</span></span>
<span class="line"><span style="color: #E1E4E8">Le_PreHook</span><span style="color: #F97583">=</span></span>
<span class="line"><span style="color: #E1E4E8">Le_PostHook</span><span style="color: #F97583">=</span></span>
<span class="line"><span style="color: #E1E4E8">Le_RenewHook</span><span style="color: #F97583">=</span></span>
<span class="line"><span style="color: #E1E4E8">Le_API</span><span style="color: #F97583">=</span><span style="color: #9ECBFF">https://acme-v02.api.letsencrypt.org/directory</span></span>
<span class="line"><span style="color: #E1E4E8">Le_Keylength</span><span style="color: #F97583">=</span></span>
<span class="line"><span style="color: #E1E4E8">Le_OrderFinalize</span><span style="color: #F97583">=</span><span style="color: #9ECBFF">https://acme-v02.api.letsencrypt.org/acme/finalize/23xxxx150/781xxxx4310</span></span>
<span class="line"><span style="color: #E1E4E8">Le_LinkOrder</span><span style="color: #F97583">=</span><span style="color: #9ECBFF">https://acme-v02.api.letsencrypt.org/acme/order/233xxx150/781xxxx4310</span></span>
<span class="line"><span style="color: #E1E4E8">Le_LinkCert</span><span style="color: #F97583">=</span><span style="color: #9ECBFF">https://acme-v02.api.letsencrypt.org/acme/cert/04cbd28xxxxxx349ecaea8d07</span></span>
<span class="line"><span style="color: #E1E4E8">Le_CertCreateTime</span><span style="color: #F97583">=</span><span style="color: #79B8FF">1649358725</span></span>
<span class="line"><span style="color: #E1E4E8">Le_CertCreateTimeStr</span><span style="color: #F97583">=</span><span style="color: #9ECBFF">Thu</span><span style="color: #E1E4E8"> </span><span style="color: #B392F0">Apr</span><span style="color: #E1E4E8">  </span><span style="color: #79B8FF">7</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">19</span><span style="color: #9ECBFF">:12:05</span><span style="color: #E1E4E8"> </span><span style="color: #9ECBFF">UTC</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">2022</span></span>
<span class="line"><span style="color: #E1E4E8">Le_NextRenewTimeStr</span><span style="color: #F97583">=</span><span style="color: #9ECBFF">Mon</span><span style="color: #E1E4E8"> </span><span style="color: #B392F0">Jun</span><span style="color: #E1E4E8">  </span><span style="color: #79B8FF">6</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">19</span><span style="color: #9ECBFF">:12:05</span><span style="color: #E1E4E8"> </span><span style="color: #9ECBFF">UTC</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">2022</span></span>
<span class="line"><span style="color: #E1E4E8">Le_NextRenewTime</span><span style="color: #F97583">=</span><span style="color: #79B8FF">1654456325</span></span>
<span class="line"><span style="color: #E1E4E8">Le_RealCertPath</span><span style="color: #F97583">=</span></span>
<span class="line"><span style="color: #E1E4E8">Le_RealCACertPath</span><span style="color: #F97583">=</span></span>
<span class="line"><span style="color: #E1E4E8">Le_RealKeyPath</span><span style="color: #F97583">=</span><span style="color: #9ECBFF">/etc/acme/example.com/privkey.pem</span></span>
<span class="line"><span style="color: #E1E4E8">Le_ReloadCmd</span><span style="color: #F97583">=</span><span style="color: #9ECBFF">service</span><span style="color: #E1E4E8"> </span><span style="color: #B392F0">nginx</span><span style="color: #E1E4E8"> </span><span style="color: #9ECBFF">force-reload</span></span>
<span class="line"><span style="color: #E1E4E8">Le_RealFullChainPath</span><span style="color: #F97583">=</span><span style="color: #9ECBFF">/etc/acme/example.com/chain.pem</span></span></code></pre><pre v-pre class="shiki github-light vp-code-light" ><code><span class="line"><span style="color: #6F42C1">acme.sh</span><span style="color: #24292E"> </span><span style="color: #005CC5">--info</span><span style="color: #24292E"> </span><span style="color: #005CC5">-d</span><span style="color: #24292E"> </span><span style="color: #032F62">example.com</span></span>
<span class="line"><span style="color: #6A737D"># 会输出如下内容：</span></span>
<span class="line"><span style="color: #24292E">DOMAIN_CONF</span><span style="color: #D73A49">=</span><span style="color: #032F62">/root/.acme.sh/example.com/example.com.conf</span></span>
<span class="line"><span style="color: #24292E">Le_Domain</span><span style="color: #D73A49">=</span><span style="color: #032F62">example.com</span></span>
<span class="line"><span style="color: #24292E">Le_Alt</span><span style="color: #D73A49">=</span><span style="color: #032F62">no</span></span>
<span class="line"><span style="color: #24292E">Le_Webroot</span><span style="color: #D73A49">=</span><span style="color: #032F62">dns_ali</span></span>
<span class="line"><span style="color: #24292E">Le_PreHook</span><span style="color: #D73A49">=</span></span>
<span class="line"><span style="color: #24292E">Le_PostHook</span><span style="color: #D73A49">=</span></span>
<span class="line"><span style="color: #24292E">Le_RenewHook</span><span style="color: #D73A49">=</span></span>
<span class="line"><span style="color: #24292E">Le_API</span><span style="color: #D73A49">=</span><span style="color: #032F62">https://acme-v02.api.letsencrypt.org/directory</span></span>
<span class="line"><span style="color: #24292E">Le_Keylength</span><span style="color: #D73A49">=</span></span>
<span class="line"><span style="color: #24292E">Le_OrderFinalize</span><span style="color: #D73A49">=</span><span style="color: #032F62">https://acme-v02.api.letsencrypt.org/acme/finalize/23xxxx150/781xxxx4310</span></span>
<span class="line"><span style="color: #24292E">Le_LinkOrder</span><span style="color: #D73A49">=</span><span style="color: #032F62">https://acme-v02.api.letsencrypt.org/acme/order/233xxx150/781xxxx4310</span></span>
<span class="line"><span style="color: #24292E">Le_LinkCert</span><span style="color: #D73A49">=</span><span style="color: #032F62">https://acme-v02.api.letsencrypt.org/acme/cert/04cbd28xxxxxx349ecaea8d07</span></span>
<span class="line"><span style="color: #24292E">Le_CertCreateTime</span><span style="color: #D73A49">=</span><span style="color: #005CC5">1649358725</span></span>
<span class="line"><span style="color: #24292E">Le_CertCreateTimeStr</span><span style="color: #D73A49">=</span><span style="color: #032F62">Thu</span><span style="color: #24292E"> </span><span style="color: #6F42C1">Apr</span><span style="color: #24292E">  </span><span style="color: #005CC5">7</span><span style="color: #24292E"> </span><span style="color: #005CC5">19</span><span style="color: #032F62">:12:05</span><span style="color: #24292E"> </span><span style="color: #032F62">UTC</span><span style="color: #24292E"> </span><span style="color: #005CC5">2022</span></span>
<span class="line"><span style="color: #24292E">Le_NextRenewTimeStr</span><span style="color: #D73A49">=</span><span style="color: #032F62">Mon</span><span style="color: #24292E"> </span><span style="color: #6F42C1">Jun</span><span style="color: #24292E">  </span><span style="color: #005CC5">6</span><span style="color: #24292E"> </span><span style="color: #005CC5">19</span><span style="color: #032F62">:12:05</span><span style="color: #24292E"> </span><span style="color: #032F62">UTC</span><span style="color: #24292E"> </span><span style="color: #005CC5">2022</span></span>
<span class="line"><span style="color: #24292E">Le_NextRenewTime</span><span style="color: #D73A49">=</span><span style="color: #005CC5">1654456325</span></span>
<span class="line"><span style="color: #24292E">Le_RealCertPath</span><span style="color: #D73A49">=</span></span>
<span class="line"><span style="color: #24292E">Le_RealCACertPath</span><span style="color: #D73A49">=</span></span>
<span class="line"><span style="color: #24292E">Le_RealKeyPath</span><span style="color: #D73A49">=</span><span style="color: #032F62">/etc/acme/example.com/privkey.pem</span></span>
<span class="line"><span style="color: #24292E">Le_ReloadCmd</span><span style="color: #D73A49">=</span><span style="color: #032F62">service</span><span style="color: #24292E"> </span><span style="color: #6F42C1">nginx</span><span style="color: #24292E"> </span><span style="color: #032F62">force-reload</span></span>
<span class="line"><span style="color: #24292E">Le_RealFullChainPath</span><span style="color: #D73A49">=</span><span style="color: #032F62">/etc/acme/example.com/chain.pem</span></span></code></pre>
</div><h2 id="五、更新证书" tabindex="-1">五、更新证书 <a class="header-anchor" href="#五、更新证书" aria-label="Permalink to &quot;五、更新证书&quot;">&ZeroWidthSpace;</a></h2>
<p>目前证书在 60 天以后会自动更新，使用crontab 工具。无需任何操作。</p>
<div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre v-pre class="shiki github-dark vp-code-dark" ><code><span class="line"><span style="color: #B392F0">crontab</span><span style="color: #E1E4E8">  </span><span style="color: #79B8FF">-l</span></span>
<span class="line"></span>
<span class="line"><span style="color: #B392F0">56</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">*</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">*</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">*</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">*</span><span style="color: #E1E4E8"> </span><span style="color: #9ECBFF">&quot;/root/.acme.sh&quot;/acme.sh</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">--cron</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">--home</span><span style="color: #E1E4E8"> </span><span style="color: #9ECBFF">&quot;/root/.acme.sh&quot;</span><span style="color: #E1E4E8"> </span><span style="color: #F97583">&gt;</span><span style="color: #E1E4E8"> </span><span style="color: #9ECBFF">/dev/null</span></span></code></pre><pre v-pre class="shiki github-light vp-code-light" ><code><span class="line"><span style="color: #6F42C1">crontab</span><span style="color: #24292E">  </span><span style="color: #005CC5">-l</span></span>
<span class="line"></span>
<span class="line"><span style="color: #6F42C1">56</span><span style="color: #24292E"> </span><span style="color: #005CC5">*</span><span style="color: #24292E"> </span><span style="color: #005CC5">*</span><span style="color: #24292E"> </span><span style="color: #005CC5">*</span><span style="color: #24292E"> </span><span style="color: #005CC5">*</span><span style="color: #24292E"> </span><span style="color: #032F62">&quot;/root/.acme.sh&quot;/acme.sh</span><span style="color: #24292E"> </span><span style="color: #005CC5">--cron</span><span style="color: #24292E"> </span><span style="color: #005CC5">--home</span><span style="color: #24292E"> </span><span style="color: #032F62">&quot;/root/.acme.sh&quot;</span><span style="color: #24292E"> </span><span style="color: #D73A49">&gt;</span><span style="color: #24292E"> </span><span style="color: #032F62">/dev/null</span></span></code></pre>
</div><h2 id="六、修改reloadcmd" tabindex="-1">六、修改ReloadCmd <a class="header-anchor" href="#六、修改reloadcmd" aria-label="Permalink to &quot;六、修改ReloadCmd&quot;">&ZeroWidthSpace;</a></h2>
<p>根据官网的说法，不建议直接修改<code>example.conf</code>文件来达到修改ReloadCmd的目的，且目前修改<code>ReloadCmd</code>没有专门的命令，可以通过重新安装证书来修改。</p>
<h2 id="七、更新-acme-sh" tabindex="-1">七、更新 acme.sh <a class="header-anchor" href="#七、更新-acme-sh" aria-label="Permalink to &quot;七、更新 acme.sh&quot;">&ZeroWidthSpace;</a></h2>
<p>升级 acme.sh 到最新版 :</p>
<div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre v-pre class="shiki github-dark vp-code-dark" ><code><span class="line"><span style="color: #B392F0">acme.sh</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">--upgrade</span></span></code></pre><pre v-pre class="shiki github-light vp-code-light" ><code><span class="line"><span style="color: #6F42C1">acme.sh</span><span style="color: #24292E"> </span><span style="color: #005CC5">--upgrade</span></span></code></pre>
</div><p>如果你不想手动升级, 可以开启自动升级:</p>
<div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre v-pre class="shiki github-dark vp-code-dark" ><code><span class="line"><span style="color: #B392F0">acme.sh</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">--upgrade</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">--auto-upgrade</span></span></code></pre><pre v-pre class="shiki github-light vp-code-light" ><code><span class="line"><span style="color: #6F42C1">acme.sh</span><span style="color: #24292E"> </span><span style="color: #005CC5">--upgrade</span><span style="color: #24292E"> </span><span style="color: #005CC5">--auto-upgrade</span></span></code></pre>
</div><p>之后, acme.sh 就会自动保持更新了.</p>
<p>你也可以随时关闭自动更新:</p>
<div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre v-pre class="shiki github-dark vp-code-dark" ><code><span class="line"><span style="color: #B392F0">acme.sh</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">--upgrade</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">--auto-upgrade</span><span style="color: #E1E4E8">  </span><span style="color: #79B8FF">0</span></span></code></pre><pre v-pre class="shiki github-light vp-code-light" ><code><span class="line"><span style="color: #6F42C1">acme.sh</span><span style="color: #24292E"> </span><span style="color: #005CC5">--upgrade</span><span style="color: #24292E"> </span><span style="color: #005CC5">--auto-upgrade</span><span style="color: #24292E">  </span><span style="color: #005CC5">0</span></span></code></pre>
</div><h2 id="参考链接" tabindex="-1">参考链接 <a class="header-anchor" href="#参考链接" aria-label="Permalink to &quot;参考链接&quot;">&ZeroWidthSpace;</a></h2>
<ul>
<li>
<p><a href="https://github.com/acmesh-official/acme.sh/wiki/%E8%AF%B4%E6%98%8E" target="_blank" rel="noreferrer">acme.sh中文文档  (github.com)</a></p>
</li>
<li>
<p><a href="https://zhuanlan.zhihu.com/p/445852299" target="_blank" rel="noreferrer">Let's Encrypt SSL 泛域名证书申请和配置 - 知乎 (zhihu.com)</a></p>
</li>
<li>
<p><a href="https://github.com/acmesh-official/acme.sh/issues/1439" target="_blank" rel="noreferrer">acme.sh · Issue #1439 · (github.com)</a></p>
</li>
<li>
<p><a href="https://www.digitalocean.com/community/tools/nginx?global.app.lang=zhCN" target="_blank" rel="noreferrer">NGINXConfig | DigitalOcean</a></p>
</li>
<li>
<p><a href="https://www.cnblogs.com/f-ck-need-u/p/7103791.html" target="_blank" rel="noreferrer">openssl dhparam(密钥交换) - 骏马金龙 - 博客园 (cnblogs.com)</a></p>
</li>
</ul>
]]></content:encoded>
        </item>
        <item>
            <link>https://www.imufeng.cn/full-stack/</link>
            <guid>https://www.imufeng.cn/full-stack/</guid>
            <pubDate>Wed, 11 Oct 2023 10:42:02 GMT</pubDate>
            <content:encoded><![CDATA[<h2 id="一、后端技术分享" tabindex="-1">一、后端技术分享 <a class="header-anchor" href="#一、后端技术分享" aria-label="Permalink to &quot;一、后端技术分享&quot;">&ZeroWidthSpace;</a></h2>
<h2 id="二、前端技术分享" tabindex="-1">二、前端技术分享 <a class="header-anchor" href="#二、前端技术分享" aria-label="Permalink to &quot;二、前端技术分享&quot;">&ZeroWidthSpace;</a></h2>
<h2 id="三、系统运维交流" tabindex="-1">三、系统运维交流 <a class="header-anchor" href="#三、系统运维交流" aria-label="Permalink to &quot;三、系统运维交流&quot;">&ZeroWidthSpace;</a></h2>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[每日一题]]></title>
            <link>https://www.imufeng.cn/question-by-day/</link>
            <guid>https://www.imufeng.cn/question-by-day/</guid>
            <pubDate>Wed, 11 Oct 2023 10:42:02 GMT</pubDate>
            <description><![CDATA[每天至少一道全栈题目分享，范围不限。]]></description>
            <content:encoded><![CDATA[<blockquote>
<p>每日一题从 <code>2023年09月27日</code> 开始记录，不限分类，欢迎留言监督。</p>
</blockquote>
<ul>
<li><a href="./2023/">2023</a></li>
<li><a href="./2024/">2024</a></li>
</ul>
]]></content:encoded>
        </item>
        <item>
            <link>https://www.imufeng.cn/technology/web/</link>
            <guid>https://www.imufeng.cn/technology/web/</guid>
            <pubDate>Wed, 11 Oct 2023 10:42:02 GMT</pubDate>
            <content:encoded><![CDATA[<h2 id="目录" tabindex="-1">目录 <a class="header-anchor" href="#目录" aria-label="Permalink to &quot;目录&quot;">&ZeroWidthSpace;</a></h2>
<ol>
<li><a href="./acme-sh.html">使用 <code>acme.sh</code> 部署泛域名证书</a></li>
<li><a href="./linux-lamp/">LAMP 架构的编译安装</a></li>
<li><a href="./wordpress-by-docker-compose.html">基于DockerCompose的WordPress环境部署（附配置优化）</a></li>
</ol>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[基于DockerCompose的WordPress环境部署（附配置优化）]]></title>
            <link>https://www.imufeng.cn/technology/web/wordpress-by-docker-compose.html</link>
            <guid>https://www.imufeng.cn/technology/web/wordpress-by-docker-compose.html</guid>
            <pubDate>Wed, 11 Oct 2023 10:42:02 GMT</pubDate>
            <description><![CDATA[本文将带你快速了解 docker compose 安装部署 WordPress。]]></description>
            <content:encoded><![CDATA[<h1 id="基于dockercompose的wordpress环境部署-附配置优化" tabindex="-1">基于DockerCompose的WordPress环境部署（附配置优化） <a class="header-anchor" href="#基于dockercompose的wordpress环境部署-附配置优化" aria-label="Permalink to &quot;基于DockerCompose的WordPress环境部署（附配置优化）&quot;">&ZeroWidthSpace;</a></h1>
<blockquote>
<p>观前提醒：通过本文安装<code>WordPress</code>，需要你有一定的Linux基础，并且安装了最新版的<code>Docker</code>。</p>
</blockquote>
<h2 id="一、为什么是dockercompose" tabindex="-1">一、为什么是DockerCompose <a class="header-anchor" href="#一、为什么是dockercompose" aria-label="Permalink to &quot;一、为什么是DockerCompose&quot;">&ZeroWidthSpace;</a></h2>
<p>回答：<strong>因为懒</strong></p>
<p>之前在跟其他人沟通的时候，看到我使用Docker Compose部署 WordPress，都有些嗤之以鼻，觉得没有必要,也不够高大上。但是问他们用什么？其实很多都是第三方托管，或者干脆自己从零搭建环境，而像我这种对Linux环境稍微有点了解，并且做过一些LAMP/LNMP架构定制化编译安装的，也并不认为靠第三方托管的方式有多么便携又高大上，或者编译安装一套LNMP架构有多么优雅。</p>
<h2 id="二、怎么用dockercompose" tabindex="-1">二、怎么用DockerCompose <a class="header-anchor" href="#二、怎么用dockercompose" aria-label="Permalink to &quot;二、怎么用DockerCompose&quot;">&ZeroWidthSpace;</a></h2>
<p>Docker的使用已经成为运维人员的必修课，而使用Docker能够极大地简化环境部署，减少大部分重复性的手动操作。这里先介绍DockerCompose搭建环境的一个基本流程，至于Docker的安装那些，也比较简单，我后边慢慢写。</p>
<blockquote>
<p>顺便说一下，现在Docker已经自带<code>compose</code>了，不需要单独安装 <code>docker-compose</code></p>
</blockquote>
<p>DockerCompose部署环境只需要一个文件，<code>docker-compose.yaml</code> 所有的配置都在这个文件中。DockerCompose常用命令如下：</p>
<table>
<thead>
<tr>
<th>命令</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>docker compose up &lt;-d&gt;</td>
<td>启动yaml文件中定义的所有服务。<br />-d表示后台启动</td>
</tr>
<tr>
<td>docker compose down</td>
<td>停止并删除所有容器</td>
</tr>
<tr>
<td>docker compose ps</td>
<td>查看服务运行状态</td>
</tr>
<tr>
<td>docker compose restart</td>
<td>重新启动所有服务</td>
</tr>
<tr>
<td>docker compose logs</td>
<td>查看所有日志</td>
</tr>
</tbody>
</table>
<blockquote>
<p>上述命令在后边跟上yaml文件中定义的ServiceName，则可以操作单独的服务</p>
</blockquote>
<h2 id="三、开始部署" tabindex="-1">三、开始部署 <a class="header-anchor" href="#三、开始部署" aria-label="Permalink to &quot;三、开始部署&quot;">&ZeroWidthSpace;</a></h2>
<h3 id="_3-1-yaml文件示例" tabindex="-1">3.1 YAML文件示例 <a class="header-anchor" href="#_3-1-yaml文件示例" aria-label="Permalink to &quot;3.1 YAML文件示例&quot;">&ZeroWidthSpace;</a></h3>
<blockquote>
<p>YAML文件需要放在特定的文件夹，最好单独建立文件夹，容器启动时会以当前<code>目录的名称-服务名称-序号</code>命名。</p>
</blockquote>
<div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre v-pre class="shiki github-dark vp-code-dark" ><code><span class="line"><span style="color: #B392F0">mkdir</span><span style="color: #E1E4E8"> </span><span style="color: #9ECBFF">~/wordpress</span></span>
<span class="line"><span style="color: #79B8FF">cd</span><span style="color: #E1E4E8"> </span><span style="color: #9ECBFF">~/wordpress</span></span>
<span class="line"><span style="color: #B392F0">vim</span><span style="color: #E1E4E8"> </span><span style="color: #9ECBFF">docker-compose.yaml</span></span></code></pre><pre v-pre class="shiki github-light vp-code-light" ><code><span class="line"><span style="color: #6F42C1">mkdir</span><span style="color: #24292E"> </span><span style="color: #032F62">~/wordpress</span></span>
<span class="line"><span style="color: #005CC5">cd</span><span style="color: #24292E"> </span><span style="color: #032F62">~/wordpress</span></span>
<span class="line"><span style="color: #6F42C1">vim</span><span style="color: #24292E"> </span><span style="color: #032F62">docker-compose.yaml</span></span></code></pre>
</div><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre v-pre class="shiki github-dark vp-code-dark" ><code><span class="line"><span style="color: #85E89D">version</span><span style="color: #E1E4E8">: </span><span style="color: #9ECBFF">&#39;3.3&#39;</span></span>
<span class="line"><span style="color: #6A737D"># 服务</span></span>
<span class="line"><span style="color: #85E89D">services</span><span style="color: #E1E4E8">:</span></span>
<span class="line"><span style="color: #E1E4E8">  </span><span style="color: #6A737D"># 数据库服务</span></span>
<span class="line"><span style="color: #E1E4E8">  </span><span style="color: #85E89D">db</span><span style="color: #E1E4E8">:</span></span>
<span class="line"><span style="color: #E1E4E8">    </span><span style="color: #85E89D">image</span><span style="color: #E1E4E8">: </span><span style="color: #9ECBFF">mysql:5.7</span></span>
<span class="line"><span style="color: #E1E4E8">    </span><span style="color: #85E89D">volumes</span><span style="color: #E1E4E8">:</span></span>
<span class="line"><span style="color: #E1E4E8">      - </span><span style="color: #9ECBFF">./db_data:/var/lib/mysql</span></span>
<span class="line"><span style="color: #E1E4E8">    </span><span style="color: #85E89D">restart</span><span style="color: #E1E4E8">: </span><span style="color: #9ECBFF">always</span></span>
<span class="line"><span style="color: #E1E4E8">    </span><span style="color: #85E89D">environment</span><span style="color: #E1E4E8">:</span></span>
<span class="line"><span style="color: #E1E4E8">      </span><span style="color: #85E89D">MYSQL_ROOT_PASSWORD</span><span style="color: #E1E4E8">: </span><span style="color: #9ECBFF">wordpress</span></span>
<span class="line"><span style="color: #E1E4E8">      </span><span style="color: #85E89D">MYSQL_DATABASE</span><span style="color: #E1E4E8">: </span><span style="color: #9ECBFF">wordpress</span></span>
<span class="line"><span style="color: #E1E4E8">      </span><span style="color: #85E89D">MYSQL_USER</span><span style="color: #E1E4E8">: </span><span style="color: #9ECBFF">wordpress</span></span>
<span class="line"><span style="color: #E1E4E8">      </span><span style="color: #85E89D">MYSQL_PASSWORD</span><span style="color: #E1E4E8">: </span><span style="color: #9ECBFF">wordpress</span></span>
<span class="line"><span style="color: #E1E4E8">  </span><span style="color: #6A737D"># Redis缓存服务</span></span>
<span class="line"><span style="color: #E1E4E8">  </span><span style="color: #85E89D">cache</span><span style="color: #E1E4E8">:</span></span>
<span class="line"><span style="color: #E1E4E8">    </span><span style="color: #85E89D">image</span><span style="color: #E1E4E8">: </span><span style="color: #9ECBFF">redis:latest</span></span>
<span class="line"><span style="color: #E1E4E8">    </span><span style="color: #85E89D">restart</span><span style="color: #E1E4E8">: </span><span style="color: #9ECBFF">always</span></span>
<span class="line"><span style="color: #E1E4E8">    </span><span style="color: #85E89D">ports</span><span style="color: #E1E4E8">:</span></span>
<span class="line"><span style="color: #E1E4E8">      - </span><span style="color: #79B8FF">6379</span></span>
<span class="line"><span style="color: #E1E4E8">  </span><span style="color: #6A737D"># WordPress服务</span></span>
<span class="line"><span style="color: #E1E4E8">  </span><span style="color: #85E89D">wordpress</span><span style="color: #E1E4E8">:</span></span>
<span class="line"><span style="color: #E1E4E8">    </span><span style="color: #85E89D">depends_on</span><span style="color: #E1E4E8">:</span></span>
<span class="line"><span style="color: #E1E4E8">      - </span><span style="color: #9ECBFF">db</span></span>
<span class="line"><span style="color: #E1E4E8">      - </span><span style="color: #9ECBFF">cache</span></span>
<span class="line"><span style="color: #E1E4E8">    </span><span style="color: #85E89D">image</span><span style="color: #E1E4E8">: </span><span style="color: #9ECBFF">wordpress:php8.2</span></span>
<span class="line"><span style="color: #E1E4E8">    </span><span style="color: #85E89D">ports</span><span style="color: #E1E4E8">:</span></span>
<span class="line"><span style="color: #E1E4E8">      - </span><span style="color: #9ECBFF">&quot;8080:80&quot;</span></span>
<span class="line"><span style="color: #E1E4E8">    </span><span style="color: #85E89D">restart</span><span style="color: #E1E4E8">: </span><span style="color: #9ECBFF">always</span></span>
<span class="line"><span style="color: #E1E4E8">    </span><span style="color: #85E89D">environment</span><span style="color: #E1E4E8">:</span></span>
<span class="line"><span style="color: #E1E4E8">      </span><span style="color: #85E89D">WORDPRESS_DB_HOST</span><span style="color: #E1E4E8">: </span><span style="color: #9ECBFF">db:3306</span></span>
<span class="line"><span style="color: #E1E4E8">      </span><span style="color: #85E89D">WORDPRESS_DB_USER</span><span style="color: #E1E4E8">: </span><span style="color: #9ECBFF">wordpress</span></span>
<span class="line"><span style="color: #E1E4E8">      </span><span style="color: #85E89D">WORDPRESS_DB_PASSWORD</span><span style="color: #E1E4E8">: </span><span style="color: #9ECBFF">wordpress</span></span>
<span class="line"><span style="color: #E1E4E8">      </span><span style="color: #85E89D">WORDPRESS_DB_NAME</span><span style="color: #E1E4E8">: </span><span style="color: #9ECBFF">wordpress</span></span>
<span class="line"><span style="color: #E1E4E8">    </span><span style="color: #85E89D">volumes</span><span style="color: #E1E4E8">:</span></span>
<span class="line"><span style="color: #E1E4E8">        - </span><span style="color: #9ECBFF">./wp_data:/var/www/html</span></span>
<span class="line"><span style="color: #E1E4E8">        - </span><span style="color: #9ECBFF">./php_config/php.ini-production:/usr/local/etc/php/php.ini-production</span></span>
<span class="line"><span style="color: #6A737D"># 网络划分</span></span>
<span class="line"><span style="color: #85E89D">networks</span><span style="color: #E1E4E8">:</span></span>
<span class="line"><span style="color: #E1E4E8">    </span><span style="color: #85E89D">wordpress</span><span style="color: #E1E4E8">:</span></span>
<span class="line"><span style="color: #E1E4E8">        </span><span style="color: #85E89D">driver</span><span style="color: #E1E4E8">: </span><span style="color: #9ECBFF">bridge</span></span>
<span class="line"><span style="color: #E1E4E8">        </span><span style="color: #85E89D">external</span><span style="color: #E1E4E8">: </span><span style="color: #79B8FF">true</span></span>
<span class="line"><span style="color: #E1E4E8">        </span><span style="color: #85E89D">ipam</span><span style="color: #E1E4E8">:</span></span>
<span class="line"><span style="color: #E1E4E8">            </span><span style="color: #85E89D">config</span><span style="color: #E1E4E8">:</span></span>
<span class="line"><span style="color: #E1E4E8">                - </span><span style="color: #85E89D">subnet</span><span style="color: #E1E4E8">: </span><span style="color: #9ECBFF">10.10.1.0/24</span></span>
<span class="line"><span style="color: #E1E4E8">                - </span><span style="color: #85E89D">gateway</span><span style="color: #E1E4E8">: </span><span style="color: #79B8FF">10.10.1.10</span></span></code></pre><pre v-pre class="shiki github-light vp-code-light" ><code><span class="line"><span style="color: #22863A">version</span><span style="color: #24292E">: </span><span style="color: #032F62">&#39;3.3&#39;</span></span>
<span class="line"><span style="color: #6A737D"># 服务</span></span>
<span class="line"><span style="color: #22863A">services</span><span style="color: #24292E">:</span></span>
<span class="line"><span style="color: #24292E">  </span><span style="color: #6A737D"># 数据库服务</span></span>
<span class="line"><span style="color: #24292E">  </span><span style="color: #22863A">db</span><span style="color: #24292E">:</span></span>
<span class="line"><span style="color: #24292E">    </span><span style="color: #22863A">image</span><span style="color: #24292E">: </span><span style="color: #032F62">mysql:5.7</span></span>
<span class="line"><span style="color: #24292E">    </span><span style="color: #22863A">volumes</span><span style="color: #24292E">:</span></span>
<span class="line"><span style="color: #24292E">      - </span><span style="color: #032F62">./db_data:/var/lib/mysql</span></span>
<span class="line"><span style="color: #24292E">    </span><span style="color: #22863A">restart</span><span style="color: #24292E">: </span><span style="color: #032F62">always</span></span>
<span class="line"><span style="color: #24292E">    </span><span style="color: #22863A">environment</span><span style="color: #24292E">:</span></span>
<span class="line"><span style="color: #24292E">      </span><span style="color: #22863A">MYSQL_ROOT_PASSWORD</span><span style="color: #24292E">: </span><span style="color: #032F62">wordpress</span></span>
<span class="line"><span style="color: #24292E">      </span><span style="color: #22863A">MYSQL_DATABASE</span><span style="color: #24292E">: </span><span style="color: #032F62">wordpress</span></span>
<span class="line"><span style="color: #24292E">      </span><span style="color: #22863A">MYSQL_USER</span><span style="color: #24292E">: </span><span style="color: #032F62">wordpress</span></span>
<span class="line"><span style="color: #24292E">      </span><span style="color: #22863A">MYSQL_PASSWORD</span><span style="color: #24292E">: </span><span style="color: #032F62">wordpress</span></span>
<span class="line"><span style="color: #24292E">  </span><span style="color: #6A737D"># Redis缓存服务</span></span>
<span class="line"><span style="color: #24292E">  </span><span style="color: #22863A">cache</span><span style="color: #24292E">:</span></span>
<span class="line"><span style="color: #24292E">    </span><span style="color: #22863A">image</span><span style="color: #24292E">: </span><span style="color: #032F62">redis:latest</span></span>
<span class="line"><span style="color: #24292E">    </span><span style="color: #22863A">restart</span><span style="color: #24292E">: </span><span style="color: #032F62">always</span></span>
<span class="line"><span style="color: #24292E">    </span><span style="color: #22863A">ports</span><span style="color: #24292E">:</span></span>
<span class="line"><span style="color: #24292E">      - </span><span style="color: #005CC5">6379</span></span>
<span class="line"><span style="color: #24292E">  </span><span style="color: #6A737D"># WordPress服务</span></span>
<span class="line"><span style="color: #24292E">  </span><span style="color: #22863A">wordpress</span><span style="color: #24292E">:</span></span>
<span class="line"><span style="color: #24292E">    </span><span style="color: #22863A">depends_on</span><span style="color: #24292E">:</span></span>
<span class="line"><span style="color: #24292E">      - </span><span style="color: #032F62">db</span></span>
<span class="line"><span style="color: #24292E">      - </span><span style="color: #032F62">cache</span></span>
<span class="line"><span style="color: #24292E">    </span><span style="color: #22863A">image</span><span style="color: #24292E">: </span><span style="color: #032F62">wordpress:php8.2</span></span>
<span class="line"><span style="color: #24292E">    </span><span style="color: #22863A">ports</span><span style="color: #24292E">:</span></span>
<span class="line"><span style="color: #24292E">      - </span><span style="color: #032F62">&quot;8080:80&quot;</span></span>
<span class="line"><span style="color: #24292E">    </span><span style="color: #22863A">restart</span><span style="color: #24292E">: </span><span style="color: #032F62">always</span></span>
<span class="line"><span style="color: #24292E">    </span><span style="color: #22863A">environment</span><span style="color: #24292E">:</span></span>
<span class="line"><span style="color: #24292E">      </span><span style="color: #22863A">WORDPRESS_DB_HOST</span><span style="color: #24292E">: </span><span style="color: #032F62">db:3306</span></span>
<span class="line"><span style="color: #24292E">      </span><span style="color: #22863A">WORDPRESS_DB_USER</span><span style="color: #24292E">: </span><span style="color: #032F62">wordpress</span></span>
<span class="line"><span style="color: #24292E">      </span><span style="color: #22863A">WORDPRESS_DB_PASSWORD</span><span style="color: #24292E">: </span><span style="color: #032F62">wordpress</span></span>
<span class="line"><span style="color: #24292E">      </span><span style="color: #22863A">WORDPRESS_DB_NAME</span><span style="color: #24292E">: </span><span style="color: #032F62">wordpress</span></span>
<span class="line"><span style="color: #24292E">    </span><span style="color: #22863A">volumes</span><span style="color: #24292E">:</span></span>
<span class="line"><span style="color: #24292E">        - </span><span style="color: #032F62">./wp_data:/var/www/html</span></span>
<span class="line"><span style="color: #24292E">        - </span><span style="color: #032F62">./php_config/php.ini-production:/usr/local/etc/php/php.ini-production</span></span>
<span class="line"><span style="color: #6A737D"># 网络划分</span></span>
<span class="line"><span style="color: #22863A">networks</span><span style="color: #24292E">:</span></span>
<span class="line"><span style="color: #24292E">    </span><span style="color: #22863A">wordpress</span><span style="color: #24292E">:</span></span>
<span class="line"><span style="color: #24292E">        </span><span style="color: #22863A">driver</span><span style="color: #24292E">: </span><span style="color: #032F62">bridge</span></span>
<span class="line"><span style="color: #24292E">        </span><span style="color: #22863A">external</span><span style="color: #24292E">: </span><span style="color: #005CC5">true</span></span>
<span class="line"><span style="color: #24292E">        </span><span style="color: #22863A">ipam</span><span style="color: #24292E">:</span></span>
<span class="line"><span style="color: #24292E">            </span><span style="color: #22863A">config</span><span style="color: #24292E">:</span></span>
<span class="line"><span style="color: #24292E">                - </span><span style="color: #22863A">subnet</span><span style="color: #24292E">: </span><span style="color: #032F62">10.10.1.0/24</span></span>
<span class="line"><span style="color: #24292E">                - </span><span style="color: #22863A">gateway</span><span style="color: #24292E">: </span><span style="color: #005CC5">10.10.1.10</span></span></code></pre>
</div><p>在上面的示例中，规定了当前 <code>docker-compose.yaml</code>遵循3.3版本规范，共涉及三个服务：数据库、缓存以及WordPress。并使用了三个卷，将数据库文件、WordPress服务文件以及PHP配置文件挂载到本地。</p>
<p>在该文件编写完成后，可以在当前目录使用 <code>docker compose up</code> 命令安装，首次安装需要下载镜像，会比较慢，之后再安装则不需要。</p>
<p>安装完之后，你就可以在使用<code>ip:8080</code>的方式访问你的 WordPress 站点了。如果你需要配置域名访问，在Nginx中添加如下配置后再去安装你的 WordPress 。</p>
<blockquote>
<p>你需要将 <code>blog-wp.imufeng.cn</code> 替换为你自己的域名。至于泛域名证书的配置参见我的其他博客。</p>
</blockquote>
<div class="language-nginx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">nginx</span><pre v-pre class="shiki github-dark vp-code-dark" ><code><span class="line"><span style="color: #F97583">server</span><span style="color: #E1E4E8"> {</span></span>
<span class="line"><span style="color: #E1E4E8">   </span><span style="color: #F97583"> listen </span><span style="color: #E1E4E8">             </span><span style="color: #79B8FF">443</span><span style="color: #E1E4E8"> ssl http2;</span></span>
<span class="line"><span style="color: #E1E4E8">   </span><span style="color: #F97583"> listen </span><span style="color: #E1E4E8">             [::]:443 ssl http2;</span></span>
<span class="line"><span style="color: #E1E4E8">   </span><span style="color: #F97583"> server_name </span><span style="color: #E1E4E8">        blog-wp.imufeng.cn;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #E1E4E8">    </span><span style="color: #6A737D"># SSL</span></span>
<span class="line"><span style="color: #E1E4E8">   </span><span style="color: #F97583"> ssl_certificate </span><span style="color: #E1E4E8">    /etc/nginx/ssl/imufeng.cn.cer;</span></span>
<span class="line"><span style="color: #E1E4E8">   </span><span style="color: #F97583"> ssl_certificate_key </span><span style="color: #E1E4E8">/etc/nginx/ssl/imufeng.cn.key;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #E1E4E8">    </span><span style="color: #6A737D"># security</span></span>
<span class="line"><span style="color: #E1E4E8">   </span><span style="color: #F97583"> include </span><span style="color: #E1E4E8">            nginxconfig.io/security.conf;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #E1E4E8">    </span><span style="color: #6A737D"># logging</span></span>
<span class="line"><span style="color: #E1E4E8">   </span><span style="color: #F97583"> access_log </span><span style="color: #E1E4E8">         /var/log/nginx/blog-wp.imufeng.cn.log combined buffer=512k flush=5m;</span></span>
<span class="line"><span style="color: #E1E4E8">   </span><span style="color: #F97583"> error_log </span><span style="color: #E1E4E8">          /var/log/nginx/blog-wp.imufeng.error.log</span><span style="color: #79B8FF"> error</span><span style="color: #E1E4E8">;</span></span>
<span class="line"><span style="color: #E1E4E8">    </span><span style="color: #F97583">location</span><span style="color: #E1E4E8"> </span><span style="color: #B392F0">/ </span><span style="color: #E1E4E8">{</span></span>
<span class="line"><span style="color: #E1E4E8">       </span><span style="color: #F97583"> proxy_pass </span><span style="color: #E1E4E8">http://127.0.0.1:8080/;</span></span>
<span class="line"><span style="color: #E1E4E8">       </span><span style="color: #F97583"> proxy_set_header </span><span style="color: #E1E4E8">Host $host;</span></span>
<span class="line"><span style="color: #E1E4E8">       </span><span style="color: #F97583"> proxy_set_header </span><span style="color: #E1E4E8">X-Real-IP $remote_addr;</span></span>
<span class="line"><span style="color: #E1E4E8">       </span><span style="color: #F97583"> proxy_set_header </span><span style="color: #E1E4E8">X-Forwarded-For $proxy_add_x_forwarded_for;</span></span>
<span class="line"><span style="color: #E1E4E8">       </span><span style="color: #F97583"> proxy_set_header </span><span style="color: #E1E4E8">X-Forwarded-Proto $scheme;</span></span>
<span class="line"><span style="color: #E1E4E8">       </span><span style="color: #F97583"> add_header </span><span style="color: #E1E4E8">Content-Security-Policy </span><span style="color: #9ECBFF">&quot;default-src &#39;self&#39; &#39;unsafe-inline&#39; &#39;unsafe-eval&#39; https: ws: wss: data: blob:&quot;</span><span style="color: #E1E4E8">;</span></span>
<span class="line"><span style="color: #E1E4E8">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color: #E1E4E8">}</span></span></code></pre><pre v-pre class="shiki github-light vp-code-light" ><code><span class="line"><span style="color: #D73A49">server</span><span style="color: #24292E"> {</span></span>
<span class="line"><span style="color: #24292E">   </span><span style="color: #D73A49"> listen </span><span style="color: #24292E">             </span><span style="color: #005CC5">443</span><span style="color: #24292E"> ssl http2;</span></span>
<span class="line"><span style="color: #24292E">   </span><span style="color: #D73A49"> listen </span><span style="color: #24292E">             [::]:443 ssl http2;</span></span>
<span class="line"><span style="color: #24292E">   </span><span style="color: #D73A49"> server_name </span><span style="color: #24292E">        blog-wp.imufeng.cn;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #24292E">    </span><span style="color: #6A737D"># SSL</span></span>
<span class="line"><span style="color: #24292E">   </span><span style="color: #D73A49"> ssl_certificate </span><span style="color: #24292E">    /etc/nginx/ssl/imufeng.cn.cer;</span></span>
<span class="line"><span style="color: #24292E">   </span><span style="color: #D73A49"> ssl_certificate_key </span><span style="color: #24292E">/etc/nginx/ssl/imufeng.cn.key;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #24292E">    </span><span style="color: #6A737D"># security</span></span>
<span class="line"><span style="color: #24292E">   </span><span style="color: #D73A49"> include </span><span style="color: #24292E">            nginxconfig.io/security.conf;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #24292E">    </span><span style="color: #6A737D"># logging</span></span>
<span class="line"><span style="color: #24292E">   </span><span style="color: #D73A49"> access_log </span><span style="color: #24292E">         /var/log/nginx/blog-wp.imufeng.cn.log combined buffer=512k flush=5m;</span></span>
<span class="line"><span style="color: #24292E">   </span><span style="color: #D73A49"> error_log </span><span style="color: #24292E">          /var/log/nginx/blog-wp.imufeng.error.log</span><span style="color: #005CC5"> error</span><span style="color: #24292E">;</span></span>
<span class="line"><span style="color: #24292E">    </span><span style="color: #D73A49">location</span><span style="color: #24292E"> </span><span style="color: #6F42C1">/ </span><span style="color: #24292E">{</span></span>
<span class="line"><span style="color: #24292E">       </span><span style="color: #D73A49"> proxy_pass </span><span style="color: #24292E">http://127.0.0.1:8080/;</span></span>
<span class="line"><span style="color: #24292E">       </span><span style="color: #D73A49"> proxy_set_header </span><span style="color: #24292E">Host $host;</span></span>
<span class="line"><span style="color: #24292E">       </span><span style="color: #D73A49"> proxy_set_header </span><span style="color: #24292E">X-Real-IP $remote_addr;</span></span>
<span class="line"><span style="color: #24292E">       </span><span style="color: #D73A49"> proxy_set_header </span><span style="color: #24292E">X-Forwarded-For $proxy_add_x_forwarded_for;</span></span>
<span class="line"><span style="color: #24292E">       </span><span style="color: #D73A49"> proxy_set_header </span><span style="color: #24292E">X-Forwarded-Proto $scheme;</span></span>
<span class="line"><span style="color: #24292E">       </span><span style="color: #D73A49"> add_header </span><span style="color: #24292E">Content-Security-Policy </span><span style="color: #032F62">&quot;default-src &#39;self&#39; &#39;unsafe-inline&#39; &#39;unsafe-eval&#39; https: ws: wss: data: blob:&quot;</span><span style="color: #24292E">;</span></span>
<span class="line"><span style="color: #24292E">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color: #24292E">}</span></span></code></pre>
</div><p>至此，一个简单的WordPress就搭建完成了。</p>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[第一步编译安装httpd服务器]]></title>
            <link>https://www.imufeng.cn/technology/web/linux-lamp/first.html</link>
            <guid>https://www.imufeng.cn/technology/web/linux-lamp/first.html</guid>
            <pubDate>Wed, 11 Oct 2023 10:42:02 GMT</pubDate>
            <content:encoded><![CDATA[<h1 id="第一步-编译安装httpd服务器" tabindex="-1">第一步 编译安装httpd服务器 <a class="header-anchor" href="#第一步-编译安装httpd服务器" aria-label="Permalink to &quot;第一步 编译安装httpd服务器&quot;">&ZeroWidthSpace;</a></h1>
<h2 id="_1、安装前准备" tabindex="-1">1、安装前准备 <a class="header-anchor" href="#_1、安装前准备" aria-label="Permalink to &quot;1、安装前准备&quot;">&ZeroWidthSpace;</a></h2>
<p>解压apr apr-util pcre httpd expat包</p>
<div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre v-pre class="shiki github-dark vp-code-dark" ><code><span class="line"><span style="color: #e1e4e8">[root@localhost app]# tar -xvf apr-1.6.5.tar.xz -C /app/</span></span>
<span class="line"><span style="color: #e1e4e8">[root@localhost app]# tar -xvf apr-util-1.6.1.tar.xz -C /app/</span></span>
<span class="line"><span style="color: #e1e4e8">[root@localhost app]# tar -xvf pcre-8.42.tar.xz -C /app/</span></span>
<span class="line"><span style="color: #e1e4e8">[root@localhost app]# tar -xvf httpd-2.4.46.tar.xz -C /app/</span></span>
<span class="line"><span style="color: #e1e4e8"></span></span>
<span class="line"><span style="color: #e1e4e8">[root@localhost app]# ls</span></span>
<span class="line"><span style="color: #e1e4e8">apr-1.6.5  apr-util-1.6.1  httpd-2.4.46  packages  pcre-8.42</span></span></code></pre><pre v-pre class="shiki github-light vp-code-light" ><code><span class="line"><span style="color: #24292e">[root@localhost app]# tar -xvf apr-1.6.5.tar.xz -C /app/</span></span>
<span class="line"><span style="color: #24292e">[root@localhost app]# tar -xvf apr-util-1.6.1.tar.xz -C /app/</span></span>
<span class="line"><span style="color: #24292e">[root@localhost app]# tar -xvf pcre-8.42.tar.xz -C /app/</span></span>
<span class="line"><span style="color: #24292e">[root@localhost app]# tar -xvf httpd-2.4.46.tar.xz -C /app/</span></span>
<span class="line"><span style="color: #24292e"></span></span>
<span class="line"><span style="color: #24292e">[root@localhost app]# ls</span></span>
<span class="line"><span style="color: #24292e">apr-1.6.5  apr-util-1.6.1  httpd-2.4.46  packages  pcre-8.42</span></span></code></pre>
</div><p>安装软件支持</p>
<div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre v-pre class="shiki github-dark vp-code-dark" ><code><span class="line"><span style="color: #e1e4e8">[root@localhost apr-1.6.5]# dnf -y install gcc gcc-c++ make cmake gdb libstdc++*</span></span></code></pre><pre v-pre class="shiki github-light vp-code-light" ><code><span class="line"><span style="color: #24292e">[root@localhost apr-1.6.5]# dnf -y install gcc gcc-c++ make cmake gdb libstdc++*</span></span></code></pre>
</div><h2 id="_2、编译安装apr" tabindex="-1">2、编译安装apr <a class="header-anchor" href="#_2、编译安装apr" aria-label="Permalink to &quot;2、编译安装apr&quot;">&ZeroWidthSpace;</a></h2>
<div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre v-pre class="shiki github-dark vp-code-dark" ><code><span class="line"><span style="color: #e1e4e8">[root@localhost apr-1.6.5]# pwd</span></span>
<span class="line"><span style="color: #e1e4e8">/app/apr-1.6.5</span></span>
<span class="line"><span style="color: #e1e4e8"></span></span>
<span class="line"><span style="color: #e1e4e8">[root@localhost apr-1.6.5]# ./configure --prefix=/usr/local/apr</span></span>
<span class="line"><span style="color: #e1e4e8"></span></span>
<span class="line"><span style="color: #e1e4e8">[root@localhost apr-1.6.5]# make &amp;&amp; make install</span></span></code></pre><pre v-pre class="shiki github-light vp-code-light" ><code><span class="line"><span style="color: #24292e">[root@localhost apr-1.6.5]# pwd</span></span>
<span class="line"><span style="color: #24292e">/app/apr-1.6.5</span></span>
<span class="line"><span style="color: #24292e"></span></span>
<span class="line"><span style="color: #24292e">[root@localhost apr-1.6.5]# ./configure --prefix=/usr/local/apr</span></span>
<span class="line"><span style="color: #24292e"></span></span>
<span class="line"><span style="color: #24292e">[root@localhost apr-1.6.5]# make &amp;&amp; make install</span></span></code></pre>
</div><p>这里运行编译文件时可能会报错</p>
<div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre v-pre class="shiki github-dark vp-code-dark" ><code><span class="line"><span style="color: #e1e4e8">rm: cannot remove &#39;libtoolT&#39;: No such file or directory</span></span></code></pre><pre v-pre class="shiki github-light vp-code-light" ><code><span class="line"><span style="color: #24292e">rm: cannot remove &#39;libtoolT&#39;: No such file or directory</span></span></code></pre>
</div><p>解决：</p>
<div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre v-pre class="shiki github-dark vp-code-dark" ><code><span class="line"><span style="color: #e1e4e8">[root@localhost apr-1.6.5]# vim configure</span></span>
<span class="line"><span style="color: #e1e4e8">#把RM=&#39;$RM&#39;改为RM=&#39;$RM  -f&#39;</span></span></code></pre><pre v-pre class="shiki github-light vp-code-light" ><code><span class="line"><span style="color: #24292e">[root@localhost apr-1.6.5]# vim configure</span></span>
<span class="line"><span style="color: #24292e">#把RM=&#39;$RM&#39;改为RM=&#39;$RM  -f&#39;</span></span></code></pre>
</div><h2 id="_3、编译安装expat" tabindex="-1">3、编译安装expat <a class="header-anchor" href="#_3、编译安装expat" aria-label="Permalink to &quot;3、编译安装expat&quot;">&ZeroWidthSpace;</a></h2>
<div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre v-pre class="shiki github-dark vp-code-dark" ><code><span class="line"><span style="color: #e1e4e8">[root@localhost expat-2.2.3]# pwd</span></span>
<span class="line"><span style="color: #e1e4e8">/app/expat-2.2.3</span></span>
<span class="line"><span style="color: #e1e4e8">[root@localhost expat-2.2.3]# ./configure --prefix=/usr/local/expat</span></span>
<span class="line"><span style="color: #e1e4e8">make &amp;&amp; make install</span></span></code></pre><pre v-pre class="shiki github-light vp-code-light" ><code><span class="line"><span style="color: #24292e">[root@localhost expat-2.2.3]# pwd</span></span>
<span class="line"><span style="color: #24292e">/app/expat-2.2.3</span></span>
<span class="line"><span style="color: #24292e">[root@localhost expat-2.2.3]# ./configure --prefix=/usr/local/expat</span></span>
<span class="line"><span style="color: #24292e">make &amp;&amp; make install</span></span></code></pre>
</div><h2 id="_4、编译安装apr-util" tabindex="-1">4、编译安装apr-util <a class="header-anchor" href="#_4、编译安装apr-util" aria-label="Permalink to &quot;4、编译安装apr-util&quot;">&ZeroWidthSpace;</a></h2>
<div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre v-pre class="shiki github-dark vp-code-dark" ><code><span class="line"><span style="color: #e1e4e8">[root@localhost apr-util-1.6.1]# pwd</span></span>
<span class="line"><span style="color: #e1e4e8">/app/apr-util-1.6.1</span></span>
<span class="line"><span style="color: #e1e4e8">[root@localhost apr-util-1.6.1]# ./configure --prefix=/usr/local/apr-util --with-apr=/usr/local/apr --with-expat=/usr/local/expat</span></span>
<span class="line"><span style="color: #e1e4e8">make &amp;&amp; make install</span></span></code></pre><pre v-pre class="shiki github-light vp-code-light" ><code><span class="line"><span style="color: #24292e">[root@localhost apr-util-1.6.1]# pwd</span></span>
<span class="line"><span style="color: #24292e">/app/apr-util-1.6.1</span></span>
<span class="line"><span style="color: #24292e">[root@localhost apr-util-1.6.1]# ./configure --prefix=/usr/local/apr-util --with-apr=/usr/local/apr --with-expat=/usr/local/expat</span></span>
<span class="line"><span style="color: #24292e">make &amp;&amp; make install</span></span></code></pre>
</div><h2 id="_5、编译安装pcre" tabindex="-1">5、编译安装pcre <a class="header-anchor" href="#_5、编译安装pcre" aria-label="Permalink to &quot;5、编译安装pcre&quot;">&ZeroWidthSpace;</a></h2>
<div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre v-pre class="shiki github-dark vp-code-dark" ><code><span class="line"><span style="color: #e1e4e8">[root@localhost pcre-8.42]# pwd</span></span>
<span class="line"><span style="color: #e1e4e8">/app/pcre-8.42</span></span>
<span class="line"><span style="color: #e1e4e8">[root@localhost pcre-8.42]# ./configure --prefix=/usr/local/pcre</span></span>
<span class="line"><span style="color: #e1e4e8">[root@localhost pcre-8.42]# make &amp;&amp; make install</span></span></code></pre><pre v-pre class="shiki github-light vp-code-light" ><code><span class="line"><span style="color: #24292e">[root@localhost pcre-8.42]# pwd</span></span>
<span class="line"><span style="color: #24292e">/app/pcre-8.42</span></span>
<span class="line"><span style="color: #24292e">[root@localhost pcre-8.42]# ./configure --prefix=/usr/local/pcre</span></span>
<span class="line"><span style="color: #24292e">[root@localhost pcre-8.42]# make &amp;&amp; make install</span></span></code></pre>
</div><h2 id="_6、编译安装httpd" tabindex="-1">6、编译安装httpd <a class="header-anchor" href="#_6、编译安装httpd" aria-label="Permalink to &quot;6、编译安装httpd&quot;">&ZeroWidthSpace;</a></h2>
<div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre v-pre class="shiki github-dark vp-code-dark" ><code><span class="line"><span style="color: #e1e4e8">[root@localhost httpd-2.4.46]# pwd</span></span>
<span class="line"><span style="color: #e1e4e8">/app/httpd-2.4.46</span></span>
<span class="line"><span style="color: #e1e4e8">[root@localhost httpd-2.4.46]# ./configure --prefix=/usr/local/apache --with-apr=/usr/local/apr --with-apr-util=/usr/local/apr-util --with-pcre=/usr/local/pcre  --enable-so   --enable-rewrite --enable-ssl  --with-ssl=/usr/lib  --enable-auth-digest --enable-cgi --enable-suexec  --with-suexec-caller=daemon --with-suexec-docroot=/usr/local/apache/htdocs</span></span>
<span class="line"><span style="color: #e1e4e8">#这里的编译选项应当是需要什么加什么，具体选项见说明文档</span></span></code></pre><pre v-pre class="shiki github-light vp-code-light" ><code><span class="line"><span style="color: #24292e">[root@localhost httpd-2.4.46]# pwd</span></span>
<span class="line"><span style="color: #24292e">/app/httpd-2.4.46</span></span>
<span class="line"><span style="color: #24292e">[root@localhost httpd-2.4.46]# ./configure --prefix=/usr/local/apache --with-apr=/usr/local/apr --with-apr-util=/usr/local/apr-util --with-pcre=/usr/local/pcre  --enable-so   --enable-rewrite --enable-ssl  --with-ssl=/usr/lib  --enable-auth-digest --enable-cgi --enable-suexec  --with-suexec-caller=daemon --with-suexec-docroot=/usr/local/apache/htdocs</span></span>
<span class="line"><span style="color: #24292e">#这里的编译选项应当是需要什么加什么，具体选项见说明文档</span></span></code></pre>
</div><blockquote>
<p>httpd服务的目录结构</p>
<p>服务目录：/usr/local/apache/</p>
<p>主配置文件：/usr/local/apache/conf/httpd.conf</p>
<p>网页目录：/usr/local/apache/htdocs/</p>
<p>服务脚本：/usr/local/apache/bin/apachectl</p>
<p>执行程序：/usr/local/apache/bin/httpd</p>
<p>访问日志： /usr/local/apache/log/access_log</p>
<p>错误日志： /usr/local/apache/log/error_log</p>
</blockquote>
<h2 id="_7、selinux配置" tabindex="-1">7、selinux配置 <a class="header-anchor" href="#_7、selinux配置" aria-label="Permalink to &quot;7、selinux配置&quot;">&ZeroWidthSpace;</a></h2>
<div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre v-pre class="shiki github-dark vp-code-dark" ><code><span class="line"><span style="color: #e1e4e8">[root@localhost httpd-2.4.46]# getsebool -a | grep httpd</span></span>
<span class="line"><span style="color: #e1e4e8">httpd_anon_write --&gt; off</span></span>
<span class="line"><span style="color: #e1e4e8">httpd_builtin_scripting --&gt; on</span></span>
<span class="line"><span style="color: #e1e4e8">httpd_can_check_spam --&gt; off</span></span>
<span class="line"><span style="color: #e1e4e8">httpd_can_connect_ftp --&gt; off</span></span>
<span class="line"><span style="color: #e1e4e8">httpd_can_connect_ldap --&gt; off</span></span>
<span class="line"><span style="color: #e1e4e8">httpd_can_connect_mythtv --&gt; off</span></span>
<span class="line"><span style="color: #e1e4e8">httpd_can_connect_zabbix --&gt; off</span></span>
<span class="line"><span style="color: #e1e4e8">httpd_can_network_connect --&gt; off</span></span>
<span class="line"><span style="color: #e1e4e8">httpd_can_network_connect_cobbler --&gt; off</span></span>
<span class="line"><span style="color: #e1e4e8">httpd_can_network_connect_db --&gt; off</span></span>
<span class="line"><span style="color: #e1e4e8">httpd_can_network_memcache --&gt; off</span></span>
<span class="line"><span style="color: #e1e4e8">httpd_can_network_relay --&gt; off</span></span>
<span class="line"><span style="color: #e1e4e8">httpd_can_sendmail --&gt; off</span></span>
<span class="line"><span style="color: #e1e4e8">httpd_dbus_avahi --&gt; off</span></span>
<span class="line"><span style="color: #e1e4e8">httpd_dbus_sssd --&gt; off</span></span>
<span class="line"><span style="color: #e1e4e8">httpd_dontaudit_search_dirs --&gt; off</span></span>
<span class="line"><span style="color: #e1e4e8">httpd_enable_cgi --&gt; on</span></span>
<span class="line"><span style="color: #e1e4e8">httpd_enable_ftp_server --&gt; off</span></span>
<span class="line"><span style="color: #e1e4e8">httpd_enable_homedirs --&gt; off</span></span>
<span class="line"><span style="color: #e1e4e8">httpd_execmem --&gt; off</span></span>
<span class="line"><span style="color: #e1e4e8">httpd_graceful_shutdown --&gt; off</span></span>
<span class="line"><span style="color: #e1e4e8">httpd_manage_ipa --&gt; off</span></span>
<span class="line"><span style="color: #e1e4e8">httpd_mod_auth_ntlm_winbind --&gt; off</span></span>
<span class="line"><span style="color: #e1e4e8">httpd_mod_auth_pam --&gt; off</span></span>
<span class="line"><span style="color: #e1e4e8">httpd_read_user_content --&gt; off</span></span>
<span class="line"><span style="color: #e1e4e8">httpd_run_ipa --&gt; off</span></span>
<span class="line"><span style="color: #e1e4e8">httpd_run_preupgrade --&gt; off</span></span>
<span class="line"><span style="color: #e1e4e8">httpd_run_stickshift --&gt; off</span></span>
<span class="line"><span style="color: #e1e4e8">httpd_serve_cobbler_files --&gt; off</span></span>
<span class="line"><span style="color: #e1e4e8">httpd_setrlimit --&gt; off</span></span>
<span class="line"><span style="color: #e1e4e8">httpd_ssi_exec --&gt; off</span></span>
<span class="line"><span style="color: #e1e4e8">httpd_sys_script_anon_write --&gt; off</span></span>
<span class="line"><span style="color: #e1e4e8">httpd_tmp_exec --&gt; off</span></span>
<span class="line"><span style="color: #e1e4e8">httpd_tty_comm --&gt; off</span></span>
<span class="line"><span style="color: #e1e4e8">httpd_unified --&gt; off</span></span>
<span class="line"><span style="color: #e1e4e8">httpd_use_cifs --&gt; off</span></span>
<span class="line"><span style="color: #e1e4e8">httpd_use_fusefs --&gt; off</span></span>
<span class="line"><span style="color: #e1e4e8">httpd_use_gpg --&gt; off</span></span>
<span class="line"><span style="color: #e1e4e8">httpd_use_nfs --&gt; off</span></span>
<span class="line"><span style="color: #e1e4e8">httpd_use_opencryptoki --&gt; off</span></span>
<span class="line"><span style="color: #e1e4e8">httpd_use_openstack --&gt; off</span></span>
<span class="line"><span style="color: #e1e4e8">httpd_use_sasl --&gt; off</span></span>
<span class="line"><span style="color: #e1e4e8">httpd_verify_dns --&gt; off</span></span>
<span class="line"><span style="color: #e1e4e8"></span></span>
<span class="line"><span style="color: #e1e4e8">[root@localhost httpd-2.4.46]# setsebool -P httpd_anon_write on</span></span>
<span class="line"><span style="color: #e1e4e8">[root@localhost httpd-2.4.46]# setsebool -P httpd_can_check_spam on</span></span>
<span class="line"><span style="color: #e1e4e8">[root@localhost httpd-2.4.46]# setsebool -P httpd_can_network_connect on</span></span>
<span class="line"><span style="color: #e1e4e8">[root@localhost httpd-2.4.46]# setsebool -P httpd_can_network_connect_db on</span></span>
<span class="line"><span style="color: #e1e4e8">[root@localhost httpd-2.4.46]# setsebool -P httpd_can_network_relay on</span></span>
<span class="line"><span style="color: #e1e4e8">[root@localhost httpd-2.4.46]# setsebool -P httpd_tmp_exec on</span></span>
<span class="line"><span style="color: #e1e4e8">[root@localhost httpd-2.4.46]# setsebool -P httpd_ssi_exec  on</span></span>
<span class="line"><span style="color: #e1e4e8">[root@localhost httpd-2.4.46]# setsebool -P httpd_enable_cgi  on</span></span></code></pre><pre v-pre class="shiki github-light vp-code-light" ><code><span class="line"><span style="color: #24292e">[root@localhost httpd-2.4.46]# getsebool -a | grep httpd</span></span>
<span class="line"><span style="color: #24292e">httpd_anon_write --&gt; off</span></span>
<span class="line"><span style="color: #24292e">httpd_builtin_scripting --&gt; on</span></span>
<span class="line"><span style="color: #24292e">httpd_can_check_spam --&gt; off</span></span>
<span class="line"><span style="color: #24292e">httpd_can_connect_ftp --&gt; off</span></span>
<span class="line"><span style="color: #24292e">httpd_can_connect_ldap --&gt; off</span></span>
<span class="line"><span style="color: #24292e">httpd_can_connect_mythtv --&gt; off</span></span>
<span class="line"><span style="color: #24292e">httpd_can_connect_zabbix --&gt; off</span></span>
<span class="line"><span style="color: #24292e">httpd_can_network_connect --&gt; off</span></span>
<span class="line"><span style="color: #24292e">httpd_can_network_connect_cobbler --&gt; off</span></span>
<span class="line"><span style="color: #24292e">httpd_can_network_connect_db --&gt; off</span></span>
<span class="line"><span style="color: #24292e">httpd_can_network_memcache --&gt; off</span></span>
<span class="line"><span style="color: #24292e">httpd_can_network_relay --&gt; off</span></span>
<span class="line"><span style="color: #24292e">httpd_can_sendmail --&gt; off</span></span>
<span class="line"><span style="color: #24292e">httpd_dbus_avahi --&gt; off</span></span>
<span class="line"><span style="color: #24292e">httpd_dbus_sssd --&gt; off</span></span>
<span class="line"><span style="color: #24292e">httpd_dontaudit_search_dirs --&gt; off</span></span>
<span class="line"><span style="color: #24292e">httpd_enable_cgi --&gt; on</span></span>
<span class="line"><span style="color: #24292e">httpd_enable_ftp_server --&gt; off</span></span>
<span class="line"><span style="color: #24292e">httpd_enable_homedirs --&gt; off</span></span>
<span class="line"><span style="color: #24292e">httpd_execmem --&gt; off</span></span>
<span class="line"><span style="color: #24292e">httpd_graceful_shutdown --&gt; off</span></span>
<span class="line"><span style="color: #24292e">httpd_manage_ipa --&gt; off</span></span>
<span class="line"><span style="color: #24292e">httpd_mod_auth_ntlm_winbind --&gt; off</span></span>
<span class="line"><span style="color: #24292e">httpd_mod_auth_pam --&gt; off</span></span>
<span class="line"><span style="color: #24292e">httpd_read_user_content --&gt; off</span></span>
<span class="line"><span style="color: #24292e">httpd_run_ipa --&gt; off</span></span>
<span class="line"><span style="color: #24292e">httpd_run_preupgrade --&gt; off</span></span>
<span class="line"><span style="color: #24292e">httpd_run_stickshift --&gt; off</span></span>
<span class="line"><span style="color: #24292e">httpd_serve_cobbler_files --&gt; off</span></span>
<span class="line"><span style="color: #24292e">httpd_setrlimit --&gt; off</span></span>
<span class="line"><span style="color: #24292e">httpd_ssi_exec --&gt; off</span></span>
<span class="line"><span style="color: #24292e">httpd_sys_script_anon_write --&gt; off</span></span>
<span class="line"><span style="color: #24292e">httpd_tmp_exec --&gt; off</span></span>
<span class="line"><span style="color: #24292e">httpd_tty_comm --&gt; off</span></span>
<span class="line"><span style="color: #24292e">httpd_unified --&gt; off</span></span>
<span class="line"><span style="color: #24292e">httpd_use_cifs --&gt; off</span></span>
<span class="line"><span style="color: #24292e">httpd_use_fusefs --&gt; off</span></span>
<span class="line"><span style="color: #24292e">httpd_use_gpg --&gt; off</span></span>
<span class="line"><span style="color: #24292e">httpd_use_nfs --&gt; off</span></span>
<span class="line"><span style="color: #24292e">httpd_use_opencryptoki --&gt; off</span></span>
<span class="line"><span style="color: #24292e">httpd_use_openstack --&gt; off</span></span>
<span class="line"><span style="color: #24292e">httpd_use_sasl --&gt; off</span></span>
<span class="line"><span style="color: #24292e">httpd_verify_dns --&gt; off</span></span>
<span class="line"><span style="color: #24292e"></span></span>
<span class="line"><span style="color: #24292e">[root@localhost httpd-2.4.46]# setsebool -P httpd_anon_write on</span></span>
<span class="line"><span style="color: #24292e">[root@localhost httpd-2.4.46]# setsebool -P httpd_can_check_spam on</span></span>
<span class="line"><span style="color: #24292e">[root@localhost httpd-2.4.46]# setsebool -P httpd_can_network_connect on</span></span>
<span class="line"><span style="color: #24292e">[root@localhost httpd-2.4.46]# setsebool -P httpd_can_network_connect_db on</span></span>
<span class="line"><span style="color: #24292e">[root@localhost httpd-2.4.46]# setsebool -P httpd_can_network_relay on</span></span>
<span class="line"><span style="color: #24292e">[root@localhost httpd-2.4.46]# setsebool -P httpd_tmp_exec on</span></span>
<span class="line"><span style="color: #24292e">[root@localhost httpd-2.4.46]# setsebool -P httpd_ssi_exec  on</span></span>
<span class="line"><span style="color: #24292e">[root@localhost httpd-2.4.46]# setsebool -P httpd_enable_cgi  on</span></span></code></pre>
</div><h2 id="_8、防火墙配置" tabindex="-1">8、防火墙配置 <a class="header-anchor" href="#_8、防火墙配置" aria-label="Permalink to &quot;8、防火墙配置&quot;">&ZeroWidthSpace;</a></h2>
<div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre v-pre class="shiki github-dark vp-code-dark" ><code><span class="line"><span style="color: #e1e4e8">[root@localhost httpd-2.4.46]# firewall-cmd  --add-port=80/tcp --permanent </span></span>
<span class="line"><span style="color: #e1e4e8">success</span></span>
<span class="line"><span style="color: #e1e4e8">[root@localhost httpd-2.4.46]# firewall-cmd  --add-port=443/tcp --permanent </span></span>
<span class="line"><span style="color: #e1e4e8">success</span></span>
<span class="line"><span style="color: #e1e4e8">[root@localhost httpd-2.4.46]# firewall-cmd  --add-port=8080/tcp --permanent </span></span>
<span class="line"><span style="color: #e1e4e8">success</span></span>
<span class="line"><span style="color: #e1e4e8">[root@localhost httpd-2.4.46]# firewall-cmd  --add-port=8888/tcp --permanent </span></span>
<span class="line"><span style="color: #e1e4e8">success</span></span>
<span class="line"><span style="color: #e1e4e8">[root@localhost httpd-2.4.46]# firewall-cmd  --add-service=http  --permanent </span></span>
<span class="line"><span style="color: #e1e4e8">success</span></span>
<span class="line"><span style="color: #e1e4e8">[root@localhost httpd-2.4.46]# firewall-cmd  --add-service=https  --permanent </span></span>
<span class="line"><span style="color: #e1e4e8">success</span></span>
<span class="line"><span style="color: #e1e4e8">[root@localhost httpd-2.4.46]# firewall-cmd  --reload</span></span>
<span class="line"><span style="color: #e1e4e8">success</span></span></code></pre><pre v-pre class="shiki github-light vp-code-light" ><code><span class="line"><span style="color: #24292e">[root@localhost httpd-2.4.46]# firewall-cmd  --add-port=80/tcp --permanent </span></span>
<span class="line"><span style="color: #24292e">success</span></span>
<span class="line"><span style="color: #24292e">[root@localhost httpd-2.4.46]# firewall-cmd  --add-port=443/tcp --permanent </span></span>
<span class="line"><span style="color: #24292e">success</span></span>
<span class="line"><span style="color: #24292e">[root@localhost httpd-2.4.46]# firewall-cmd  --add-port=8080/tcp --permanent </span></span>
<span class="line"><span style="color: #24292e">success</span></span>
<span class="line"><span style="color: #24292e">[root@localhost httpd-2.4.46]# firewall-cmd  --add-port=8888/tcp --permanent </span></span>
<span class="line"><span style="color: #24292e">success</span></span>
<span class="line"><span style="color: #24292e">[root@localhost httpd-2.4.46]# firewall-cmd  --add-service=http  --permanent </span></span>
<span class="line"><span style="color: #24292e">success</span></span>
<span class="line"><span style="color: #24292e">[root@localhost httpd-2.4.46]# firewall-cmd  --add-service=https  --permanent </span></span>
<span class="line"><span style="color: #24292e">success</span></span>
<span class="line"><span style="color: #24292e">[root@localhost httpd-2.4.46]# firewall-cmd  --reload</span></span>
<span class="line"><span style="color: #24292e">success</span></span></code></pre>
</div><h2 id="_9、修改主配置文件httpd-conf" tabindex="-1">9、修改主配置文件httpd.conf <a class="header-anchor" href="#_9、修改主配置文件httpd-conf" aria-label="Permalink to &quot;9、修改主配置文件httpd.conf&quot;">&ZeroWidthSpace;</a></h2>
<div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre v-pre class="shiki github-dark vp-code-dark" ><code><span class="line"><span style="color: #e1e4e8">[root@localhost conf]# pwd</span></span>
<span class="line"><span style="color: #e1e4e8">/usr/local/apache/conf</span></span>
<span class="line"><span style="color: #e1e4e8">[root@localhost conf]# vim httpd.conf </span></span>
<span class="line"><span style="color: #e1e4e8"></span></span>
<span class="line"><span style="color: #e1e4e8">ServerAdmin mufeng.yu@qq.com		#管理员邮箱</span></span>
<span class="line"><span style="color: #e1e4e8">ServerName www.mufeng.com:80	#站点名称</span></span></code></pre><pre v-pre class="shiki github-light vp-code-light" ><code><span class="line"><span style="color: #24292e">[root@localhost conf]# pwd</span></span>
<span class="line"><span style="color: #24292e">/usr/local/apache/conf</span></span>
<span class="line"><span style="color: #24292e">[root@localhost conf]# vim httpd.conf </span></span>
<span class="line"><span style="color: #24292e"></span></span>
<span class="line"><span style="color: #24292e">ServerAdmin mufeng.yu@qq.com		#管理员邮箱</span></span>
<span class="line"><span style="color: #24292e">ServerName www.mufeng.com:80	#站点名称</span></span></code></pre>
</div><blockquote>
<p>ServerRoot：服务目录</p>
<p>ServerAdmin：管理员邮箱</p>
<p>User：运行服务的用户身份</p>
<p>Group：运行服务的组身份</p>
<p>ServerName：网站服务器的域名</p>
<p>DocumentRoot：网页文档的根目录</p>
<p>Listen：监听的IP地址、端口号</p>
<p>PidFile：保存httpd进程PID号的文件</p>
<p>DirectoryIndex：默认的索引页文件</p>
<p>ErrorLog：错误日志文件的位置</p>
<p>CustomLog：访问日志文件的位置</p>
<p>LogLevel：记录日志的级别，默认为warn</p>
<p>Timeout：网络连接超时，默认为300秒</p>
<p>KeepAlive：是否保持连接，可选On或Off</p>
<p>MaxKeepAliveRequests：每次连接最多请求文件数</p>
<p>KeepAliveTimeout：保持连接状态时的超时时间</p>
<p>Include：需要包含进来的其他配置文件</p>
</blockquote>
<h2 id="_10、http-conf-语法检查" tabindex="-1">10、http.conf 语法检查 <a class="header-anchor" href="#_10、http-conf-语法检查" aria-label="Permalink to &quot;10、http.conf 语法检查&quot;">&ZeroWidthSpace;</a></h2>
<div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre v-pre class="shiki github-dark vp-code-dark" ><code><span class="line"><span style="color: #e1e4e8">[root@localhost conf]# /usr/local/apache/bin/apachectl  -t</span></span>
<span class="line"><span style="color: #e1e4e8">Syntax OK</span></span></code></pre><pre v-pre class="shiki github-light vp-code-light" ><code><span class="line"><span style="color: #24292e">[root@localhost conf]# /usr/local/apache/bin/apachectl  -t</span></span>
<span class="line"><span style="color: #24292e">Syntax OK</span></span></code></pre>
</div><h2 id="_11、启动httpd服务" tabindex="-1">11、启动httpd服务 <a class="header-anchor" href="#_11、启动httpd服务" aria-label="Permalink to &quot;11、启动httpd服务&quot;">&ZeroWidthSpace;</a></h2>
<div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre v-pre class="shiki github-dark vp-code-dark" ><code><span class="line"><span style="color: #e1e4e8">[root@localhost conf]# /usr/local/apache/bin/apachectl start</span></span></code></pre><pre v-pre class="shiki github-light vp-code-light" ><code><span class="line"><span style="color: #24292e">[root@localhost conf]# /usr/local/apache/bin/apachectl start</span></span></code></pre>
</div><h2 id="_12、测试" tabindex="-1">12、测试 <a class="header-anchor" href="#_12、测试" aria-label="Permalink to &quot;12、测试&quot;">&ZeroWidthSpace;</a></h2>
<div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre v-pre class="shiki github-dark vp-code-dark" ><code><span class="line"><span style="color: #e1e4e8">[root@localhost conf]# wget www.mufeng.com</span></span>
<span class="line"><span style="color: #e1e4e8">--2020-12-01 08:41:48--  http://www.mufeng.com/</span></span>
<span class="line"><span style="color: #e1e4e8">Resolving www.mufeng.com (www.mufeng.com)... 192.35.35.1</span></span>
<span class="line"><span style="color: #e1e4e8">Connecting to www.mufeng.com (www.mufeng.com)|192.35.35.1|:80... connected.</span></span>
<span class="line"><span style="color: #e1e4e8">HTTP request sent, awaiting response... 200 OK</span></span>
<span class="line"><span style="color: #e1e4e8">Length: 45 [text/html]</span></span>
<span class="line"><span style="color: #e1e4e8">Saving to: ‘index.html’</span></span>
<span class="line"><span style="color: #e1e4e8"></span></span>
<span class="line"><span style="color: #e1e4e8">index.html                        100%[==========================================================&gt;]      45  --.-KB/s    in 0s      </span></span>
<span class="line"><span style="color: #e1e4e8"></span></span>
<span class="line"><span style="color: #e1e4e8">2020-12-01 08:41:48 (7.99 MB/s) - ‘index.html’ saved [45/45]</span></span>
<span class="line"><span style="color: #e1e4e8"></span></span>
<span class="line"><span style="color: #e1e4e8">[root@localhost conf]# vim index.html </span></span>
<span class="line"><span style="color: #e1e4e8">&lt;html&gt;&lt;body&gt;&lt;h1&gt;It works!&lt;/h1&gt;&lt;/body&gt;&lt;/html&gt;</span></span></code></pre><pre v-pre class="shiki github-light vp-code-light" ><code><span class="line"><span style="color: #24292e">[root@localhost conf]# wget www.mufeng.com</span></span>
<span class="line"><span style="color: #24292e">--2020-12-01 08:41:48--  http://www.mufeng.com/</span></span>
<span class="line"><span style="color: #24292e">Resolving www.mufeng.com (www.mufeng.com)... 192.35.35.1</span></span>
<span class="line"><span style="color: #24292e">Connecting to www.mufeng.com (www.mufeng.com)|192.35.35.1|:80... connected.</span></span>
<span class="line"><span style="color: #24292e">HTTP request sent, awaiting response... 200 OK</span></span>
<span class="line"><span style="color: #24292e">Length: 45 [text/html]</span></span>
<span class="line"><span style="color: #24292e">Saving to: ‘index.html’</span></span>
<span class="line"><span style="color: #24292e"></span></span>
<span class="line"><span style="color: #24292e">index.html                        100%[==========================================================&gt;]      45  --.-KB/s    in 0s      </span></span>
<span class="line"><span style="color: #24292e"></span></span>
<span class="line"><span style="color: #24292e">2020-12-01 08:41:48 (7.99 MB/s) - ‘index.html’ saved [45/45]</span></span>
<span class="line"><span style="color: #24292e"></span></span>
<span class="line"><span style="color: #24292e">[root@localhost conf]# vim index.html </span></span>
<span class="line"><span style="color: #24292e">&lt;html&gt;&lt;body&gt;&lt;h1&gt;It works!&lt;/h1&gt;&lt;/body&gt;&lt;/html&gt;</span></span></code></pre>
</div><blockquote>
<p>这个测试完全可以通过ip地址来实现，如果想通过域名访问，需要配置自己的DNS域名服务器bind</p>
</blockquote>
<h2 id="_13、测试本机httpd服务器的性能" tabindex="-1">13、测试本机httpd服务器的性能 <a class="header-anchor" href="#_13、测试本机httpd服务器的性能" aria-label="Permalink to &quot;13、测试本机httpd服务器的性能&quot;">&ZeroWidthSpace;</a></h2>
<p>ab命令格式说明</p>
<div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre v-pre class="shiki github-dark vp-code-dark" ><code><span class="line"><span style="color: #e1e4e8">ab [-q] -c 并发请求数 -n 总的请求数 [http://]域名[:端口]/路径</span></span></code></pre><pre v-pre class="shiki github-light vp-code-light" ><code><span class="line"><span style="color: #24292e">ab [-q] -c 并发请求数 -n 总的请求数 [http://]域名[:端口]/路径</span></span></code></pre>
</div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre v-pre class="shiki github-dark vp-code-dark" ><code><span class="line"><span style="color: #e1e4e8">[root@localhost conf]# ulimit -n 3600</span></span>
<span class="line"><span style="color: #e1e4e8">[root@localhost bin]# pwd</span></span>
<span class="line"><span style="color: #e1e4e8">/usr/local/apache/bin</span></span>
<span class="line"><span style="color: #e1e4e8">[root@localhost bin]# ./ab -q -c 2000 -n 4000 http://www.mufeng.com/ </span></span>
<span class="line"><span style="color: #e1e4e8">This is ApacheBench, Version 2.3 &lt;$Revision: 1879490 $&gt;</span></span>
<span class="line"><span style="color: #e1e4e8">Copyright 1996 Adam Twiss, Zeus Technology Ltd, http://www.zeustech.net/</span></span>
<span class="line"><span style="color: #e1e4e8">Licensed to The Apache Software Foundation, http://www.apache.org/</span></span>
<span class="line"><span style="color: #e1e4e8"></span></span>
<span class="line"><span style="color: #e1e4e8">Benchmarking www.mufeng.com (be patient).....done</span></span>
<span class="line"><span style="color: #e1e4e8"></span></span>
<span class="line"><span style="color: #e1e4e8"></span></span>
<span class="line"><span style="color: #e1e4e8">Server Software:        Apache/2.4.46</span></span>
<span class="line"><span style="color: #e1e4e8">Server Hostname:        www.mufeng.com</span></span>
<span class="line"><span style="color: #e1e4e8">Server Port:            80</span></span>
<span class="line"><span style="color: #e1e4e8"></span></span>
<span class="line"><span style="color: #e1e4e8">Document Path:          /</span></span>
<span class="line"><span style="color: #e1e4e8">Document Length:        45 bytes</span></span>
<span class="line"><span style="color: #e1e4e8"></span></span>
<span class="line"><span style="color: #e1e4e8">Concurrency Level:      2000</span></span>
<span class="line"><span style="color: #e1e4e8">Time taken for tests:   0.519 seconds</span></span>
<span class="line"><span style="color: #e1e4e8">Complete requests:      4000</span></span>
<span class="line"><span style="color: #e1e4e8">Failed requests:        0</span></span>
<span class="line"><span style="color: #e1e4e8">Total transferred:      1156000 bytes</span></span>
<span class="line"><span style="color: #e1e4e8">HTML transferred:       180000 bytes</span></span>
<span class="line"><span style="color: #e1e4e8">Requests per second:    7703.79 [#/sec] (mean)</span></span>
<span class="line"><span style="color: #e1e4e8">Time per request:       259.613 [ms] (mean)</span></span>
<span class="line"><span style="color: #e1e4e8">Time per request:       0.130 [ms] (mean, across all concurrent requests)</span></span>
<span class="line"><span style="color: #e1e4e8">Transfer rate:          2174.21 [Kbytes/sec] received</span></span>
<span class="line"><span style="color: #e1e4e8"></span></span>
<span class="line"><span style="color: #e1e4e8">Connection Times (ms)</span></span>
<span class="line"><span style="color: #e1e4e8">              min  mean[+/-sd] median   max</span></span>
<span class="line"><span style="color: #e1e4e8">Connect:        0    9  17.2      4      71</span></span>
<span class="line"><span style="color: #e1e4e8">Processing:     0   17  46.8      8     428</span></span>
<span class="line"><span style="color: #e1e4e8">Waiting:        0   16  46.7      7     428</span></span>
<span class="line"><span style="color: #e1e4e8">Total:          0   26  58.4     12     498</span></span>
<span class="line"><span style="color: #e1e4e8"></span></span>
<span class="line"><span style="color: #e1e4e8">Percentage of the requests served within a certain time (ms)</span></span>
<span class="line"><span style="color: #e1e4e8">  50%     12</span></span>
<span class="line"><span style="color: #e1e4e8">  66%     13</span></span>
<span class="line"><span style="color: #e1e4e8">  75%     15</span></span>
<span class="line"><span style="color: #e1e4e8">  80%     16</span></span>
<span class="line"><span style="color: #e1e4e8">  90%     24</span></span>
<span class="line"><span style="color: #e1e4e8">  95%     81</span></span>
<span class="line"><span style="color: #e1e4e8">  98%    283</span></span>
<span class="line"><span style="color: #e1e4e8">  99%    288</span></span>
<span class="line"><span style="color: #e1e4e8"> 100%    498 (longest request)</span></span></code></pre><pre v-pre class="shiki github-light vp-code-light" ><code><span class="line"><span style="color: #24292e">[root@localhost conf]# ulimit -n 3600</span></span>
<span class="line"><span style="color: #24292e">[root@localhost bin]# pwd</span></span>
<span class="line"><span style="color: #24292e">/usr/local/apache/bin</span></span>
<span class="line"><span style="color: #24292e">[root@localhost bin]# ./ab -q -c 2000 -n 4000 http://www.mufeng.com/ </span></span>
<span class="line"><span style="color: #24292e">This is ApacheBench, Version 2.3 &lt;$Revision: 1879490 $&gt;</span></span>
<span class="line"><span style="color: #24292e">Copyright 1996 Adam Twiss, Zeus Technology Ltd, http://www.zeustech.net/</span></span>
<span class="line"><span style="color: #24292e">Licensed to The Apache Software Foundation, http://www.apache.org/</span></span>
<span class="line"><span style="color: #24292e"></span></span>
<span class="line"><span style="color: #24292e">Benchmarking www.mufeng.com (be patient).....done</span></span>
<span class="line"><span style="color: #24292e"></span></span>
<span class="line"><span style="color: #24292e"></span></span>
<span class="line"><span style="color: #24292e">Server Software:        Apache/2.4.46</span></span>
<span class="line"><span style="color: #24292e">Server Hostname:        www.mufeng.com</span></span>
<span class="line"><span style="color: #24292e">Server Port:            80</span></span>
<span class="line"><span style="color: #24292e"></span></span>
<span class="line"><span style="color: #24292e">Document Path:          /</span></span>
<span class="line"><span style="color: #24292e">Document Length:        45 bytes</span></span>
<span class="line"><span style="color: #24292e"></span></span>
<span class="line"><span style="color: #24292e">Concurrency Level:      2000</span></span>
<span class="line"><span style="color: #24292e">Time taken for tests:   0.519 seconds</span></span>
<span class="line"><span style="color: #24292e">Complete requests:      4000</span></span>
<span class="line"><span style="color: #24292e">Failed requests:        0</span></span>
<span class="line"><span style="color: #24292e">Total transferred:      1156000 bytes</span></span>
<span class="line"><span style="color: #24292e">HTML transferred:       180000 bytes</span></span>
<span class="line"><span style="color: #24292e">Requests per second:    7703.79 [#/sec] (mean)</span></span>
<span class="line"><span style="color: #24292e">Time per request:       259.613 [ms] (mean)</span></span>
<span class="line"><span style="color: #24292e">Time per request:       0.130 [ms] (mean, across all concurrent requests)</span></span>
<span class="line"><span style="color: #24292e">Transfer rate:          2174.21 [Kbytes/sec] received</span></span>
<span class="line"><span style="color: #24292e"></span></span>
<span class="line"><span style="color: #24292e">Connection Times (ms)</span></span>
<span class="line"><span style="color: #24292e">              min  mean[+/-sd] median   max</span></span>
<span class="line"><span style="color: #24292e">Connect:        0    9  17.2      4      71</span></span>
<span class="line"><span style="color: #24292e">Processing:     0   17  46.8      8     428</span></span>
<span class="line"><span style="color: #24292e">Waiting:        0   16  46.7      7     428</span></span>
<span class="line"><span style="color: #24292e">Total:          0   26  58.4     12     498</span></span>
<span class="line"><span style="color: #24292e"></span></span>
<span class="line"><span style="color: #24292e">Percentage of the requests served within a certain time (ms)</span></span>
<span class="line"><span style="color: #24292e">  50%     12</span></span>
<span class="line"><span style="color: #24292e">  66%     13</span></span>
<span class="line"><span style="color: #24292e">  75%     15</span></span>
<span class="line"><span style="color: #24292e">  80%     16</span></span>
<span class="line"><span style="color: #24292e">  90%     24</span></span>
<span class="line"><span style="color: #24292e">  95%     81</span></span>
<span class="line"><span style="color: #24292e">  98%    283</span></span>
<span class="line"><span style="color: #24292e">  99%    288</span></span>
<span class="line"><span style="color: #24292e"> 100%    498 (longest request)</span></span></code></pre>
</div><p>注：构建服务所需的包可在<a href="https://download.csdn.net/download/qq_45417634/13208956" target="_blank" rel="noreferrer">server_source_2020.iso </a>请自行下载，您也可以在所需安装包官网下载
本地源配置、防火墙、selinux等是linux较为基础的内容，不再赘述。
本文均为原创，如需与博主交流可email至mufeng.yu@qq.com</p>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[LAMP编译安装三部曲]]></title>
            <link>https://www.imufeng.cn/technology/web/linux-lamp/</link>
            <guid>https://www.imufeng.cn/technology/web/linux-lamp/</guid>
            <pubDate>Wed, 11 Oct 2023 10:42:02 GMT</pubDate>
            <content:encoded><![CDATA[<h1 id="lamp-编译安装三部曲" tabindex="-1">LAMP 编译安装三部曲 <a class="header-anchor" href="#lamp-编译安装三部曲" aria-label="Permalink to &quot;LAMP 编译安装三部曲&quot;">&ZeroWidthSpace;</a></h1>
<p>LAMP 是一种常用于搭建网站和应用程序的服务器架构，它由 Linux、Apache、MySQL（或MariaDB）、PHP 四个开源软件组成，也分别代表了操作系统、Web 服务器、数据库以及服务器端脚本语言。 与 LNMP 架构类似，区别在于使用的 Web 服务器组件。</p>
<p>本教程将用三步带你完成 LAMP 架构的编译安装。</p>
<ol>
<li><a href="./first.html"> 第一步 编译安装 httpd 服务器 </a></li>
<li><a href="./second.html"> 第二步 编译安装mariadb数据库环境</a></li>
<li><a href="./third.html"> 第三步 编译安装PHP </a></li>
</ol>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[第二步编译安装mariadb数据库环境]]></title>
            <link>https://www.imufeng.cn/technology/web/linux-lamp/second.html</link>
            <guid>https://www.imufeng.cn/technology/web/linux-lamp/second.html</guid>
            <pubDate>Wed, 11 Oct 2023 10:42:02 GMT</pubDate>
            <content:encoded><![CDATA[<h1 id="第二步-编译安装mariadb数据库环境" tabindex="-1">第二步 编译安装mariadb数据库环境 <a class="header-anchor" href="#第二步-编译安装mariadb数据库环境" aria-label="Permalink to &quot;第二步 编译安装mariadb数据库环境&quot;">&ZeroWidthSpace;</a></h1>
<h2 id="_1、mariadb数据库概述" tabindex="-1">1、Mariadb数据库概述 <a class="header-anchor" href="#_1、mariadb数据库概述" aria-label="Permalink to &quot;1、Mariadb数据库概述&quot;">&ZeroWidthSpace;</a></h2>
<p>Mariadb是开源的关系型数据库服务器软件</p>
<ul>
<li>
<p>目前由SUN公司开发和维护</p>
</li>
<li>
<p>官方站点：<a href="https://mariadb.org/" target="_blank" rel="noreferrer">https://mariadb.org/</a></p>
</li>
</ul>
<p>Mariadb的特点</p>
<ul>
<li>
<p>多线程、多用户</p>
</li>
<li>
<p>基于客户/服务器架构</p>
</li>
<li>
<p>简单易用</p>
</li>
<li>
<p>查询速度快</p>
</li>
<li>
<p>安全可靠</p>
</li>
</ul>
<h2 id="_2、安装前准备工作" tabindex="-1">2、安装前准备工作 <a class="header-anchor" href="#_2、安装前准备工作" aria-label="Permalink to &quot;2、安装前准备工作&quot;">&ZeroWidthSpace;</a></h2>
<div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre v-pre class="shiki github-dark vp-code-dark" ><code><span class="line"><span style="color: #e1e4e8">[root@localhost packages]# dnf remove -y mariadb mariadb-server		#卸载已安装的mariadb服务</span></span>
<span class="line"><span style="color: #e1e4e8"></span></span>
<span class="line"><span style="color: #e1e4e8">[root@localhost packages]# yum install -y cmake gcc-c++  libstdc++-*  ncurses-devel libaio* bison ncurses-devel openssl-devel openssl gcc-c++ cmake </span></span>
<span class="line"><span style="color: #e1e4e8"></span></span>
<span class="line"><span style="color: #e1e4e8">[root@localhost packages]# mkdir -p /usr/local/mysql				#创建需要的文件夹</span></span>
<span class="line"><span style="color: #e1e4e8">[root@localhost packages]# mkdir -p /var/run/mysqld</span></span>
<span class="line"><span style="color: #e1e4e8">[root@localhost packages]# mkdir -p /var/lib/mysql</span></span>
<span class="line"><span style="color: #e1e4e8"></span></span>
<span class="line"><span style="color: #e1e4e8">[root@localhost packages]# which nologin							#创建用户以及用户组</span></span>
<span class="line"><span style="color: #e1e4e8">/usr/sbin/nologin</span></span>
<span class="line"><span style="color: #e1e4e8">[root@localhost packages]#  groupadd mysql</span></span>
<span class="line"><span style="color: #e1e4e8">[root@localhost packages]# useradd -g mysql -d /usr/local/mysql/ -s /usr/sbin/nologin mysql</span></span>
<span class="line"><span style="color: #e1e4e8">useradd: warning: the home directory already exists.</span></span>
<span class="line"><span style="color: #e1e4e8">Not copying any file from skel directory into it.</span></span>
<span class="line"><span style="color: #e1e4e8"></span></span>
<span class="line"><span style="color: #e1e4e8">[root@localhost packages]# chmod 777 -R /var/lib/mysql/ /var/run/mysqld/ /usr/local/mysql/	#文件夹读写权限</span></span>
<span class="line"><span style="color: #e1e4e8">[root@localhost packages]# chown mysql:mysql -R /var/lib/mysql/ /var/run/mysqld/ /usr/local/mysql/</span></span></code></pre><pre v-pre class="shiki github-light vp-code-light" ><code><span class="line"><span style="color: #24292e">[root@localhost packages]# dnf remove -y mariadb mariadb-server		#卸载已安装的mariadb服务</span></span>
<span class="line"><span style="color: #24292e"></span></span>
<span class="line"><span style="color: #24292e">[root@localhost packages]# yum install -y cmake gcc-c++  libstdc++-*  ncurses-devel libaio* bison ncurses-devel openssl-devel openssl gcc-c++ cmake </span></span>
<span class="line"><span style="color: #24292e"></span></span>
<span class="line"><span style="color: #24292e">[root@localhost packages]# mkdir -p /usr/local/mysql				#创建需要的文件夹</span></span>
<span class="line"><span style="color: #24292e">[root@localhost packages]# mkdir -p /var/run/mysqld</span></span>
<span class="line"><span style="color: #24292e">[root@localhost packages]# mkdir -p /var/lib/mysql</span></span>
<span class="line"><span style="color: #24292e"></span></span>
<span class="line"><span style="color: #24292e">[root@localhost packages]# which nologin							#创建用户以及用户组</span></span>
<span class="line"><span style="color: #24292e">/usr/sbin/nologin</span></span>
<span class="line"><span style="color: #24292e">[root@localhost packages]#  groupadd mysql</span></span>
<span class="line"><span style="color: #24292e">[root@localhost packages]# useradd -g mysql -d /usr/local/mysql/ -s /usr/sbin/nologin mysql</span></span>
<span class="line"><span style="color: #24292e">useradd: warning: the home directory already exists.</span></span>
<span class="line"><span style="color: #24292e">Not copying any file from skel directory into it.</span></span>
<span class="line"><span style="color: #24292e"></span></span>
<span class="line"><span style="color: #24292e">[root@localhost packages]# chmod 777 -R /var/lib/mysql/ /var/run/mysqld/ /usr/local/mysql/	#文件夹读写权限</span></span>
<span class="line"><span style="color: #24292e">[root@localhost packages]# chown mysql:mysql -R /var/lib/mysql/ /var/run/mysqld/ /usr/local/mysql/</span></span></code></pre>
</div><h2 id="_3、解压mariadb安装包" tabindex="-1">3、解压mariadb安装包 <a class="header-anchor" href="#_3、解压mariadb安装包" aria-label="Permalink to &quot;3、解压mariadb安装包&quot;">&ZeroWidthSpace;</a></h2>
<div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre v-pre class="shiki github-dark vp-code-dark" ><code><span class="line"><span style="color: #e1e4e8">[root@localhost packages]# tar -xvf /app/packages/mariadb-10.5.6.tar.xz -C /app/</span></span></code></pre><pre v-pre class="shiki github-light vp-code-light" ><code><span class="line"><span style="color: #24292e">[root@localhost packages]# tar -xvf /app/packages/mariadb-10.5.6.tar.xz -C /app/</span></span></code></pre>
</div><h2 id="_4、编译选项参考" tabindex="-1">4、编译选项参考 <a class="header-anchor" href="#_4、编译选项参考" aria-label="Permalink to &quot;4、编译选项参考&quot;">&ZeroWidthSpace;</a></h2>
<div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre v-pre class="shiki github-dark vp-code-dark" ><code><span class="line"><span style="color: #e1e4e8">cmake . -DCMAKE_INSTALL_PREFIX=/usr/local/mysql -DMYSQL_DATADIR=/usr/local/mysql/data -DSYSCONFDIR=/etc  -DWITH_INNOBASE_STORAGE_ENGINE=1 -DWITH_ARCHIVE_STORAGE_ENGINE=1 -DWITH_BLACKHOLE_STORAGE_ENGINE=1 -DWITH_READLINE=1 -DWITH_SSL=system -DWITH_ZLIB=system -DWITH_LIBWRAP=0 -DMYSQL_UNIX_ADDR=/var/lib/mysql/mysql.sock -DDEFAULT_CHARSET=utf8 -DDEFAULT_COLLATION=utf8_general_ci -DWITHOUT_TOKUDB=1		#编译选项详见mariadb的说明文档</span></span></code></pre><pre v-pre class="shiki github-light vp-code-light" ><code><span class="line"><span style="color: #24292e">cmake . -DCMAKE_INSTALL_PREFIX=/usr/local/mysql -DMYSQL_DATADIR=/usr/local/mysql/data -DSYSCONFDIR=/etc  -DWITH_INNOBASE_STORAGE_ENGINE=1 -DWITH_ARCHIVE_STORAGE_ENGINE=1 -DWITH_BLACKHOLE_STORAGE_ENGINE=1 -DWITH_READLINE=1 -DWITH_SSL=system -DWITH_ZLIB=system -DWITH_LIBWRAP=0 -DMYSQL_UNIX_ADDR=/var/lib/mysql/mysql.sock -DDEFAULT_CHARSET=utf8 -DDEFAULT_COLLATION=utf8_general_ci -DWITHOUT_TOKUDB=1		#编译选项详见mariadb的说明文档</span></span></code></pre>
</div><h2 id="_5、开始编译安装" tabindex="-1">5、开始编译安装 <a class="header-anchor" href="#_5、开始编译安装" aria-label="Permalink to &quot;5、开始编译安装&quot;">&ZeroWidthSpace;</a></h2>
<div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre v-pre class="shiki github-dark vp-code-dark" ><code><span class="line"><span style="color: #e1e4e8">[root@localhost mariadb-10.5.6]# cmake . -DCMAKE_INSTALL_PREFIX=/usr/local/mysql -DMYSQL_DATADIR=/usr/local/mysql/data -DSYSCONFDIR=/etc  -DWITH_INNOBASE_STORAGE_ENGINE=1 -DWITH_ARCHIVE_STORAGE_ENGINE=1 -DWITH_BLACKHOLE_STORAGE_ENGINE=1 -DWITH_READLINE=1 -DWITH_SSL=system -DWITH_ZLIB=system -DWITH_LIBWRAP=0 -DMYSQL_UNIX_ADDR=/var/lib/mysql/mysql.sock -DDEFAULT_CHARSET=utf8 -DDEFAULT_COLLATION=utf8_general_ci -DWITHOUT_TOKUDB=1</span></span>
<span class="line"><span style="color: #e1e4e8">[root@localhost mariadb-10.5.6]# make &amp;&amp; make install		#编译安装时间会有点长</span></span></code></pre><pre v-pre class="shiki github-light vp-code-light" ><code><span class="line"><span style="color: #24292e">[root@localhost mariadb-10.5.6]# cmake . -DCMAKE_INSTALL_PREFIX=/usr/local/mysql -DMYSQL_DATADIR=/usr/local/mysql/data -DSYSCONFDIR=/etc  -DWITH_INNOBASE_STORAGE_ENGINE=1 -DWITH_ARCHIVE_STORAGE_ENGINE=1 -DWITH_BLACKHOLE_STORAGE_ENGINE=1 -DWITH_READLINE=1 -DWITH_SSL=system -DWITH_ZLIB=system -DWITH_LIBWRAP=0 -DMYSQL_UNIX_ADDR=/var/lib/mysql/mysql.sock -DDEFAULT_CHARSET=utf8 -DDEFAULT_COLLATION=utf8_general_ci -DWITHOUT_TOKUDB=1</span></span>
<span class="line"><span style="color: #24292e">[root@localhost mariadb-10.5.6]# make &amp;&amp; make install		#编译安装时间会有点长</span></span></code></pre>
</div><h2 id="_6、安装后的配置" tabindex="-1">6、安装后的配置 <a class="header-anchor" href="#_6、安装后的配置" aria-label="Permalink to &quot;6、安装后的配置&quot;">&ZeroWidthSpace;</a></h2>
<div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre v-pre class="shiki github-dark vp-code-dark" ><code><span class="line"><span style="color: #e1e4e8">[root@localhost mariadb-10.5.6]# export PATH=$PATH:/usr/local/mysql/bin		#环境变量</span></span>
<span class="line"><span style="color: #e1e4e8">[root@localhost mariadb-10.5.6]# /usr/local/mysql/scripts/mysql_install_db --basedir=/usr/local/mysql --datadir=/usr/local/mysql/data  --defaults-file=/etc/my.cnf --socket=/var/lib/mysql/mysql.sock		#初始化</span></span>
<span class="line"><span style="color: #e1e4e8">#设置开机启动</span></span>
<span class="line"><span style="color: #e1e4e8">[root@localhost mysql]# cp -rf support-files/mysql.server /etc/init.d/mysqld </span></span>
<span class="line"><span style="color: #e1e4e8">[root@localhost mysql]# chmod 777 /etc/init.d/mysqld </span></span>
<span class="line"><span style="color: #e1e4e8">[root@localhost mysql]# chkconfig --add mysqld</span></span>
<span class="line"><span style="color: #e1e4e8">[root@localhost mysql]# chkconfig mysqld on  </span></span>
<span class="line"><span style="color: #e1e4e8">[root@localhost mysql]# vim /etc/init.d/mysqld </span></span>
<span class="line"><span style="color: #e1e4e8">basedir=/usr/local/mysql</span></span>
<span class="line"><span style="color: #e1e4e8">datadir=/usr/local/mysql/data</span></span>
<span class="line"><span style="color: #e1e4e8"></span></span>
<span class="line"><span style="color: #e1e4e8">[root@localhost /]# cd /usr/local/mysql/</span></span>
<span class="line"><span style="color: #e1e4e8">[root@localhost mysql]# chmod -R 777 data</span></span>
<span class="line"><span style="color: #e1e4e8">[root@localhost mysql]# mysqld_safe --datadir=&#39;/usr/local/mysql/data&#39;</span></span>
<span class="line"><span style="color: #e1e4e8">201204 02:05:33 mysqld_safe Logging to &#39;/var/log/mariadb/mariadb.log&#39;.</span></span>
<span class="line"><span style="color: #e1e4e8">201204 02:05:34 mysqld_safe Starting mariadbd daemon with databases from /usr/local/mysql/data</span></span></code></pre><pre v-pre class="shiki github-light vp-code-light" ><code><span class="line"><span style="color: #24292e">[root@localhost mariadb-10.5.6]# export PATH=$PATH:/usr/local/mysql/bin		#环境变量</span></span>
<span class="line"><span style="color: #24292e">[root@localhost mariadb-10.5.6]# /usr/local/mysql/scripts/mysql_install_db --basedir=/usr/local/mysql --datadir=/usr/local/mysql/data  --defaults-file=/etc/my.cnf --socket=/var/lib/mysql/mysql.sock		#初始化</span></span>
<span class="line"><span style="color: #24292e">#设置开机启动</span></span>
<span class="line"><span style="color: #24292e">[root@localhost mysql]# cp -rf support-files/mysql.server /etc/init.d/mysqld </span></span>
<span class="line"><span style="color: #24292e">[root@localhost mysql]# chmod 777 /etc/init.d/mysqld </span></span>
<span class="line"><span style="color: #24292e">[root@localhost mysql]# chkconfig --add mysqld</span></span>
<span class="line"><span style="color: #24292e">[root@localhost mysql]# chkconfig mysqld on  </span></span>
<span class="line"><span style="color: #24292e">[root@localhost mysql]# vim /etc/init.d/mysqld </span></span>
<span class="line"><span style="color: #24292e">basedir=/usr/local/mysql</span></span>
<span class="line"><span style="color: #24292e">datadir=/usr/local/mysql/data</span></span>
<span class="line"><span style="color: #24292e"></span></span>
<span class="line"><span style="color: #24292e">[root@localhost /]# cd /usr/local/mysql/</span></span>
<span class="line"><span style="color: #24292e">[root@localhost mysql]# chmod -R 777 data</span></span>
<span class="line"><span style="color: #24292e">[root@localhost mysql]# mysqld_safe --datadir=&#39;/usr/local/mysql/data&#39;</span></span>
<span class="line"><span style="color: #24292e">201204 02:05:33 mysqld_safe Logging to &#39;/var/log/mariadb/mariadb.log&#39;.</span></span>
<span class="line"><span style="color: #24292e">201204 02:05:34 mysqld_safe Starting mariadbd daemon with databases from /usr/local/mysql/data</span></span></code></pre>
</div><h2 id="_7、开启服务" tabindex="-1">7、开启服务 <a class="header-anchor" href="#_7、开启服务" aria-label="Permalink to &quot;7、开启服务&quot;">&ZeroWidthSpace;</a></h2>
<div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre v-pre class="shiki github-dark vp-code-dark" ><code><span class="line"><span style="color: #e1e4e8">[root@localhost mysql]# systemctl start mysql</span></span></code></pre><pre v-pre class="shiki github-light vp-code-light" ><code><span class="line"><span style="color: #24292e">[root@localhost mysql]# systemctl start mysql</span></span></code></pre>
</div><h2 id="_8、登录以及退出" tabindex="-1">8、登录以及退出 <a class="header-anchor" href="#_8、登录以及退出" aria-label="Permalink to &quot;8、登录以及退出&quot;">&ZeroWidthSpace;</a></h2>
<div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre v-pre class="shiki github-dark vp-code-dark" ><code><span class="line"><span style="color: #e1e4e8">[root@localhost mysql]# mysql -u root</span></span>
<span class="line"><span style="color: #e1e4e8">Welcome to the MariaDB monitor.  Commands end with ; or \g.</span></span>
<span class="line"><span style="color: #e1e4e8">Your MariaDB connection id is 4</span></span>
<span class="line"><span style="color: #e1e4e8">Server version: 10.5.6-MariaDB Source distribution</span></span>
<span class="line"><span style="color: #e1e4e8"></span></span>
<span class="line"><span style="color: #e1e4e8">Copyright (c) 2000, 2018, Oracle, MariaDB Corporation Ab and others.</span></span>
<span class="line"><span style="color: #e1e4e8"></span></span>
<span class="line"><span style="color: #e1e4e8">Type &#39;help;&#39; or &#39;\h&#39; for help. Type &#39;\c&#39; to clear the current input statement.</span></span>
<span class="line"><span style="color: #e1e4e8"></span></span>
<span class="line"><span style="color: #e1e4e8">MariaDB [(none)]&gt; quit</span></span>
<span class="line"><span style="color: #e1e4e8">Bye</span></span></code></pre><pre v-pre class="shiki github-light vp-code-light" ><code><span class="line"><span style="color: #24292e">[root@localhost mysql]# mysql -u root</span></span>
<span class="line"><span style="color: #24292e">Welcome to the MariaDB monitor.  Commands end with ; or \g.</span></span>
<span class="line"><span style="color: #24292e">Your MariaDB connection id is 4</span></span>
<span class="line"><span style="color: #24292e">Server version: 10.5.6-MariaDB Source distribution</span></span>
<span class="line"><span style="color: #24292e"></span></span>
<span class="line"><span style="color: #24292e">Copyright (c) 2000, 2018, Oracle, MariaDB Corporation Ab and others.</span></span>
<span class="line"><span style="color: #24292e"></span></span>
<span class="line"><span style="color: #24292e">Type &#39;help;&#39; or &#39;\h&#39; for help. Type &#39;\c&#39; to clear the current input statement.</span></span>
<span class="line"><span style="color: #24292e"></span></span>
<span class="line"><span style="color: #24292e">MariaDB [(none)]&gt; quit</span></span>
<span class="line"><span style="color: #24292e">Bye</span></span></code></pre>
</div><blockquote>
<p>mysql -u root [-p] 未指定-p时表示不需要密码登录</p>
<p>退出可以使用exit quit</p>
</blockquote>
<h2 id="_9、数据库的简单使用" tabindex="-1">9、数据库的简单使用 <a class="header-anchor" href="#_9、数据库的简单使用" aria-label="Permalink to &quot;9、数据库的简单使用&quot;">&ZeroWidthSpace;</a></h2>
<pre><code>查看数据库列表信息
</code></pre>
<div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre v-pre class="shiki github-dark vp-code-dark" ><code><span class="line"><span style="color: #e1e4e8">SHOW DATABASES</span></span></code></pre><pre v-pre class="shiki github-light vp-code-light" ><code><span class="line"><span style="color: #24292e">SHOW DATABASES</span></span></code></pre>
</div><pre><code>查看数据库中的数据表信息
</code></pre>
<div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre v-pre class="shiki github-dark vp-code-dark" ><code><span class="line"><span style="color: #e1e4e8">USE 数据库名</span></span>
<span class="line"><span style="color: #e1e4e8">SHOW TABLES</span></span></code></pre><pre v-pre class="shiki github-light vp-code-light" ><code><span class="line"><span style="color: #24292e">USE 数据库名</span></span>
<span class="line"><span style="color: #24292e">SHOW TABLES</span></span></code></pre>
</div><pre><code>显示数据表的结构
</code></pre>
<div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre v-pre class="shiki github-dark vp-code-dark" ><code><span class="line"><span style="color: #e1e4e8">DESCRIBE [数据库名.表名]</span></span></code></pre><pre v-pre class="shiki github-light vp-code-light" ><code><span class="line"><span style="color: #24292e">DESCRIBE [数据库名.表名]</span></span></code></pre>
</div><pre><code>创建新的数据库
</code></pre>
<div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre v-pre class="shiki github-dark vp-code-dark" ><code><span class="line"><span style="color: #e1e4e8">CREATE DATABASE 数据库名</span></span></code></pre><pre v-pre class="shiki github-light vp-code-light" ><code><span class="line"><span style="color: #24292e">CREATE DATABASE 数据库名</span></span></code></pre>
</div><pre><code>创建数据表
</code></pre>
<div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre v-pre class="shiki github-dark vp-code-dark" ><code><span class="line"><span style="color: #e1e4e8">CREATE TABLE 表名 (字段定义...)</span></span></code></pre><pre v-pre class="shiki github-light vp-code-light" ><code><span class="line"><span style="color: #24292e">CREATE TABLE 表名 (字段定义...)</span></span></code></pre>
</div><pre><code>删除数据表
</code></pre>
<div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre v-pre class="shiki github-dark vp-code-dark" ><code><span class="line"><span style="color: #e1e4e8">DROP TABLE [数据库名.表名]、</span></span></code></pre><pre v-pre class="shiki github-light vp-code-light" ><code><span class="line"><span style="color: #24292e">DROP TABLE [数据库名.表名]、</span></span></code></pre>
</div><pre><code>删除数据库
</code></pre>
<div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre v-pre class="shiki github-dark vp-code-dark" ><code><span class="line"><span style="color: #e1e4e8">DROP DATABASE [数据库名]</span></span></code></pre><pre v-pre class="shiki github-light vp-code-light" ><code><span class="line"><span style="color: #24292e">DROP DATABASE [数据库名]</span></span></code></pre>
</div><pre><code>向数据表中插入记录
</code></pre>
<div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre v-pre class="shiki github-dark vp-code-dark" ><code><span class="line"><span style="color: #e1e4e8">INSERT INTO 表名(字段1, 字段2, ……)  VALUES(字段1的值, 字段2的值, ……)</span></span></code></pre><pre v-pre class="shiki github-light vp-code-light" ><code><span class="line"><span style="color: #24292e">INSERT INTO 表名(字段1, 字段2, ……)  VALUES(字段1的值, 字段2的值, ……)</span></span></code></pre>
</div><pre><code>从数据库中查找
</code></pre>
<div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre v-pre class="shiki github-dark vp-code-dark" ><code><span class="line"><span style="color: #e1e4e8">SELECT 字段名1,字段名2 …… FROM 表名 WHERE 条件表达式</span></span></code></pre><pre v-pre class="shiki github-light vp-code-light" ><code><span class="line"><span style="color: #24292e">SELECT 字段名1,字段名2 …… FROM 表名 WHERE 条件表达式</span></span></code></pre>
</div><pre><code>修改、更新数据表中的数据记录
</code></pre>
<div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre v-pre class="shiki github-dark vp-code-dark" ><code><span class="line"><span style="color: #e1e4e8">UPDATE 表名 SET 字段名1=字段值1[,字段名2=字段值2]  WHERE 条件表达式</span></span></code></pre><pre v-pre class="shiki github-light vp-code-light" ><code><span class="line"><span style="color: #24292e">UPDATE 表名 SET 字段名1=字段值1[,字段名2=字段值2]  WHERE 条件表达式</span></span></code></pre>
</div><pre><code>在数据表中删除指定的数据记录
</code></pre>
<div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre v-pre class="shiki github-dark vp-code-dark" ><code><span class="line"><span style="color: #e1e4e8">DELETE FROM 表名 WHERE 条件表达式</span></span></code></pre><pre v-pre class="shiki github-light vp-code-light" ><code><span class="line"><span style="color: #24292e">DELETE FROM 表名 WHERE 条件表达式</span></span></code></pre>
</div><h2 id="_10、数据库维护" tabindex="-1">10、数据库维护 <a class="header-anchor" href="#_10、数据库维护" aria-label="Permalink to &quot;10、数据库维护&quot;">&ZeroWidthSpace;</a></h2>
<p>备份数据库</p>
<div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre v-pre class="shiki github-dark vp-code-dark" ><code><span class="line"><span style="color: #e1e4e8">[root@localhost ~]# mysqldump -u root -p auth &gt; mysql-auth.sql				#备份auth库</span></span>
<span class="line"><span style="color: #e1e4e8">Enter password:</span></span>
<span class="line"><span style="color: #e1e4e8">[root@localhost ~]# mysqldump -u root -p --all-databases &gt; mysql-all.sql	#备份所有库</span></span>
<span class="line"><span style="color: #e1e4e8">[root@localhost ~]# ls -l mysql-*.sql</span></span>
<span class="line"><span style="color: #e1e4e8">-rw-r--r-- 1 root root 292300 09-17 04:55 mysql-all.sql</span></span>
<span class="line"><span style="color: #e1e4e8">-rw-r--r-- 1 root root   1678 09-17 04:55 mysql-auth.sql</span></span></code></pre><pre v-pre class="shiki github-light vp-code-light" ><code><span class="line"><span style="color: #24292e">[root@localhost ~]# mysqldump -u root -p auth &gt; mysql-auth.sql				#备份auth库</span></span>
<span class="line"><span style="color: #24292e">Enter password:</span></span>
<span class="line"><span style="color: #24292e">[root@localhost ~]# mysqldump -u root -p --all-databases &gt; mysql-all.sql	#备份所有库</span></span>
<span class="line"><span style="color: #24292e">[root@localhost ~]# ls -l mysql-*.sql</span></span>
<span class="line"><span style="color: #24292e">-rw-r--r-- 1 root root 292300 09-17 04:55 mysql-all.sql</span></span>
<span class="line"><span style="color: #24292e">-rw-r--r-- 1 root root   1678 09-17 04:55 mysql-auth.sql</span></span></code></pre>
</div><p>从备份中恢复</p>
<div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre v-pre class="shiki github-dark vp-code-dark" ><code><span class="line"><span style="color: #e1e4e8">[root@localhost ~]# mysql -u root -p auth &lt; mysql-auth.sql			#恢复auth库 </span></span>
<span class="line"><span style="color: #e1e4e8">[root@localhost ~]# mysql -u root -p &lt; mysql-all.sql 				#恢复所有库</span></span></code></pre><pre v-pre class="shiki github-light vp-code-light" ><code><span class="line"><span style="color: #24292e">[root@localhost ~]# mysql -u root -p auth &lt; mysql-auth.sql			#恢复auth库 </span></span>
<span class="line"><span style="color: #24292e">[root@localhost ~]# mysql -u root -p &lt; mysql-all.sql 				#恢复所有库</span></span></code></pre>
</div><p>注：构建服务所需的包可在<a href="https://download.csdn.net/download/qq_45417634/13208956" target="_blank" rel="noreferrer">server_source_2020.iso </a>请自行下载，您也可以在所需安装包官网下载
本地源配置、防火墙、selinux等是linux较为基础的内容，不再赘述。
本文均为原创，如需与博主交流可email至mufeng.yu@qq.com</p>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[第三步编译安装PHP]]></title>
            <link>https://www.imufeng.cn/technology/web/linux-lamp/third.html</link>
            <guid>https://www.imufeng.cn/technology/web/linux-lamp/third.html</guid>
            <pubDate>Wed, 11 Oct 2023 10:42:02 GMT</pubDate>
            <content:encoded><![CDATA[<h1 id="第三步-编译安装php" tabindex="-1">第三步 编译安装PHP <a class="header-anchor" href="#第三步-编译安装php" aria-label="Permalink to &quot;第三步 编译安装PHP&quot;">&ZeroWidthSpace;</a></h1>
<h2 id="_1、安装前准备" tabindex="-1">1、安装前准备 <a class="header-anchor" href="#_1、安装前准备" aria-label="Permalink to &quot;1、安装前准备&quot;">&ZeroWidthSpace;</a></h2>
<div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre v-pre class="shiki github-dark vp-code-dark" ><code><span class="line"><span style="color: #e1e4e8">#编译安装libmcrypt</span></span>
<span class="line"><span style="color: #e1e4e8">[root@localhost app]# tar -xvf /app/packages/libmcrypt-2.5.8.tar.xz -C /app/</span></span>
<span class="line"><span style="color: #e1e4e8">[root@localhost libmcrypt-2.5.8]# ./configure --prefix=/usr/local/libmcrypt</span></span>
<span class="line"><span style="color: #e1e4e8">[root@localhost libmcrypt-2.5.8]# make &amp;&amp; make install</span></span>
<span class="line"><span style="color: #e1e4e8"></span></span>
<span class="line"><span style="color: #e1e4e8">#编译安装mhash</span></span>
<span class="line"><span style="color: #e1e4e8">[root@localhost libmcrypt-2.5.8]# tar -xvf /app/packages/mhash-0.9.9.9.tar.xz -C /app/</span></span>
<span class="line"><span style="color: #e1e4e8">[root@localhost mhash-0.9.9.9]# ./configure --prefix=/usr/local/mhash</span></span>
<span class="line"><span style="color: #e1e4e8">[root@localhost mhash-0.9.9.9]# make &amp;&amp; make install</span></span>
<span class="line"><span style="color: #e1e4e8"></span></span>
<span class="line"><span style="color: #e1e4e8">#编译安装mcrypt</span></span>
<span class="line"><span style="color: #e1e4e8">[root@localhost libmcrypt-2.5.8]# tar -xvf /app/packages/mcrypt-2.6.8.tar.xz -C /app/</span></span>
<span class="line"><span style="color: #e1e4e8">[root@localhost mcrypt-2.6.8]# export LD_LIBRARY_PATH=/usr/local/libmcrypt/lib:/usr/local/mhash/lib </span></span>
<span class="line"><span style="color: #e1e4e8">[root@localhost mcrypt-2.6.8]# export LDFLAGS=&quot;-L/usr/local/mhash/lib -I/usr/local/mhash/include/&quot; </span></span>
<span class="line"><span style="color: #e1e4e8">[root@localhost mcrypt-2.6.8]# export CFLAGS=&quot;-I/usr/local/mhash/include/&quot; </span></span>
<span class="line"><span style="color: #e1e4e8">[root@localhost mcrypt-2.6.8]# ./configure --prefix=/usr/local/mcrypt --with-libmcrypt-prefix=/usr/local/libmcrypt</span></span>
<span class="line"><span style="color: #e1e4e8">[root@localhost mcrypt-2.6.8]# make &amp;&amp; make install</span></span>
<span class="line"><span style="color: #e1e4e8">#编译安装oniguruma</span></span>
<span class="line"><span style="color: #e1e4e8">[root@localhost packages]wget https://github.com/kkos/oniguruma/archive/v6.9.4.tar.gz -O oniguruma-6.9.4.tar.gz </span></span>
<span class="line"><span style="color: #e1e4e8">[root@localhost ~]# tar -xvf /app/packages/oniguruma-6.9.4.tar.gz -C /app/</span></span>
<span class="line"><span style="color: #e1e4e8">[root@localhost oniguruma-6.9.4]# pwd</span></span>
<span class="line"><span style="color: #e1e4e8">/app/oniguruma-6.9.4</span></span>
<span class="line"><span style="color: #e1e4e8">[root@localhost oniguruma-6.9.4]# ./autogen.sh &amp;&amp; ./configure --prefix=/usr #这里安装路径只能指定/usr</span></span>
<span class="line"><span style="color: #e1e4e8">[root@localhost oniguruma-6.9.4]# make &amp;&amp; make install</span></span>
<span class="line"><span style="color: #e1e4e8">[root@localhost app]# dnf -y install libxml2-devel krb5-devel openssl-devel sqlite-devel libcurl-devel libxslt-devel  libjpeg-devel libzip-devel bzip2-devel libpng-devel  freetype-devel</span></span></code></pre><pre v-pre class="shiki github-light vp-code-light" ><code><span class="line"><span style="color: #24292e">#编译安装libmcrypt</span></span>
<span class="line"><span style="color: #24292e">[root@localhost app]# tar -xvf /app/packages/libmcrypt-2.5.8.tar.xz -C /app/</span></span>
<span class="line"><span style="color: #24292e">[root@localhost libmcrypt-2.5.8]# ./configure --prefix=/usr/local/libmcrypt</span></span>
<span class="line"><span style="color: #24292e">[root@localhost libmcrypt-2.5.8]# make &amp;&amp; make install</span></span>
<span class="line"><span style="color: #24292e"></span></span>
<span class="line"><span style="color: #24292e">#编译安装mhash</span></span>
<span class="line"><span style="color: #24292e">[root@localhost libmcrypt-2.5.8]# tar -xvf /app/packages/mhash-0.9.9.9.tar.xz -C /app/</span></span>
<span class="line"><span style="color: #24292e">[root@localhost mhash-0.9.9.9]# ./configure --prefix=/usr/local/mhash</span></span>
<span class="line"><span style="color: #24292e">[root@localhost mhash-0.9.9.9]# make &amp;&amp; make install</span></span>
<span class="line"><span style="color: #24292e"></span></span>
<span class="line"><span style="color: #24292e">#编译安装mcrypt</span></span>
<span class="line"><span style="color: #24292e">[root@localhost libmcrypt-2.5.8]# tar -xvf /app/packages/mcrypt-2.6.8.tar.xz -C /app/</span></span>
<span class="line"><span style="color: #24292e">[root@localhost mcrypt-2.6.8]# export LD_LIBRARY_PATH=/usr/local/libmcrypt/lib:/usr/local/mhash/lib </span></span>
<span class="line"><span style="color: #24292e">[root@localhost mcrypt-2.6.8]# export LDFLAGS=&quot;-L/usr/local/mhash/lib -I/usr/local/mhash/include/&quot; </span></span>
<span class="line"><span style="color: #24292e">[root@localhost mcrypt-2.6.8]# export CFLAGS=&quot;-I/usr/local/mhash/include/&quot; </span></span>
<span class="line"><span style="color: #24292e">[root@localhost mcrypt-2.6.8]# ./configure --prefix=/usr/local/mcrypt --with-libmcrypt-prefix=/usr/local/libmcrypt</span></span>
<span class="line"><span style="color: #24292e">[root@localhost mcrypt-2.6.8]# make &amp;&amp; make install</span></span>
<span class="line"><span style="color: #24292e">#编译安装oniguruma</span></span>
<span class="line"><span style="color: #24292e">[root@localhost packages]wget https://github.com/kkos/oniguruma/archive/v6.9.4.tar.gz -O oniguruma-6.9.4.tar.gz </span></span>
<span class="line"><span style="color: #24292e">[root@localhost ~]# tar -xvf /app/packages/oniguruma-6.9.4.tar.gz -C /app/</span></span>
<span class="line"><span style="color: #24292e">[root@localhost oniguruma-6.9.4]# pwd</span></span>
<span class="line"><span style="color: #24292e">/app/oniguruma-6.9.4</span></span>
<span class="line"><span style="color: #24292e">[root@localhost oniguruma-6.9.4]# ./autogen.sh &amp;&amp; ./configure --prefix=/usr #这里安装路径只能指定/usr</span></span>
<span class="line"><span style="color: #24292e">[root@localhost oniguruma-6.9.4]# make &amp;&amp; make install</span></span>
<span class="line"><span style="color: #24292e">[root@localhost app]# dnf -y install libxml2-devel krb5-devel openssl-devel sqlite-devel libcurl-devel libxslt-devel  libjpeg-devel libzip-devel bzip2-devel libpng-devel  freetype-devel</span></span></code></pre>
</div><h2 id="_2、php编译选项参考" tabindex="-1">2、php编译选项参考 <a class="header-anchor" href="#_2、php编译选项参考" aria-label="Permalink to &quot;2、php编译选项参考&quot;">&ZeroWidthSpace;</a></h2>
<div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre v-pre class="shiki github-dark vp-code-dark" ><code><span class="line"><span style="color: #e1e4e8">./configure --prefix=/usr/local/php --with-apxs2=/usr/local/apache/bin/apxs  --with-config-file-path=/usr/local/php/etc  --with-mysql --with-mysqli  --with-pdo-mysql --with-mysql-sock=/var/lib/mysql/mysql.sock  --enable-mbstring --enable-session --enable-fpm --enable-opcache --enable-fastcgi --with-fpm-user=daemon  --with-curl  --with-openssl --with-zlib --with-fpm-group=daemon  --enable-gd  --with-libmcrypt=/usr/local/libmcrypt --with-mcrypt=/usr/local/mcrypt  --with-freetype --with-jpeg --with-gettext  --enable-sockets --enable-xml --with-zip --with-libdir=lib64  --with-libxml --with-openssl --with-pear   -with-bz2  --with-session</span></span></code></pre><pre v-pre class="shiki github-light vp-code-light" ><code><span class="line"><span style="color: #24292e">./configure --prefix=/usr/local/php --with-apxs2=/usr/local/apache/bin/apxs  --with-config-file-path=/usr/local/php/etc  --with-mysql --with-mysqli  --with-pdo-mysql --with-mysql-sock=/var/lib/mysql/mysql.sock  --enable-mbstring --enable-session --enable-fpm --enable-opcache --enable-fastcgi --with-fpm-user=daemon  --with-curl  --with-openssl --with-zlib --with-fpm-group=daemon  --enable-gd  --with-libmcrypt=/usr/local/libmcrypt --with-mcrypt=/usr/local/mcrypt  --with-freetype --with-jpeg --with-gettext  --enable-sockets --enable-xml --with-zip --with-libdir=lib64  --with-libxml --with-openssl --with-pear   -with-bz2  --with-session</span></span></code></pre>
</div><h2 id="_3、解压包" tabindex="-1">3、解压包 <a class="header-anchor" href="#_3、解压包" aria-label="Permalink to &quot;3、解压包&quot;">&ZeroWidthSpace;</a></h2>
<div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre v-pre class="shiki github-dark vp-code-dark" ><code><span class="line"><span style="color: #e1e4e8">[root@localhost app]# tar -xvf /app/packages/php-7.4.11.tar.xz -C /app/</span></span></code></pre><pre v-pre class="shiki github-light vp-code-light" ><code><span class="line"><span style="color: #24292e">[root@localhost app]# tar -xvf /app/packages/php-7.4.11.tar.xz -C /app/</span></span></code></pre>
</div><h2 id="_4、编译安装" tabindex="-1">4、编译安装 <a class="header-anchor" href="#_4、编译安装" aria-label="Permalink to &quot;4、编译安装&quot;">&ZeroWidthSpace;</a></h2>
<div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre v-pre class="shiki github-dark vp-code-dark" ><code><span class="line"><span style="color: #e1e4e8">[root@localhost php-7.4.11]# ./configure --prefix=/usr/local/php --with-apxs2=/usr/local/apache/bin/apxs  --with-config-file-path=/usr/local/php/etc  --with-mysql --with-mysqli  --with-pdo-mysql --with-mysql-sock=/var/lib/mysql/mysql.sock  --enable-mbstring --enable-session --enable-fpm --enable-opcache --enable-fastcgi --with-fpm-user=daemon  --with-curl  --with-openssl --with-zlib --with-fpm-group=daemon  --enable-gd  --with-libmcrypt=/usr/local/libmcrypt --with-mcrypt=/usr/local/mcrypt  --with-freetype --with-jpeg --with-gettext  --enable-sockets --enable-xml --with-zip --with-libdir=lib64  --with-libxml --with-openssl --with-pear   -with-bz2  --with-session</span></span>
<span class="line"><span style="color: #e1e4e8">[root@localhost php-7.4.11]# make &amp;&amp; make install</span></span></code></pre><pre v-pre class="shiki github-light vp-code-light" ><code><span class="line"><span style="color: #24292e">[root@localhost php-7.4.11]# ./configure --prefix=/usr/local/php --with-apxs2=/usr/local/apache/bin/apxs  --with-config-file-path=/usr/local/php/etc  --with-mysql --with-mysqli  --with-pdo-mysql --with-mysql-sock=/var/lib/mysql/mysql.sock  --enable-mbstring --enable-session --enable-fpm --enable-opcache --enable-fastcgi --with-fpm-user=daemon  --with-curl  --with-openssl --with-zlib --with-fpm-group=daemon  --enable-gd  --with-libmcrypt=/usr/local/libmcrypt --with-mcrypt=/usr/local/mcrypt  --with-freetype --with-jpeg --with-gettext  --enable-sockets --enable-xml --with-zip --with-libdir=lib64  --with-libxml --with-openssl --with-pear   -with-bz2  --with-session</span></span>
<span class="line"><span style="color: #24292e">[root@localhost php-7.4.11]# make &amp;&amp; make install</span></span></code></pre>
</div><h2 id="_5、创建配置文件" tabindex="-1">5、创建配置文件 <a class="header-anchor" href="#_5、创建配置文件" aria-label="Permalink to &quot;5、创建配置文件&quot;">&ZeroWidthSpace;</a></h2>
<div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre v-pre class="shiki github-dark vp-code-dark" ><code><span class="line"><span style="color: #e1e4e8">[root@localhost php-7.4.11]# pwd</span></span>
<span class="line"><span style="color: #e1e4e8">/app/php-7.4.11</span></span>
<span class="line"><span style="color: #e1e4e8">[root@localhost php-7.4.11]# cp -rf php.ini-production /usr/local/php/etc/php.ini</span></span>
<span class="line"><span style="color: #e1e4e8"></span></span>
<span class="line"><span style="color: #e1e4e8">[root@localhost php-fpm.d]# pwd</span></span>
<span class="line"><span style="color: #e1e4e8">/usr/local/php/etc/php-fpm.d</span></span>
<span class="line"><span style="color: #e1e4e8">[root@localhost php-fpm.d]# cp -rf www.conf.default www.conf</span></span>
<span class="line"><span style="color: #e1e4e8"></span></span>
<span class="line"><span style="color: #e1e4e8">[root@localhost etc]# pwd</span></span>
<span class="line"><span style="color: #e1e4e8">/usr/local/php/etc</span></span>
<span class="line"><span style="color: #e1e4e8">[root@localhost etc]# cp -rf php-fpm.conf.default php-fpm.conf</span></span>
<span class="line"><span style="color: #e1e4e8"></span></span>
<span class="line"><span style="color: #e1e4e8">[root@localhost php]# pwd</span></span>
<span class="line"><span style="color: #e1e4e8">/usr/local/php</span></span>
<span class="line"><span style="color: #e1e4e8">[root@localhost php]# mkdir daemon</span></span>
<span class="line"><span style="color: #e1e4e8"></span></span>
<span class="line"><span style="color: #e1e4e8">[root@localhost php-7.4.11]# pwd</span></span>
<span class="line"><span style="color: #e1e4e8">/app/php-7.4.11     </span></span>
<span class="line"><span style="color: #e1e4e8">[root@localhost php-7.4.11]# cp -rf sapi/fpm/init.d.php-fpm /usr/local/php/daemon/php-fpm</span></span>
<span class="line"><span style="color: #e1e4e8"></span></span>
<span class="line"><span style="color: #e1e4e8">[root@localhost php]# cd daemon/</span></span>
<span class="line"><span style="color: #e1e4e8">[root@localhost daemon]# pwd</span></span>
<span class="line"><span style="color: #e1e4e8">/usr/local/php/daemon</span></span>
<span class="line"><span style="color: #e1e4e8">[root@localhost daemon]# chmod 777 -R php-fpm</span></span></code></pre><pre v-pre class="shiki github-light vp-code-light" ><code><span class="line"><span style="color: #24292e">[root@localhost php-7.4.11]# pwd</span></span>
<span class="line"><span style="color: #24292e">/app/php-7.4.11</span></span>
<span class="line"><span style="color: #24292e">[root@localhost php-7.4.11]# cp -rf php.ini-production /usr/local/php/etc/php.ini</span></span>
<span class="line"><span style="color: #24292e"></span></span>
<span class="line"><span style="color: #24292e">[root@localhost php-fpm.d]# pwd</span></span>
<span class="line"><span style="color: #24292e">/usr/local/php/etc/php-fpm.d</span></span>
<span class="line"><span style="color: #24292e">[root@localhost php-fpm.d]# cp -rf www.conf.default www.conf</span></span>
<span class="line"><span style="color: #24292e"></span></span>
<span class="line"><span style="color: #24292e">[root@localhost etc]# pwd</span></span>
<span class="line"><span style="color: #24292e">/usr/local/php/etc</span></span>
<span class="line"><span style="color: #24292e">[root@localhost etc]# cp -rf php-fpm.conf.default php-fpm.conf</span></span>
<span class="line"><span style="color: #24292e"></span></span>
<span class="line"><span style="color: #24292e">[root@localhost php]# pwd</span></span>
<span class="line"><span style="color: #24292e">/usr/local/php</span></span>
<span class="line"><span style="color: #24292e">[root@localhost php]# mkdir daemon</span></span>
<span class="line"><span style="color: #24292e"></span></span>
<span class="line"><span style="color: #24292e">[root@localhost php-7.4.11]# pwd</span></span>
<span class="line"><span style="color: #24292e">/app/php-7.4.11     </span></span>
<span class="line"><span style="color: #24292e">[root@localhost php-7.4.11]# cp -rf sapi/fpm/init.d.php-fpm /usr/local/php/daemon/php-fpm</span></span>
<span class="line"><span style="color: #24292e"></span></span>
<span class="line"><span style="color: #24292e">[root@localhost php]# cd daemon/</span></span>
<span class="line"><span style="color: #24292e">[root@localhost daemon]# pwd</span></span>
<span class="line"><span style="color: #24292e">/usr/local/php/daemon</span></span>
<span class="line"><span style="color: #24292e">[root@localhost daemon]# chmod 777 -R php-fpm</span></span></code></pre>
</div><h2 id="_6、测试启动php-fpm" tabindex="-1">6、测试启动php-fpm <a class="header-anchor" href="#_6、测试启动php-fpm" aria-label="Permalink to &quot;6、测试启动php-fpm&quot;">&ZeroWidthSpace;</a></h2>
<div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre v-pre class="shiki github-dark vp-code-dark" ><code><span class="line"><span style="color: #e1e4e8">[root@localhost daemon]# ./php-fpm start</span></span>
<span class="line"><span style="color: #e1e4e8">Starting php-fpm  done</span></span>
<span class="line"><span style="color: #e1e4e8">[root@localhost daemon]# ps auxfww | grep php | grep -v grep</span></span>
<span class="line"><span style="color: #e1e4e8">root      132055  0.0  0.1 123664 10848 ?        Ss   16:53   0:00 php-fpm: master process (/usr/local/php/etc/php-fpm.conf)</span></span>
<span class="line"><span style="color: #e1e4e8">daemon    132056  0.0  0.1 149940 10048 ?        S    16:53   0:00  \_ php-fpm: pool www</span></span>
<span class="line"><span style="color: #e1e4e8">daemon    132057  0.0  0.1 149940 10048 ?        S    16:53   0:00  \_ php-fpm: pool www</span></span></code></pre><pre v-pre class="shiki github-light vp-code-light" ><code><span class="line"><span style="color: #24292e">[root@localhost daemon]# ./php-fpm start</span></span>
<span class="line"><span style="color: #24292e">Starting php-fpm  done</span></span>
<span class="line"><span style="color: #24292e">[root@localhost daemon]# ps auxfww | grep php | grep -v grep</span></span>
<span class="line"><span style="color: #24292e">root      132055  0.0  0.1 123664 10848 ?        Ss   16:53   0:00 php-fpm: master process (/usr/local/php/etc/php-fpm.conf)</span></span>
<span class="line"><span style="color: #24292e">daemon    132056  0.0  0.1 149940 10048 ?        S    16:53   0:00  \_ php-fpm: pool www</span></span>
<span class="line"><span style="color: #24292e">daemon    132057  0.0  0.1 149940 10048 ?        S    16:53   0:00  \_ php-fpm: pool www</span></span></code></pre>
</div><h2 id="_7、配置php支持apache" tabindex="-1">7、配置php支持apache <a class="header-anchor" href="#_7、配置php支持apache" aria-label="Permalink to &quot;7、配置php支持apache&quot;">&ZeroWidthSpace;</a></h2>
<h3 id="_7-1-编辑apache配置文件" tabindex="-1">7.1 编辑Apache配置文件 <a class="header-anchor" href="#_7-1-编辑apache配置文件" aria-label="Permalink to &quot;7.1 编辑Apache配置文件&quot;">&ZeroWidthSpace;</a></h3>
<div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre v-pre class="shiki github-dark vp-code-dark" ><code><span class="line"><span style="color: #e1e4e8">[root@localhost ~]# vim /usr/local/apache/conf/httpd.conf</span></span>
<span class="line"><span style="color: #e1e4e8">#找到AddType 添加：</span></span>
<span class="line"><span style="color: #e1e4e8">    AddType application/x-httpd-php .php</span></span>
<span class="line"><span style="color: #e1e4e8">    AddType application/x-httpd-php-source .phps </span></span>
<span class="line"><span style="color: #e1e4e8">#找到</span></span>
<span class="line"><span style="color: #e1e4e8">&lt;IfModule dir_module&gt;</span></span>
<span class="line"><span style="color: #e1e4e8">    DirectoryIndex index.html</span></span>
<span class="line"><span style="color: #e1e4e8">&lt;/IfModule&gt;</span></span>
<span class="line"><span style="color: #e1e4e8">#改为</span></span>
<span class="line"><span style="color: #e1e4e8">&lt;IfModule dir_module&gt;</span></span>
<span class="line"><span style="color: #e1e4e8">    DirectoryIndex index.html index.php</span></span>
<span class="line"><span style="color: #e1e4e8">&lt;/IfModule&gt;</span></span></code></pre><pre v-pre class="shiki github-light vp-code-light" ><code><span class="line"><span style="color: #24292e">[root@localhost ~]# vim /usr/local/apache/conf/httpd.conf</span></span>
<span class="line"><span style="color: #24292e">#找到AddType 添加：</span></span>
<span class="line"><span style="color: #24292e">    AddType application/x-httpd-php .php</span></span>
<span class="line"><span style="color: #24292e">    AddType application/x-httpd-php-source .phps </span></span>
<span class="line"><span style="color: #24292e">#找到</span></span>
<span class="line"><span style="color: #24292e">&lt;IfModule dir_module&gt;</span></span>
<span class="line"><span style="color: #24292e">    DirectoryIndex index.html</span></span>
<span class="line"><span style="color: #24292e">&lt;/IfModule&gt;</span></span>
<span class="line"><span style="color: #24292e">#改为</span></span>
<span class="line"><span style="color: #24292e">&lt;IfModule dir_module&gt;</span></span>
<span class="line"><span style="color: #24292e">    DirectoryIndex index.html index.php</span></span>
<span class="line"><span style="color: #24292e">&lt;/IfModule&gt;</span></span></code></pre>
</div><h3 id="_7-2-编辑php-ini" tabindex="-1">7.2 编辑php.ini <a class="header-anchor" href="#_7-2-编辑php-ini" aria-label="Permalink to &quot;7.2 编辑php.ini&quot;">&ZeroWidthSpace;</a></h3>
<div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre v-pre class="shiki github-dark vp-code-dark" ><code><span class="line"><span style="color: #e1e4e8">[root@localhost ~]# vim /usr/local/php/etc/pht.ini</span></span>
<span class="line"><span style="color: #e1e4e8">#找到display_startup_errors 和 log_errors</span></span>
<span class="line"><span style="color: #e1e4e8">#改为：</span></span>
<span class="line"><span style="color: #e1e4e8">log_errors = On</span></span>
<span class="line"><span style="color: #e1e4e8">display_startup_errors = On</span></span></code></pre><pre v-pre class="shiki github-light vp-code-light" ><code><span class="line"><span style="color: #24292e">[root@localhost ~]# vim /usr/local/php/etc/pht.ini</span></span>
<span class="line"><span style="color: #24292e">#找到display_startup_errors 和 log_errors</span></span>
<span class="line"><span style="color: #24292e">#改为：</span></span>
<span class="line"><span style="color: #24292e">log_errors = On</span></span>
<span class="line"><span style="color: #24292e">display_startup_errors = On</span></span></code></pre>
</div><h3 id="_7-3-重启php-apache" tabindex="-1">7.3 重启php apache <a class="header-anchor" href="#_7-3-重启php-apache" aria-label="Permalink to &quot;7.3 重启php apache&quot;">&ZeroWidthSpace;</a></h3>
<div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre v-pre class="shiki github-dark vp-code-dark" ><code><span class="line"><span style="color: #e1e4e8">[root@localhost ~]# /usr/local/php/daemon/php-fpm restart</span></span>
<span class="line"><span style="color: #e1e4e8">Gracefully shutting down php-fpm . done</span></span>
<span class="line"><span style="color: #e1e4e8">Starting php-fpm  done</span></span>
<span class="line"><span style="color: #e1e4e8">[root@localhost ~]# /usr/local/apache/bin/apachectl -k restart</span></span></code></pre><pre v-pre class="shiki github-light vp-code-light" ><code><span class="line"><span style="color: #24292e">[root@localhost ~]# /usr/local/php/daemon/php-fpm restart</span></span>
<span class="line"><span style="color: #24292e">Gracefully shutting down php-fpm . done</span></span>
<span class="line"><span style="color: #24292e">Starting php-fpm  done</span></span>
<span class="line"><span style="color: #24292e">[root@localhost ~]# /usr/local/apache/bin/apachectl -k restart</span></span></code></pre>
</div><h3 id="_7-4-验证" tabindex="-1">7.4 验证 <a class="header-anchor" href="#_7-4-验证" aria-label="Permalink to &quot;7.4 验证&quot;">&ZeroWidthSpace;</a></h3>
<p>将一个php页面放到/usr/local/apache/htdocs</p>
<p>浏览器访问虚拟机ip</p>
<p>注：构建服务所需的包可在<a href="https://download.csdn.net/download/qq_45417634/13208956" target="_blank" rel="noreferrer">server_source_2020.iso </a>请自行下载，您也可以在所需安装包官网下载
本地源配置、防火墙、selinux等是linux较为基础的内容，不再赘述。
本文均为原创，如需与博主交流可email至mufeng.yu@qq.com</p>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[关于本站]]></title>
            <link>https://www.imufeng.cn/about/</link>
            <guid>https://www.imufeng.cn/about/</guid>
            <pubDate>Mon, 09 Oct 2023 09:31:50 GMT</pubDate>
            <content:encoded><![CDATA[<h1 id="关于本站" tabindex="-1">关于本站 <a class="header-anchor" href="#关于本站" aria-label="Permalink to &quot;关于本站&quot;">&ZeroWidthSpace;</a></h1>
<div class="tip custom-block"><p class="custom-block-title">版权声明</p>
<p>除特殊说明，本站文章皆为原创，著作权归作者所有。依据 <a href="https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh-hans" target="_blank" rel="noreferrer">CC BY-NC-SA 4.0 </a> 许可证进行授权。</p>
<p>本站源码开源于 <a href="https://github.com/i-mufeng/mblog" target="_blank" rel="noreferrer">Github</a> ，采用 <a href="https://www.gnu.org/licenses/gpl-3.0.md" target="_blank" rel="noreferrer">GPLv3</a> 开源协议。</p>
</div>
<details class="details custom-block"><summary>站点信息</summary>
<ul>
<li>
<p><strong>博主：</strong> Mufeng</p>
</li>
<li>
<p><strong>头像：</strong> <a href="https://cn.gravatar.com/avatar/f1dcdc8fa782b81824df5d67022e4d4a" target="_blank" rel="noreferrer">Gavatar-CN</a></p>
</li>
<li>
<p><strong>站点名称：</strong> 沐风的小站</p>
</li>
<li>
<p><strong>站点域名：</strong> <code>imufeng.cn</code></p>
</li>
<li>
<p><strong>E-mail：</strong> <a href="mailto:admin@imufeng.cn" target="_blank" rel="noreferrer">admin@imufeng.cn</a></p>
</li>
</ul>
</details>
<h3 id="关于-mufeng" tabindex="-1">关于 MUFENG <a class="header-anchor" href="#关于-mufeng" aria-label="Permalink to &quot;关于 MUFENG&quot;">&ZeroWidthSpace;</a></h3>
<p>博主是一名萌新程序猿，学计算机纯属热爱，毕业也顺利的踏进了开发这条不归路。目前工作一年，状态良好。喜欢音乐，喜静不喜动。</p>
<p><code>沐风</code>，取如沐春风之意，指不断的熏陶，静静的成长。是我比较追求的一个状态，更贴合我佛系、随遇而安的性格。也希望自己能够达到那种终生学习、不断完善自己的境界。</p>
<h3 id="关于-imufeng-cn" tabindex="-1">关于 IMUFENG.CN <a class="header-anchor" href="#关于-imufeng-cn" aria-label="Permalink to &quot;关于 IMUFENG.CN&quot;">&ZeroWidthSpace;</a></h3>
<p>搭建本站是为了整理自己最近的所得，并写写自己的所思。我之前的一些博文会发布到 <code>CSDN</code>、<code>博客园</code> 等平台，但是自由度会受到很大限制，且某些平台吃相难看，认真做内容的平台不断被打压。所以我认为自己搭建一个站点还是有必要的。</p>
<p>之前也尝试过一些开源博客，以及 <code>Wordpress</code> ，虽然但是，总还是觉得用着不舒服，所以最终还是选择了 <code>VitePress</code>。</p>
<h3 id="建站历程" tabindex="-1">建站历程 <a class="header-anchor" href="#建站历程" aria-label="Permalink to &quot;建站历程&quot;">&ZeroWidthSpace;</a></h3>
<br>
<div class='timeline-dot'><span class='timeline-dot-title'>2019年</span>
<ul>
<li>在自学过程中，了解到基本的建站知识。</li>
<li>购买了一台云主机以及 mangoling.top 的域名。</li>
<li>尝试为自己的域名备案。</li>
</ul>
</div>
<div class='timeline-dot'><span class='timeline-dot-title'>2020年</span>
<ul>
<li>由于疫情被封，一直自学 Linux 及开发相关知识。</li>
</ul>
</div>
<div class='timeline-dot'><span class='timeline-dot-title'>2021 年</span>
<ul>
<li>学习 HTTPS 相关知识，为域名绑定https证书。</li>
<li>通过 Typora 将 markdown 笔记导出为 HTML 并发布，向同学分享。</li>
<li>入手 imufeng.cn 域名，购买了第一台云服务器。</li>
</ul>
</div>
<div class='timeline-dot'><span class='timeline-dot-title'>2022年</span>
<ul>
<li>找到一款基于SpringBoot + Vue 的个人博客系统，学习并完善。</li>
<li>学习 Docker 等知识，使用其搭建了 LNMP 架构的服务器并部署了自己的博客。</li>
</ul>
</div>
<div class='timeline-dot'><span class='timeline-dot-title'>2023年</span>
<ul>
<li>为博客的后续寻找方向，尝试过 WordPress 以及自己开发，最终选择了 Vitepress。</li>
<li>逐步完善 Vitepress，接入百度统计站，学习 SEO 优化等相关知识，</li>
</ul>
</div>
<div class='timeline-dot'><span class='timeline-dot-title'>将继续完善</span>
</div>
]]></content:encoded>
        </item>
        <item>
            <link>https://www.imufeng.cn/question-by-day/2024/1.html</link>
            <guid>https://www.imufeng.cn/question-by-day/2024/1.html</guid>
            <pubDate>Sat, 07 Oct 2023 09:47:18 GMT</pubDate>
        </item>
        <item>
            <link>https://www.imufeng.cn/question-by-day/2024/10.html</link>
            <guid>https://www.imufeng.cn/question-by-day/2024/10.html</guid>
            <pubDate>Sat, 07 Oct 2023 09:47:18 GMT</pubDate>
        </item>
        <item>
            <link>https://www.imufeng.cn/question-by-day/2024/11.html</link>
            <guid>https://www.imufeng.cn/question-by-day/2024/11.html</guid>
            <pubDate>Sat, 07 Oct 2023 09:47:18 GMT</pubDate>
        </item>
        <item>
            <link>https://www.imufeng.cn/question-by-day/2024/12.html</link>
            <guid>https://www.imufeng.cn/question-by-day/2024/12.html</guid>
            <pubDate>Sat, 07 Oct 2023 09:47:18 GMT</pubDate>
        </item>
        <item>
            <link>https://www.imufeng.cn/question-by-day/2024/2.html</link>
            <guid>https://www.imufeng.cn/question-by-day/2024/2.html</guid>
            <pubDate>Sat, 07 Oct 2023 09:47:18 GMT</pubDate>
        </item>
        <item>
            <link>https://www.imufeng.cn/question-by-day/2024/3.html</link>
            <guid>https://www.imufeng.cn/question-by-day/2024/3.html</guid>
            <pubDate>Sat, 07 Oct 2023 09:47:18 GMT</pubDate>
        </item>
        <item>
            <link>https://www.imufeng.cn/question-by-day/2024/4.html</link>
            <guid>https://www.imufeng.cn/question-by-day/2024/4.html</guid>
            <pubDate>Sat, 07 Oct 2023 09:47:18 GMT</pubDate>
        </item>
        <item>
            <link>https://www.imufeng.cn/question-by-day/2024/5.html</link>
            <guid>https://www.imufeng.cn/question-by-day/2024/5.html</guid>
            <pubDate>Sat, 07 Oct 2023 09:47:18 GMT</pubDate>
        </item>
        <item>
            <link>https://www.imufeng.cn/question-by-day/2024/6.html</link>
            <guid>https://www.imufeng.cn/question-by-day/2024/6.html</guid>
            <pubDate>Sat, 07 Oct 2023 09:47:18 GMT</pubDate>
        </item>
        <item>
            <link>https://www.imufeng.cn/question-by-day/2024/7.html</link>
            <guid>https://www.imufeng.cn/question-by-day/2024/7.html</guid>
            <pubDate>Sat, 07 Oct 2023 09:47:18 GMT</pubDate>
        </item>
        <item>
            <link>https://www.imufeng.cn/question-by-day/2024/8.html</link>
            <guid>https://www.imufeng.cn/question-by-day/2024/8.html</guid>
            <pubDate>Sat, 07 Oct 2023 09:47:18 GMT</pubDate>
        </item>
        <item>
            <link>https://www.imufeng.cn/question-by-day/2024/9.html</link>
            <guid>https://www.imufeng.cn/question-by-day/2024/9.html</guid>
            <pubDate>Sat, 07 Oct 2023 09:47:18 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[我的分享]]></title>
            <link>https://www.imufeng.cn/share/</link>
            <guid>https://www.imufeng.cn/share/</guid>
            <pubDate>Sat, 07 Oct 2023 09:41:07 GMT</pubDate>
            <content:encoded><![CDATA[<h1 id="我的分享" tabindex="-1">我的分享 <a class="header-anchor" href="#我的分享" aria-label="Permalink to &quot;我的分享&quot;">&ZeroWidthSpace;</a></h1>
]]></content:encoded>
        </item>
        <item>
            <link>https://www.imufeng.cn/question-by-day/2023/11.html</link>
            <guid>https://www.imufeng.cn/question-by-day/2023/11.html</guid>
            <pubDate>Sat, 07 Oct 2023 09:41:07 GMT</pubDate>
        </item>
        <item>
            <link>https://www.imufeng.cn/question-by-day/2023/12.html</link>
            <guid>https://www.imufeng.cn/question-by-day/2023/12.html</guid>
            <pubDate>Sat, 07 Oct 2023 09:41:07 GMT</pubDate>
        </item>
        <item>
            <link>https://www.imufeng.cn/question-by-day/2023/9.html</link>
            <guid>https://www.imufeng.cn/question-by-day/2023/9.html</guid>
            <pubDate>Sat, 07 Oct 2023 09:41:07 GMT</pubDate>
            <content:encoded><![CDATA[<h2 id="_9-30" tabindex="-1">9-30 <a class="header-anchor" href="#_9-30" aria-label="Permalink to &quot;9-30&quot;">&ZeroWidthSpace;</a></h2>
<h3 id="java中的重载和重写有什么区别" tabindex="-1">Java中的重载和重写有什么区别？ <a class="header-anchor" href="#java中的重载和重写有什么区别" aria-label="Permalink to &quot;Java中的重载和重写有什么区别？&quot;">&ZeroWidthSpace;</a></h3>
<ul>
<li>重载（Overloading）：在同一个类中，方法名相同但参数列表不同，可以有不同的返回类型。编译器根据方法参数的类型、个数、顺序来选择调用相应的方法。</li>
<li>重写（Overriding）：在子类中重新实现父类的方法，方法名、参数列表和返回类型必须相同。重写用于改变父类方法的实现，以适应子类的特定需求。</li>
</ul>
<h2 id="_9-29" tabindex="-1">9-29 <a class="header-anchor" href="#_9-29" aria-label="Permalink to &quot;9-29&quot;">&ZeroWidthSpace;</a></h2>
<h3 id="java中的四种访问修饰符是什么" tabindex="-1">Java中的四种访问修饰符是什么？ <a class="header-anchor" href="#java中的四种访问修饰符是什么" aria-label="Permalink to &quot;Java中的四种访问修饰符是什么？&quot;">&ZeroWidthSpace;</a></h3>
<ul>
<li><code>public</code>：对所有类可见。</li>
<li><code>private</code>：仅对类本身可见。</li>
<li><code>protected</code>：对同一包内的类和所有子类可见。</li>
<li><code>default</code>（不使用修饰符）：对同一包内的类可见。</li>
</ul>
<h2 id="_9-28" tabindex="-1">9-28 <a class="header-anchor" href="#_9-28" aria-label="Permalink to &quot;9-28&quot;">&ZeroWidthSpace;</a></h2>
<h3 id="请用-java-写一个冒泡排序" tabindex="-1">请用 JAVA 写一个冒泡排序？ <a class="header-anchor" href="#请用-java-写一个冒泡排序" aria-label="Permalink to &quot;请用 JAVA 写一个冒泡排序？&quot;">&ZeroWidthSpace;</a></h3>
<p>冒泡排序原理是逐一比较相邻元素，通过交换位置逐步将较大的数移动到末尾。</p>
<div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre v-pre class="shiki github-dark vp-code-dark" ><code><span class="line"><span style="color: #F97583">public</span><span style="color: #E1E4E8"> </span><span style="color: #F97583">class</span><span style="color: #E1E4E8"> </span><span style="color: #B392F0">BubbleSort</span><span style="color: #E1E4E8"> {</span></span>
<span class="line"><span style="color: #E1E4E8">    </span></span>
<span class="line"><span style="color: #6A737D">    /**</span></span>
<span class="line"><span style="color: #6A737D">     * 对整数数组进行冒泡排序，将数组按升序排列</span></span>
<span class="line"><span style="color: #6A737D">     * </span></span>
<span class="line"><span style="color: #6A737D">     * </span><span style="color: #F97583">@param</span><span style="color: #6A737D"> </span><span style="color: #FFAB70">array</span><span style="color: #6A737D"> 待排序的整数数组</span></span>
<span class="line"><span style="color: #6A737D">     */</span></span>
<span class="line"><span style="color: #E1E4E8">    </span><span style="color: #F97583">public</span><span style="color: #E1E4E8"> </span><span style="color: #F97583">static</span><span style="color: #E1E4E8"> </span><span style="color: #F97583">void</span><span style="color: #E1E4E8"> </span><span style="color: #B392F0">bubbleSort</span><span style="color: #E1E4E8">(</span><span style="color: #F97583">int</span><span style="color: #E1E4E8">[] </span><span style="color: #FFAB70">array</span><span style="color: #E1E4E8">) {</span></span>
<span class="line"><span style="color: #E1E4E8">        </span><span style="color: #F97583">int</span><span style="color: #E1E4E8"> n </span><span style="color: #F97583">=</span><span style="color: #E1E4E8"> array.length;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #E1E4E8">        </span><span style="color: #6A737D">// 外层循环控制每轮比较的次数</span></span>
<span class="line"><span style="color: #E1E4E8">        </span><span style="color: #F97583">for</span><span style="color: #E1E4E8"> (</span><span style="color: #F97583">int</span><span style="color: #E1E4E8"> i </span><span style="color: #F97583">=</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">0</span><span style="color: #E1E4E8">; i </span><span style="color: #F97583">&lt;</span><span style="color: #E1E4E8"> n </span><span style="color: #F97583">-</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">1</span><span style="color: #E1E4E8">; i</span><span style="color: #F97583">++</span><span style="color: #E1E4E8">) {</span></span>
<span class="line"><span style="color: #E1E4E8">            </span><span style="color: #6A737D">// 内层循环比较相邻元素，将较大的元素移到后面</span></span>
<span class="line"><span style="color: #E1E4E8">            </span><span style="color: #F97583">for</span><span style="color: #E1E4E8"> (</span><span style="color: #F97583">int</span><span style="color: #E1E4E8"> j </span><span style="color: #F97583">=</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">0</span><span style="color: #E1E4E8">; j </span><span style="color: #F97583">&lt;</span><span style="color: #E1E4E8"> n </span><span style="color: #F97583">-</span><span style="color: #E1E4E8"> i </span><span style="color: #F97583">-</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">1</span><span style="color: #E1E4E8">; j</span><span style="color: #F97583">++</span><span style="color: #E1E4E8">) {</span></span>
<span class="line"><span style="color: #E1E4E8">                </span><span style="color: #6A737D">// 如果前一个元素大于后一个元素，则交换它们的位置</span></span>
<span class="line"><span style="color: #E1E4E8">                </span><span style="color: #F97583">if</span><span style="color: #E1E4E8"> (array[j] </span><span style="color: #F97583">&gt;</span><span style="color: #E1E4E8"> array[j </span><span style="color: #F97583">+</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">1</span><span style="color: #E1E4E8">]) {</span></span>
<span class="line"><span style="color: #E1E4E8">                    </span><span style="color: #F97583">int</span><span style="color: #E1E4E8"> temp </span><span style="color: #F97583">=</span><span style="color: #E1E4E8"> array[j];</span></span>
<span class="line"><span style="color: #E1E4E8">                    array[j] </span><span style="color: #F97583">=</span><span style="color: #E1E4E8"> array[j </span><span style="color: #F97583">+</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">1</span><span style="color: #E1E4E8">];</span></span>
<span class="line"><span style="color: #E1E4E8">                    array[j </span><span style="color: #F97583">+</span><span style="color: #E1E4E8"> </span><span style="color: #79B8FF">1</span><span style="color: #E1E4E8">] </span><span style="color: #F97583">=</span><span style="color: #E1E4E8"> temp;</span></span>
<span class="line"><span style="color: #E1E4E8">                }</span></span>
<span class="line"><span style="color: #E1E4E8">            }</span></span>
<span class="line"><span style="color: #E1E4E8">        }</span></span>
<span class="line"><span style="color: #E1E4E8">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color: #E1E4E8">    </span><span style="color: #F97583">public</span><span style="color: #E1E4E8"> </span><span style="color: #F97583">static</span><span style="color: #E1E4E8"> </span><span style="color: #F97583">void</span><span style="color: #E1E4E8"> </span><span style="color: #B392F0">main</span><span style="color: #E1E4E8">(</span><span style="color: #F97583">String</span><span style="color: #E1E4E8">[] </span><span style="color: #FFAB70">args</span><span style="color: #E1E4E8">) {</span></span>
<span class="line"><span style="color: #E1E4E8">        </span><span style="color: #F97583">int</span><span style="color: #E1E4E8">[] nums </span><span style="color: #F97583">=</span><span style="color: #E1E4E8"> {</span><span style="color: #79B8FF">64</span><span style="color: #E1E4E8">, </span><span style="color: #79B8FF">34</span><span style="color: #E1E4E8">, </span><span style="color: #79B8FF">25</span><span style="color: #E1E4E8">, </span><span style="color: #79B8FF">12</span><span style="color: #E1E4E8">, </span><span style="color: #79B8FF">22</span><span style="color: #E1E4E8">, </span><span style="color: #79B8FF">11</span><span style="color: #E1E4E8">, </span><span style="color: #79B8FF">90</span><span style="color: #E1E4E8">};</span></span>
<span class="line"></span>
<span class="line"><span style="color: #E1E4E8">        System.out.</span><span style="color: #B392F0">println</span><span style="color: #E1E4E8">(</span><span style="color: #9ECBFF">&quot;原始数组:&quot;</span><span style="color: #E1E4E8">);</span></span>
<span class="line"><span style="color: #E1E4E8">        </span><span style="color: #F97583">for</span><span style="color: #E1E4E8"> (</span><span style="color: #F97583">int</span><span style="color: #E1E4E8"> num </span><span style="color: #F97583">:</span><span style="color: #E1E4E8"> nums) {</span></span>
<span class="line"><span style="color: #E1E4E8">            System.out.</span><span style="color: #B392F0">print</span><span style="color: #E1E4E8">(num </span><span style="color: #F97583">+</span><span style="color: #E1E4E8"> </span><span style="color: #9ECBFF">&quot; &quot;</span><span style="color: #E1E4E8">);</span></span>
<span class="line"><span style="color: #E1E4E8">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color: #E1E4E8">        </span><span style="color: #B392F0">bubbleSort</span><span style="color: #E1E4E8">(nums);</span></span>
<span class="line"></span>
<span class="line"><span style="color: #E1E4E8">        System.out.</span><span style="color: #B392F0">println</span><span style="color: #E1E4E8">(</span><span style="color: #9ECBFF">&quot;</span><span style="color: #79B8FF">\n</span><span style="color: #9ECBFF">排序后的数组:&quot;</span><span style="color: #E1E4E8">);</span></span>
<span class="line"><span style="color: #E1E4E8">        </span><span style="color: #F97583">for</span><span style="color: #E1E4E8"> (</span><span style="color: #F97583">int</span><span style="color: #E1E4E8"> num </span><span style="color: #F97583">:</span><span style="color: #E1E4E8"> nums) {</span></span>
<span class="line"><span style="color: #E1E4E8">            System.out.</span><span style="color: #B392F0">print</span><span style="color: #E1E4E8">(num </span><span style="color: #F97583">+</span><span style="color: #E1E4E8"> </span><span style="color: #9ECBFF">&quot; &quot;</span><span style="color: #E1E4E8">);</span></span>
<span class="line"><span style="color: #E1E4E8">        }</span></span>
<span class="line"><span style="color: #E1E4E8">    }</span></span>
<span class="line"><span style="color: #E1E4E8">}</span></span></code></pre><pre v-pre class="shiki github-light vp-code-light" ><code><span class="line"><span style="color: #D73A49">public</span><span style="color: #24292E"> </span><span style="color: #D73A49">class</span><span style="color: #24292E"> </span><span style="color: #6F42C1">BubbleSort</span><span style="color: #24292E"> {</span></span>
<span class="line"><span style="color: #24292E">    </span></span>
<span class="line"><span style="color: #6A737D">    /**</span></span>
<span class="line"><span style="color: #6A737D">     * 对整数数组进行冒泡排序，将数组按升序排列</span></span>
<span class="line"><span style="color: #6A737D">     * </span></span>
<span class="line"><span style="color: #6A737D">     * </span><span style="color: #D73A49">@param</span><span style="color: #6A737D"> </span><span style="color: #E36209">array</span><span style="color: #6A737D"> 待排序的整数数组</span></span>
<span class="line"><span style="color: #6A737D">     */</span></span>
<span class="line"><span style="color: #24292E">    </span><span style="color: #D73A49">public</span><span style="color: #24292E"> </span><span style="color: #D73A49">static</span><span style="color: #24292E"> </span><span style="color: #D73A49">void</span><span style="color: #24292E"> </span><span style="color: #6F42C1">bubbleSort</span><span style="color: #24292E">(</span><span style="color: #D73A49">int</span><span style="color: #24292E">[] </span><span style="color: #E36209">array</span><span style="color: #24292E">) {</span></span>
<span class="line"><span style="color: #24292E">        </span><span style="color: #D73A49">int</span><span style="color: #24292E"> n </span><span style="color: #D73A49">=</span><span style="color: #24292E"> array.length;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #24292E">        </span><span style="color: #6A737D">// 外层循环控制每轮比较的次数</span></span>
<span class="line"><span style="color: #24292E">        </span><span style="color: #D73A49">for</span><span style="color: #24292E"> (</span><span style="color: #D73A49">int</span><span style="color: #24292E"> i </span><span style="color: #D73A49">=</span><span style="color: #24292E"> </span><span style="color: #005CC5">0</span><span style="color: #24292E">; i </span><span style="color: #D73A49">&lt;</span><span style="color: #24292E"> n </span><span style="color: #D73A49">-</span><span style="color: #24292E"> </span><span style="color: #005CC5">1</span><span style="color: #24292E">; i</span><span style="color: #D73A49">++</span><span style="color: #24292E">) {</span></span>
<span class="line"><span style="color: #24292E">            </span><span style="color: #6A737D">// 内层循环比较相邻元素，将较大的元素移到后面</span></span>
<span class="line"><span style="color: #24292E">            </span><span style="color: #D73A49">for</span><span style="color: #24292E"> (</span><span style="color: #D73A49">int</span><span style="color: #24292E"> j </span><span style="color: #D73A49">=</span><span style="color: #24292E"> </span><span style="color: #005CC5">0</span><span style="color: #24292E">; j </span><span style="color: #D73A49">&lt;</span><span style="color: #24292E"> n </span><span style="color: #D73A49">-</span><span style="color: #24292E"> i </span><span style="color: #D73A49">-</span><span style="color: #24292E"> </span><span style="color: #005CC5">1</span><span style="color: #24292E">; j</span><span style="color: #D73A49">++</span><span style="color: #24292E">) {</span></span>
<span class="line"><span style="color: #24292E">                </span><span style="color: #6A737D">// 如果前一个元素大于后一个元素，则交换它们的位置</span></span>
<span class="line"><span style="color: #24292E">                </span><span style="color: #D73A49">if</span><span style="color: #24292E"> (array[j] </span><span style="color: #D73A49">&gt;</span><span style="color: #24292E"> array[j </span><span style="color: #D73A49">+</span><span style="color: #24292E"> </span><span style="color: #005CC5">1</span><span style="color: #24292E">]) {</span></span>
<span class="line"><span style="color: #24292E">                    </span><span style="color: #D73A49">int</span><span style="color: #24292E"> temp </span><span style="color: #D73A49">=</span><span style="color: #24292E"> array[j];</span></span>
<span class="line"><span style="color: #24292E">                    array[j] </span><span style="color: #D73A49">=</span><span style="color: #24292E"> array[j </span><span style="color: #D73A49">+</span><span style="color: #24292E"> </span><span style="color: #005CC5">1</span><span style="color: #24292E">];</span></span>
<span class="line"><span style="color: #24292E">                    array[j </span><span style="color: #D73A49">+</span><span style="color: #24292E"> </span><span style="color: #005CC5">1</span><span style="color: #24292E">] </span><span style="color: #D73A49">=</span><span style="color: #24292E"> temp;</span></span>
<span class="line"><span style="color: #24292E">                }</span></span>
<span class="line"><span style="color: #24292E">            }</span></span>
<span class="line"><span style="color: #24292E">        }</span></span>
<span class="line"><span style="color: #24292E">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color: #24292E">    </span><span style="color: #D73A49">public</span><span style="color: #24292E"> </span><span style="color: #D73A49">static</span><span style="color: #24292E"> </span><span style="color: #D73A49">void</span><span style="color: #24292E"> </span><span style="color: #6F42C1">main</span><span style="color: #24292E">(</span><span style="color: #D73A49">String</span><span style="color: #24292E">[] </span><span style="color: #E36209">args</span><span style="color: #24292E">) {</span></span>
<span class="line"><span style="color: #24292E">        </span><span style="color: #D73A49">int</span><span style="color: #24292E">[] nums </span><span style="color: #D73A49">=</span><span style="color: #24292E"> {</span><span style="color: #005CC5">64</span><span style="color: #24292E">, </span><span style="color: #005CC5">34</span><span style="color: #24292E">, </span><span style="color: #005CC5">25</span><span style="color: #24292E">, </span><span style="color: #005CC5">12</span><span style="color: #24292E">, </span><span style="color: #005CC5">22</span><span style="color: #24292E">, </span><span style="color: #005CC5">11</span><span style="color: #24292E">, </span><span style="color: #005CC5">90</span><span style="color: #24292E">};</span></span>
<span class="line"></span>
<span class="line"><span style="color: #24292E">        System.out.</span><span style="color: #6F42C1">println</span><span style="color: #24292E">(</span><span style="color: #032F62">&quot;原始数组:&quot;</span><span style="color: #24292E">);</span></span>
<span class="line"><span style="color: #24292E">        </span><span style="color: #D73A49">for</span><span style="color: #24292E"> (</span><span style="color: #D73A49">int</span><span style="color: #24292E"> num </span><span style="color: #D73A49">:</span><span style="color: #24292E"> nums) {</span></span>
<span class="line"><span style="color: #24292E">            System.out.</span><span style="color: #6F42C1">print</span><span style="color: #24292E">(num </span><span style="color: #D73A49">+</span><span style="color: #24292E"> </span><span style="color: #032F62">&quot; &quot;</span><span style="color: #24292E">);</span></span>
<span class="line"><span style="color: #24292E">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color: #24292E">        </span><span style="color: #6F42C1">bubbleSort</span><span style="color: #24292E">(nums);</span></span>
<span class="line"></span>
<span class="line"><span style="color: #24292E">        System.out.</span><span style="color: #6F42C1">println</span><span style="color: #24292E">(</span><span style="color: #032F62">&quot;</span><span style="color: #005CC5">\n</span><span style="color: #032F62">排序后的数组:&quot;</span><span style="color: #24292E">);</span></span>
<span class="line"><span style="color: #24292E">        </span><span style="color: #D73A49">for</span><span style="color: #24292E"> (</span><span style="color: #D73A49">int</span><span style="color: #24292E"> num </span><span style="color: #D73A49">:</span><span style="color: #24292E"> nums) {</span></span>
<span class="line"><span style="color: #24292E">            System.out.</span><span style="color: #6F42C1">print</span><span style="color: #24292E">(num </span><span style="color: #D73A49">+</span><span style="color: #24292E"> </span><span style="color: #032F62">&quot; &quot;</span><span style="color: #24292E">);</span></span>
<span class="line"><span style="color: #24292E">        }</span></span>
<span class="line"><span style="color: #24292E">    }</span></span>
<span class="line"><span style="color: #24292E">}</span></span></code></pre>
</div><h2 id="_9-27" tabindex="-1">9-27 <a class="header-anchor" href="#_9-27" aria-label="Permalink to &quot;9-27&quot;">&ZeroWidthSpace;</a></h2>
<h3 id="什么是前后端分离" tabindex="-1">什么是前后端分离？ <a class="header-anchor" href="#什么是前后端分离" aria-label="Permalink to &quot;什么是前后端分离？&quot;">&ZeroWidthSpace;</a></h3>
<blockquote>
<p>前后端分离技术目前已经成为互联网项目研发的基础，JAVA 中一般使用 <code>Nginx</code> + <code>Tomcat</code> 的架构实现。将数据处理与页面展示有效的进行解耦。为多客户端、大型分布式架构、微服务架构等都打下了坚实的基础。</p>
</blockquote>
<p>这里以 <code>VUE</code> + <code>SpringBoot</code> 的系统举例，通常来讲，前端部署在 <code>Nginx</code>、<code>Apache</code> 等 Web 服务器，后端通常部署在 <code>Tomcat</code> 等应用服务器，使用 <code>JSON</code> 交互数据。后端根据 <code>Rustful Api</code>  规范开发数据接口，并通过 <code>Token</code>、<code>Session</code> 等安全机制进行认证，使用 <code>Mybatis</code> 等持久层框架与数据库进行通信。这些接口必须通过接口的相关规定进行调用。前端使用 <code>Ajax</code> 技术通过 <code>HTTP</code> 等协议实现对后端接口的调用，在后端主导的项目开发中，后端可以通过 <code>SpringDoc</code> 等方式提供接口文档，说明接口调用规范，供前端开发人员阅读。</p>
<p><strong>优点：</strong></p>
<p>前后端分离架构的主要优点是实现了数据与页面显示的解耦，开发人员能够专注于自己的方向，提升系统的开发效率、代码的可重用性及用户的体验感，并且由于后端所在的应用服务器一般都部署在内网，通过 web 服务器反向代理实现，能够增强后端数据的安全性。同时，能够同时利用 Web 服务器速度更快的优点以及应用服务器的动态资源处理，更便于开发及部署。</p>
<p><strong>缺点：</strong></p>
<ul>
<li>系统开发对于人员数量及团队的配合度要求变大。</li>
<li>由于系统调整需要同时对前后端都进行调整，这将增大系统迭代的周期。</li>
<li>前端开发通常都要基于后端接口，这增大了对前端开发的技术水平要求及上手难度。</li>
<li>前端开发需要编写更多的代码来处理数据交互和逻辑，这增加了前端开发的工作量。</li>
<li>前后端分离由于浏览器的同源策略限制，会导致前后端之间的访问出现跨域问题。</li>
</ul>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[每日一题 - 2024]]></title>
            <link>https://www.imufeng.cn/question-by-day/2024/</link>
            <guid>https://www.imufeng.cn/question-by-day/2024/</guid>
            <pubDate>Sat, 07 Oct 2023 09:41:07 GMT</pubDate>
            <content:encoded><![CDATA[<p>还没有。。。</p>
]]></content:encoded>
        </item>
    </channel>
</rss>